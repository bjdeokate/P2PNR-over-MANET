{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f34\fbidi \froman\fcharset1\fprq2{\*\panose 02040503050406030204}Cambria Math;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f39\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f40\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f42\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f43\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f44\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f45\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f46\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f47\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f59\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f60\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f62\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f63\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f64\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f65\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f66\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f67\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31573\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\fhiminor\f31574\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green176\blue80;}{\*\defchp \fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 
\ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused 
Normal Table;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid5597523\rsid10751145\rsid13572568}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\operator LENOVO}
{\creatim\yr2022\mo9\dy9\hr19\min32}{\revtim\yr2022\mo9\dy9\hr19\min42}{\version3}{\edmins10}{\nofpages69}{\nofwords15463}{\nofchars88145}{\nofcharsws103402}{\vern49169}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}
\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\rsidroot5597523 \nouicompat \fet0{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 
\fs22\lang1033\langfe1033\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 /***************************************************************************

\par \hich\af2\dbch\af31505\loch\f2  *   Copyright (C) 2004 by Francisco J. Ros                                *
\par \hich\af2\dbch\af31505\loch\f2  *   fjrm@dif.um.es                                                        *
\par \hich\af2\dbch\af31505\loch\f2  *   Adapted for omnetpp                                                   *
\par \hich\af2\dbch\af31505\loch\f2  *   2008 Alfonso Ariza Quintana aarizaq@uma.es                            *
\par \hich\af2\dbch\af31505\loch\f2  *                                                                         *
\par \hich\af2\dbch\af31505\loch\f2  *                       \hich\af2\dbch\af31505\loch\f2                                                   *
\par \hich\af2\dbch\af31505\loch\f2  *   This program is free software; you can redistribute it and/or modify  *
\par \hich\af2\dbch\af31505\loch\f2  *   it under the terms of the GNU General Public License as published by  *
\par \hich\af2\dbch\af31505\loch\f2  *   the Free Software Foundation; either version \hich\af2\dbch\af31505\loch\f2 2 of the License, or     *
\par \hich\af2\dbch\af31505\loch\f2  *   (at your option) any later version.                                   *
\par \hich\af2\dbch\af31505\loch\f2  *                                                                         *
\par \hich\af2\dbch\af31505\loch\f2  *   This program is distributed in the hope that it will be useful,       \hich\af2\dbch\af31505\loch\f2 *
\par \hich\af2\dbch\af31505\loch\f2  *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
\par \hich\af2\dbch\af31505\loch\f2  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
\par \hich\af2\dbch\af31505\loch\f2  *   GNU General Public License for more details.                          *
\par \hich\af2\dbch\af31505\loch\f2  *                     \hich\af2\dbch\af31505\loch\f2                                                     *
\par \hich\af2\dbch\af31505\loch\f2  *   You should have received a copy of the GNU General Public License     *
\par \hich\af2\dbch\af31505\loch\f2  *   along with this program; if not, write to the                         *
\par \hich\af2\dbch\af31505\loch\f2  *   Free Software Foundation, Inc.,            \hich\af2\dbch\af31505\loch\f2                            *
\par \hich\af2\dbch\af31505\loch\f2  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
\par \hich\af2\dbch\af31505\loch\f2  ***************************************************************************/
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\file   OLSR.cc
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief  Implementation of OLSR agent and re\hich\af2\dbch\af31505\loch\f2 lated classes.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// This is the main file of this software because %OLSR's behaviour is
\par \hich\af2\dbch\af31505\loch\f2 /// implemented here.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #include <math.h>
\par \hich\af2\dbch\af31505\loch\f2 #include <limits.h>
\par 
\par \hich\af2\dbch\af31505\loch\f2 #include "UDPPacket.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPv4Datagram.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPv4ControlInfo.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPv4InterfaceData.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPv6ControlInfo.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "RoutingTableAccess.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "InterfaceTableAccess.h"
\par 
\par \hich\af2\dbch\af31505\loch\f2 #include "OLSRpkt_m.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "OLSR.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "Ieee802Ctrl_m.h"
\par 
\par \hich\af2\dbch\af31505\loch\f2 /// Length (in bytes) of UDP header.
\par \hich\af2\dbch\af31505\loch\f2 #define UDP_HDR_LEN 8
\par \hich\af2\dbch\af31505\loch\f2 /\hich\af2\dbch\af31505\loch\f2 // Port Number
\par \hich\af2\dbch\af31505\loch\f2 #define RT_PORT 698
\par \hich\af2\dbch\af31505\loch\f2 #define IP_DEF_TTL 32
\par 
\par \hich\af2\dbch\af31505\loch\f2 #define MULTIPLE_IFACES_SUPPORT
\par \hich\af2\dbch\af31505\loch\f2 #define state_      (*state_ptr)
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Function called by MAC layer when cannot deliver a packet.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param p Packet which couldn't be delivered.
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 param arg OLSR agent passed for a callback.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par 
\par \hich\af2\dbch\af31505\loch\f2 Define_Module(OLSR);
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 std::ostream& operator<<(std::ostream& os, const OLSR_rt_entry& e)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     os << "dest:"<< e.dest_addr_.str() << " ";
\par \hich\af2\dbch\af31505\loch\f2     os << "gw:" << e.next_addr_.str() << " ";
\par \hich\af2\dbch\af31505\loch\f2     os << "iface:" << \hich\af2\dbch\af31505\loch\f2 e.iface_addr_.str() << " ";
\par \hich\af2\dbch\af31505\loch\f2     os << "dist:" << e.dist_ << " ";
\par \hich\af2\dbch\af31505\loch\f2     return os;
\par \}\hich\af2\dbch\af31505\loch\f2 ;
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 uint32 OlsrAddressSize::ADDR_SIZE = ADDR_SIZE_DEFAULT;
\par \hich\af2\dbch\af31505\loch\f2 OLSR::GlobalRtable OLSR::globalRtable;
\par \hich\af2\dbch\af31505\loch\f2 OLSR::DistributionPath OLSR::distributionPath;
\par 
\par \hich\af2\dbch\af31505\loch\f2 /********** Timers **********\hich\af2\dbch\af31505\loch\f2 /
\par 
\par \hich\af2\dbch\af31505\loch\f2 void OLSR_Timer::removeTimer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     removeQueueTimer();
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_Timer::OLSR_Timer(OLSR* agent) : cOwnedObject("OLSR_Timer")
\par \{
\par \hich\af2\dbch\af31505\loch\f2     agent_ = agent;
\par \hich\af2\dbch\af31505\loch\f2     tuple_ = NULL;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_Timer::~OLSR_Timer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     removeTimer();
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_Timer::OLSR_Timer() : cOwnedObject("OLSR_Timer")
\par \{
\par \hich\af2\dbch\af31505\loch\f2     agent_ = dynamic_cast <OLSR*> (this->getOwner());
\par \hich\af2\dbch\af31505\loch\f2     if (agent_==NULL)
\par \hich\af2\dbch\af31505\loch\f2         opp_error("timer ower is bad");
\par \hich\af2\dbch\af31505\loch\f2     tuple_ = NULL;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void OLSR_Timer::removeQueueTimer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     TimerQueue::iterator\hich\af2\dbch\af31505\loch\f2  it;
\par \hich\af2\dbch\af31505\loch\f2     for (it=agent_->timerQueuePtr->begin(); it != agent_->timerQueuePtr->end(); it++ )
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (it->second==this)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             agent_->timerQueuePtr->erase(it);
\par \hich\af2\dbch\af31505\loch\f2             return;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void OLSR_Timer::resched(double time)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     removeQueueTimer();
\par \hich\af2\dbch\af31505\loch\f2     agent_->timerQueuePtr->insert(std::pair<simtime_t, OLSR_Timer *>(simTime()+time, this));
\par \hich\af2\dbch\af31505\loch\f2     //if (this->isScheduled())
\par \hich\af2\dbch\af31505\loch\f2     //  agent_->cancelEvent(this);
\par \hich\af2\dbch\af31505\loch\f2     // agent_->scheduleAt (simTim\hich\af2\dbch\af31505\loch\f2 e()+time,this);
\par \}
\par 
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid5597523 \hich\af2\dbch\af31505\loch\f2 /*\hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2 Nodes sends the hello message to \hich\af2\dbch\af31505\loch\f2 neighboring\hich\af2\dbch\af31505\loch\f2 
 nodes\hich\af2\dbch\af31505\loch\f2  after some interval.\hich\af2\dbch\af31505\loch\f2  If node doesn\loch\af2\dbch\af31505\hich\f2 \rquote \hich\af2\dbch\af31505\loch\f2 t receive the update from \hich\af2\dbch\af31505\loch\f2 neighboring
\hich\af2\dbch\af31505\loch\f2  node then it informs to \hich\af2\dbch\af31505\loch\f2 neighboring\hich\af2\dbch\af31505\loch\f2  nodes\hich\af2\dbch\af31505\loch\f2 . \hich\af2\dbch\af31505\loch\f2 */}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid10751145 

\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid5597523 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid5597523 \hich\af2\dbch\af31505\loch\f2 V}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 oid}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid5597523 
\hich\af2\dbch\af31505\loch\f2  }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 OLSR_HelloTimer::expire()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     agent_->send_hello();
\par \hich\af2\dbch\af31505\loch\f2     // agent_->scheduleAt(simTime()+agent\hich\af2\dbch\af31505\loch\f2 _->hello_ival_- JITTER,this);
\par \hich\af2\dbch\af31505\loch\f2     agent_->timerQueuePtr->insert(std::pair<simtime_t, OLSR_Timer *>(simTime() + agent_->hello_ival() - agent_->jitter(), this));
\par \}
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 brief Sends a TC message (if there exists any MPR selector) and reschedules the TC timer.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param e The event which has expired.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR_TcTimer::expire()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (agent_->mprselset().size() > 0)
\par \hich\af2\dbch\af31505\loch\f2         agent_->send_tc();
\par \hich\af2\dbch\af31505\loch\f2     // agent_->schedule\hich\af2\dbch\af31505\loch\f2 At(simTime()+agent_->tc_ival_- JITTER,this);
\par \hich\af2\dbch\af31505\loch\f2     agent_->timerQueuePtr->insert(std::pair<simtime_t, OLSR_Timer *>(simTime() + agent_->tc_ival() - agent_->jitter(), this));
\par 
\par \}
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid13572568 \hich\af2\dbch\af31505\loch\f2 // \hich\af2\dbch\af31505\loch\f2 The case with \hich\af2\dbch\af31505\loch\f2 nod\hich\af2\dbch\af31505\loch\f2 e\hich\af2\dbch\af31505\loch\f2 s which
\hich\af2\dbch\af31505\loch\f2  have \hich\af2\dbch\af31505\loch\f2 multiple interfa\hich\af2\dbch\af31505\loch\f2 ces\hich\af2\dbch\af31505\loch\f2  is handled here. B\hich\af2\dbch\af31505\loch\f2 ut \hich\af2\dbch\af31505\loch\f2 // 
\hich\af2\dbch\af31505\loch\f2 in our scenario we assume that \hich\af2\dbch\af31505\loch\f2 node have single interface. 
\par 
\par \hich\af2\dbch\af31505\loch\f2 V}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 oid}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid13572568 \hich\af2\dbch\af31505\loch\f2  }{\rtlch\fcs1 \af2 \ltrch\fcs0 
\f2\cf17\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 OLSR_MidTimer::expire()
\par \{
\par \hich\af2\dbch\af31505\loch\f2 #ifdef MULTIPLE_IFACES_SUPPORT
\par \hich\af2\dbch\af31505\loch\f2     if (agent_->isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2        return; // not multi-interface support
\par \hich\af2\dbch\af31505\loch\f2     agent_->send_mid();
\par \hich\af2\dbch\af31505\loch\f2 //  agent_->scheduleAt(simTime()+agent_->mid_ival_- JITTER,this);
\par \hich\af2\dbch\af31505\loch\f2     agent_->timerQueuePtr->insert(std::pair<simtime_t, OLSR_Timer *>(simTime() + agent_->mid_ival() - agent_->jitter(), \hich\af2\dbch\af31505\loch\f2 this));
\par \hich\af2\dbch\af31505\loch\f2 #endif
\par \}
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid10751145 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes tuple_ if expired. Else timer is rescheduled to expire at tuple_->time().
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// The task of actually removing the tuple is left to the OLSR agent.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param e The event which has expired.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR_DupTupleTimer::expire()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_dup_tuple* tuple = dynamic_cast<OLSR_dup_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     double time = tuple->time();
\par \hich\af2\dbch\af31505\loch\f2     if (time < SIMTIME_DBL(simTime()))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         removeTimer();
\par \hich\af2\dbch\af31505\loch\f2         delete this;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         // age\hich\af2\dbch\af31505\loch\f2 nt_->scheduleAt (simTime()+DELAY_T(time),this);
\par \hich\af2\dbch\af31505\loch\f2         agent_->timerQueuePtr->insert(std::pair<simtime_t, OLSR_Timer *>(simTime()+DELAY_T(time), this));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_DupTupleTimer::~OLSR_DupTupleTimer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     removeTimer();
\par \hich\af2\dbch\af31505\loch\f2     if (!tuple_)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_dup_tuple* tuple = dynamic_cast<OLSR_dup_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     tuple->asocTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2     if (agent_->state_ptr==NULL)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     agent_->rm_dup_tuple(tuple);
\par \hich\af2\dbch\af31505\loch\f2     delete tuple_;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes tuple_ if expire\hich\af2\dbch\af31505\loch\f2 d. Else if symmetric time
\par \hich\af2\dbch\af31505\loch\f2 /// has expired then it is assumed a neighbor loss and agent_->nb_loss()
\par \hich\af2\dbch\af31505\loch\f2 /// is called. In this case the timer is rescheduled to expire at
\par \hich\af2\dbch\af31505\loch\f2 /// tuple_->time(). Otherwise the timer is rescheduled to expire at
\par \hich\af2\dbch\af31505\loch\f2 /// the minimum between\hich\af2\dbch\af31505\loch\f2  tuple_->time() and tuple_->sym_time().
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// The task of actually removing the tuple is left to the OLSR agent.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param e The event which has expired.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_LinkTupleTimer::OLSR_LinkTupleTimer(OLSR* agent, OLSR_link_tuple* tuple) : OLSR_Timer\hich\af2\dbch\af31505\loch\f2 (agent)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     tuple_ = tuple;
\par \hich\af2\dbch\af31505\loch\f2     tuple->asocTimer = this;
\par \hich\af2\dbch\af31505\loch\f2     first_time_ = true;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR_LinkTupleTimer::expire()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     double now;
\par \hich\af2\dbch\af31505\loch\f2     now = SIMTIME_DBL(simTime());
\par \hich\af2\dbch\af31505\loch\f2     OLSR_link_tuple* tuple = dynamic_cast<OLSR_link_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     if (tuple->time() < now)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         removeTimer();
\par \hich\af2\dbch\af31505\loch\f2         delete this;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else if (tuple->sym_time() < now)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (first_time_)
\par \hich\af2\dbch\af31505\loch\f2             first_time_ = false;
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2             agent_->nb_loss(tuple);
\par \hich\af2\dbch\af31505\loch\f2         // agent_->s\hich\af2\dbch\af31505\loch\f2 cheduleAt (simTime()+DELAY_T(tuple_->time()),this);
\par \hich\af2\dbch\af31505\loch\f2         agent_->timerQueuePtr->insert(std::pair<simtime_t, OLSR_Timer *>(simTime()+DELAY_T(tuple->time()), this));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         // agent_->scheduleAt (simTime()+DELAY_T(MIN(tuple_->time(),\hich\af2\dbch\af31505\loch\f2  tuple_->sym_time())),this);
\par \hich\af2\dbch\af31505\loch\f2         agent_->timerQueuePtr->insert(std::pair<simtime_t, OLSR_Timer *>(simTime()+DELAY_T(MIN(tuple->time(), tuple->sym_time())), this));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_LinkTupleTimer::~OLSR_LinkTupleTimer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     removeTimer();
\par \hich\af2\dbch\af31505\loch\f2     if (!tuple_)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_link_tuple* tuple = dynamic_cast<OLSR_link_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     tuple->asocTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2     if (agent_->state_ptr==NULL)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     agent_->rm_link_tuple(tuple);
\par \hich\af2\dbch\af31505\loch\f2     agent_->setTopologyChanged(true);
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2  delete tuple_;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes tuple_ if expired. Else the timer is rescheduled to expire at tuple_->time().
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// The task of actually removing the tuple is left to the OLSR agent.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param e The event which has expired.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par 
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR_\hich\af2\dbch\af31505\loch\f2 Nb2hopTupleTimer::expire()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_nb2hop_tuple* tuple = dynamic_cast<OLSR_nb2hop_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     double time = tuple->time();
\par \hich\af2\dbch\af31505\loch\f2     if (time < SIMTIME_DBL(simTime()))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         removeTimer();
\par \hich\af2\dbch\af31505\loch\f2         delete this;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         // agent_->scheduleAt (simTime()+DELAY_T(time),this);
\par \hich\af2\dbch\af31505\loch\f2         agent_->timerQueuePtr->insert(std::pair<simtime_t, OLSR_Timer *>(simTime()+DELAY_T(time), this));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_Nb2hopTupleTimer::~OLSR_Nb2hopTupleTimer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     removeTimer();
\par \hich\af2\dbch\af31505\loch\f2     if (!t\hich\af2\dbch\af31505\loch\f2 uple_)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_nb2hop_tuple* tuple = dynamic_cast<OLSR_nb2hop_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     tuple->asocTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2     if (agent_->state_ptr==NULL)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     agent_->rm_nb2hop_tuple(tuple);
\par \hich\af2\dbch\af31505\loch\f2     agent_->setTopologyChanged(true);
\par \hich\af2\dbch\af31505\loch\f2     del\hich\af2\dbch\af31505\loch\f2 ete tuple_;
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes tuple_ if expired. Else the timer is rescheduled to expire at tuple_->time().
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// The task of actually removing the tuple is left to the OLSR agent.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param e The event which has expired.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR_MprSelTupleTimer::expire()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_mprsel_tuple* tuple = dynamic_cast<OLSR_mprsel_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     double time = tuple->time();
\par \hich\af2\dbch\af31505\loch\f2     if (time < SIMTIME_DBL(simTime()))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         removeTimer();
\par \hich\af2\dbch\af31505\loch\f2         delete this;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2 //   \hich\af2\dbch\af31505\loch\f2    agent_->scheduleAt (simTime()+DELAY_T(time),this);
\par \hich\af2\dbch\af31505\loch\f2         agent_->timerQueuePtr->insert(std::pair<simtime_t, OLSR_Timer *>(simTime()+DELAY_T(time), this));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_MprSelTupleTimer::~OLSR_MprSelTupleTimer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     removeTimer();
\par \hich\af2\dbch\af31505\loch\f2     if (!tuple_)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_mprsel_tuple* tuple = dynamic_cast<OLSR_mprsel_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     tuple->asocTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2     if (agent_->state_ptr==NULL)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     agent_->rm_mprsel_tuple(tuple);
\par \hich\af2\dbch\af31505\loch\f2     delete tuple_;
\par \}
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes tuple\hich\af2\dbch\af31505\loch\f2 _ if expired. Else the timer is rescheduled to expire at tuple_->time().
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// The task of actually removing the tuple is left to the OLSR agent.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param e The event which has expired.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par 
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR_TopologyTupleTimer::expire()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_topolog\hich\af2\dbch\af31505\loch\f2 y_tuple* tuple = dynamic_cast<OLSR_topology_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     double time = tuple->time();
\par \hich\af2\dbch\af31505\loch\f2     if (time < SIMTIME_DBL(simTime()))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         removeTimer();
\par \hich\af2\dbch\af31505\loch\f2         delete this;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2 //      agent_->scheduleAt (simTime()+DELAY_T(time),this);
\par \hich\af2\dbch\af31505\loch\f2         agent_->timerQueuePtr->insert(std::pair<simtime_t, OLSR_Timer *>(simTime()+DELAY_T(time), this));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_TopologyTupleTimer::~OLSR_TopologyTupleTimer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     removeTimer();
\par \hich\af2\dbch\af31505\loch\f2     if (!\hich\af2\dbch\af31505\loch\f2 tuple_)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_topology_tuple* tuple = dynamic_cast<OLSR_topology_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     tuple->asocTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2     if (agent_->state_ptr==NULL)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     agent_->rm_topology_tuple(tuple);
\par \hich\af2\dbch\af31505\loch\f2     agent_->setTopologyChanged(true);
\par \hich\af2\dbch\af31505\loch\f2     delete tuple_;
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes tuple_ if expired. Else timer is rescheduled to expire at tuple_->time().
\par \hich\af2\dbch\af31505\loch\f2 /// \\warning Actually this is never invoked because there is no support for multiple interfaces.
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 param e The event which has expired.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par 
\par \hich\af2\dbch\af31505\loch\f2 void OLSR_IfaceAssocTupleTimer::expire()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_iface_assoc_tuple* tuple = dynamic_cast<OLSR_iface_assoc_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     double time = tuple->time();
\par \hich\af2\dbch\af31505\loch\f2     if (time < SIMTIME_DBL(simTime()))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         r\hich\af2\dbch\af31505\loch\f2 emoveTimer();
\par \hich\af2\dbch\af31505\loch\f2         delete this;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         //  agent_->scheduleAt (simTime()+DELAY_T(time),this);
\par \hich\af2\dbch\af31505\loch\f2         agent_->timerQueuePtr->insert(std::pair<simtime_t, OLSR_Timer *>(simTime()+DELAY_T(time), this));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_IfaceAssocTupleTi\hich\af2\dbch\af31505\loch\f2 mer::~OLSR_IfaceAssocTupleTimer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     removeTimer();
\par \hich\af2\dbch\af31505\loch\f2     if (!tuple_)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_iface_assoc_tuple* tuple = dynamic_cast<OLSR_iface_assoc_tuple*> (tuple_);
\par \hich\af2\dbch\af31505\loch\f2     tuple->asocTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2     if (agent_->state_ptr==NULL)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     agent_->rm_ifaceassoc_tuple(tuple);
\par \hich\af2\dbch\af31505\loch\f2     agent_->setTopologyChanged(true);
\par \hich\af2\dbch\af31505\loch\f2     delete tuple_;
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Sends a control packet which must bear every message in the OLSR agent's buffer.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// The task of actually sending the packet is left to \hich\af2\dbch\af31505\loch\f2 the OLSR agent.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param e The event which has expired.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR_MsgTimer::expire()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     agent_->send_pkt();
\par \hich\af2\dbch\af31505\loch\f2     removeTimer();
\par \hich\af2\dbch\af31505\loch\f2     delete this;
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 /********** OLSR class **********/
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void OLSR::initialize(int stage)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     ManetRoutingBase::initialize(stage);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (stage == 4)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par 
\par \hich\af2\dbch\af31505\loch\f2        if (isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2            this->setAddressSize(6);
\par 
\par \hich\af2\dbch\af31505\loch\f2        OlsrAddressSize::ADDR_SIZE = this->getAddressSize();
\par \tab \hich\af2\dbch\af31505\loch\f2 ///
\par \tab \hich\af2\dbch\af31505\loch\f2 /// \\brief Period at which a node must cite every link an\hich\af2\dbch\af31505\loch\f2 d every neighbor.
\par \tab \hich\af2\dbch\af31505\loch\f2 ///
\par \tab \hich\af2\dbch\af31505\loch\f2 /// We only use this value in order to define OLSR_NEIGHB_HOLD_TIME.
\par \tab \hich\af2\dbch\af31505\loch\f2 ///
\par \tab \hich\af2\dbch\af31505\loch\f2     OLSR_REFRESH_INTERVAL=par("OLSR_REFRESH_INTERVAL");
\par 
\par \hich\af2\dbch\af31505\loch\f2         //
\par \hich\af2\dbch\af31505\loch\f2         // Do some initializations
\par \hich\af2\dbch\af31505\loch\f2         willingness_ = &par("Willingness");
\par \hich\af2\dbch\af31505\loch\f2         he\hich\af2\dbch\af31505\loch\f2 llo_ival_ = &par("Hello_ival");
\par \hich\af2\dbch\af31505\loch\f2         tc_ival_ = &par("Tc_ival");
\par \hich\af2\dbch\af31505\loch\f2         mid_ival_ = &par("Mid_ival");
\par \hich\af2\dbch\af31505\loch\f2         use_mac_ = par("use_mac");
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (par("reduceFuncionality"))
\par \hich\af2\dbch\af31505\loch\f2             EV << "reduceFuncionality true" << endl;
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2             EV << "reduceFuncionality false" << endl;
\par 
\par \hich\af2\dbch\af31505\loch\f2         pkt_seq_ = OLSR_MAX_SEQ_NUM;
\par \hich\af2\dbch\af31505\loch\f2         msg_seq_ = OLSR_MAX_SEQ_NUM;
\par \hich\af2\dbch\af31505\loch\f2         ansn_ = OLSR_MAX_SEQ_NUM;
\par 
\par \hich\af2\dbch\af31505\loch\f2         registerRoutingModule();
\par \hich\af2\dbch\af31505\loch\f2         ra_addr_ = getAddress();
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2         timerMessage = n\hich\af2\dbch\af31505\loch\f2 ew cMessage();
\par \hich\af2\dbch\af31505\loch\f2         timerQueuePtr = new TimerQueue;
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2         useIndex = par("UseIndex");
\par 
\par \hich\af2\dbch\af31505\loch\f2         optimizedMid = par("optimizedMid");
\par 
\par \hich\af2\dbch\af31505\loch\f2         // Starts all timers
\par 
\par \hich\af2\dbch\af31505\loch\f2         helloTimer = new OLSR_HelloTimer(); ///< Timer for sending HELLO messages.
\par \hich\af2\dbch\af31505\loch\f2     \hich\af2\dbch\af31505\loch\f2     tcTimer = new OLSR_TcTimer();   ///< Timer for sending TC messages.
\par \hich\af2\dbch\af31505\loch\f2         midTimer = new OLSR_MidTimer(); ///< Timer for sending MID messages.
\par 
\par \hich\af2\dbch\af31505\loch\f2         state_ptr = new OLSR_state();
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2         for (int i = 0; i< getNumWlanInterfaces(); i++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             // Create never expiring interface association tuple entries for our
\par \hich\af2\dbch\af31505\loch\f2             // own network interfaces, so that GetMainAddress () works to
\par \hich\af2\dbch\af31505\loch\f2             // translate the node's own interface addresses into the main address.
\par \hich\af2\dbch\af31505\loch\f2             OLSR_i\hich\af2\dbch\af31505\loch\f2 face_assoc_tuple* tuple = new OLSR_iface_assoc_tuple;
\par \hich\af2\dbch\af31505\loch\f2             int index = getWlanInterfaceIndex(i);
\par \hich\af2\dbch\af31505\loch\f2             tuple->iface_addr() = getIfaceAddressFromIndex(index);
\par \hich\af2\dbch\af31505\loch\f2             tuple->main_addr() = ra_addr();
\par \hich\af2\dbch\af31505\loch\f2             tuple->time() = simtime_t::ge\hich\af2\dbch\af31505\loch\f2 tMaxTime().dbl();
\par \hich\af2\dbch\af31505\loch\f2             tuple->local_iface_index() = index;
\par \hich\af2\dbch\af31505\loch\f2             add_ifaceassoc_tuple(tuple);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2         hello_timer_.resched(hello_ival());
\par \hich\af2\dbch\af31505\loch\f2         tc_timer_.resched(hello_ival());
\par \hich\af2\dbch\af31505\loch\f2         mid_timer_.resched(hello_ival());
\par \hich\af2\dbch\af31505\loch\f2         if\hich\af2\dbch\af31505\loch\f2  (use_mac())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             linkLayerFeeback();
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par 
\par \hich\af2\dbch\af31505\loch\f2         globalRtable[ra_addr()] = &rtable_;
\par \hich\af2\dbch\af31505\loch\f2         computed = false;
\par 
\par \hich\af2\dbch\af31505\loch\f2         WATCH_PTRMAP(rtable_.rt_);
\par 
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 brief  This function is called whenever a event  is received. It identifies
\par \hich\af2\dbch\af31505\loch\f2 ///     the type of the received event and process it accordingly.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// If it is an %OLSR packet then it is processed. In other case, if it is a data packet
\par \hich\af2\dbch\af31505\loch\f2 /// then it is forwa\hich\af2\dbch\af31505\loch\f2 rded.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param  p the received packet.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param  h a handler (not used).
\par \hich\af2\dbch\af31505\loch\f2 ///
\par 
\par \hich\af2\dbch\af31505\loch\f2 void OLSR::handleMessage(cMessage *msg)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (!isNodeOperational())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete msg;
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     if (msg->isSelfMessage())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         //OLSR_Timer *timer=dynamic_cast<OLSR_Timer*>(msg);
\par \hich\af2\dbch\af31505\loch\f2         while (timerQueuePtr->begin()->first<=simTime())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_Timer *timer = timerQueuePtr->begin()->second;
\par \hich\af2\dbch\af31505\loch\f2             if (timer==NULL)
\par \hich\af2\dbch\af31505\loch\f2                 opp_error("timer owe\hich\af2\dbch\af31505\loch\f2 r is bad");
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 timerQueuePtr->erase(timerQueuePtr->begin());
\par \hich\af2\dbch\af31505\loch\f2                 timer->expire();
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         recv_olsr(msg);
\par 
\par \hich\af2\dbch\af31505\loch\f2     scheduleNextEvent();
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Check if pa\hich\af2\dbch\af31505\loch\f2 cket is OLSR
\par \hich\af2\dbch\af31505\loch\f2 /// \\param p received packet.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_pkt *
\par \hich\af2\dbch\af31505\loch\f2 OLSR::check_packet(cPacket* msg, nsaddr_t &src_addr, int &index)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     cPacket *msg_aux = NULL;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_pkt *op;
\par \hich\af2\dbch\af31505\loch\f2     index = getWlanInterfaceIndex(0);
\par \hich\af2\dbch\af31505\loch\f2     if (isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (!dynamic_cast<OLSR_pkt  *>(msg)) // Check if olsr packet
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             delete  msg;
\par \hich\af2\dbch\af31505\loch\f2             return NULL;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             op = check_and_cast<OLSR_pkt  *>(msg);
\par \hich\af2\dbch\af31505\loch\f2             if (op->reduceFuncionality() &&\hich\af2\dbch\af31505\loch\f2  par("reduceFuncionality").boolValue())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 delete msg;
\par \hich\af2\dbch\af31505\loch\f2                 return NULL;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             Ieee802Ctrl* ctrl = check_and_cast<Ieee802Ctrl*>(msg->removeControlInfo());
\par \hich\af2\dbch\af31505\loch\f2             src_addr = ManetAddress(ctrl->g\hich\af2\dbch\af31505\loch\f2 etSrc());
\par \hich\af2\dbch\af31505\loch\f2             delete ctrl;
\par \hich\af2\dbch\af31505\loch\f2             return dynamic_cast<OLSR_pkt  *>(msg);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (dynamic_cast<UDPPacket *>(msg)) // Check is Udp packet
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         UDPPacket * udpPacket = check_and_cast<UDPPacket*>(msg);
\par \hich\af2\dbch\af31505\loch\f2         if (udpPacket->getDestinationPort() != RT_PORT) // Check port
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             delete  msg;
\par \hich\af2\dbch\af31505\loch\f2             return NULL;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         msg_aux = msg->decapsulate();
\par \hich\af2\dbch\af31505\loch\f2         if (!dynamic_cast<OLSR_pkt  *>(msg_aux)) // Check if olsr packet
\par \hich\af2\dbch\af31505\loch\f2      \hich\af2\dbch\af31505\loch\f2    \{
\par \hich\af2\dbch\af31505\loch\f2             delete  msg;
\par \hich\af2\dbch\af31505\loch\f2             delete msg_aux;
\par \hich\af2\dbch\af31505\loch\f2             return NULL;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete msg;
\par \hich\af2\dbch\af31505\loch\f2         return NULL;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2 // Extract information and delete the cantainer without more use
\par \hich\af2\dbch\af31505\loch\f2     op = check_and_cast<OLSR_\hich\af2\dbch\af31505\loch\f2 pkt  *>(msg_aux);
\par \hich\af2\dbch\af31505\loch\f2     if (op->reduceFuncionality() && par("reduceFuncionality"))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete msg;
\par \hich\af2\dbch\af31505\loch\f2         delete op;
\par \hich\af2\dbch\af31505\loch\f2         return NULL;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     IPv4ControlInfo* controlInfo = check_and_cast<IPv4ControlInfo*>(msg->removeControlInfo());
\par \hich\af2\dbch\af31505\loch\f2     src_addr = ManetAddress(controlInfo->getSrcAddr());
\par \hich\af2\dbch\af31505\loch\f2     index = -1;
\par \hich\af2\dbch\af31505\loch\f2     InterfaceEntry * ie;
\par 
\par \hich\af2\dbch\af31505\loch\f2     for (int i=0; i<getNumWlanInterfaces(); i++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         ie = getWlanInterfaceEntry(i);
\par \hich\af2\dbch\af31505\loch\f2         if (ie->getInterfaceId() == controlInfo->getInterfaceId(\hich\af2\dbch\af31505\loch\f2 ))
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             index = getWlanInterfaceIndex(i);
\par \hich\af2\dbch\af31505\loch\f2             break;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     delete controlInfo;
\par \hich\af2\dbch\af31505\loch\f2     delete msg;
\par \hich\af2\dbch\af31505\loch\f2     return op;
\par \}
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Processes an incoming %OLSR packet following RFC 3626 specification.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param p receive\hich\af2\dbch\af31505\loch\f2 d packet.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::recv_olsr(cMessage* msg)
\par \{
\par 
\par \hich\af2\dbch\af31505\loch\f2     OLSR_pkt* op;
\par \hich\af2\dbch\af31505\loch\f2     nsaddr_t src_addr;
\par \hich\af2\dbch\af31505\loch\f2     int index;
\par 
\par \hich\af2\dbch\af31505\loch\f2     // All routing messages are sent from and to port RT_PORT,
\par \hich\af2\dbch\af31505\loch\f2     // so we check it.
\par 
\par \hich\af2\dbch\af31505\loch\f2     op = check_packet(PK(msg), src_addr, index);
\par \hich\af2\dbch\af31505\loch\f2     if (op==NULL)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par 
\par \hich\af2\dbch\af31505\loch\f2     // If the packet contains no messages must be silently discarded.
\par \hich\af2\dbch\af31505\loch\f2     // There could exist a message with an empty body, so the size of
\par \hich\af2\dbch\af31505\loch\f2     // the packet would be pkt-hdr-size + msg-hdr-size.
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (op->getByteLengt\hich\af2\dbch\af31505\loch\f2 h() < OLSR_PKT_HDR_SIZE + OLSR_MSG_HDR_SIZE)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete op;
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 // Process Olsr information
\par \hich\af2\dbch\af31505\loch\f2     assert(op->msgArraySize() >= 0 && op->msgArraySize() <= OLSR_MAX_MSGS);
\par \hich\af2\dbch\af31505\loch\f2     nsaddr_t receiverIfaceAddr = getIfaceAddressFromIndex(i\hich\af2\dbch\af31505\loch\f2 ndex);
\par \hich\af2\dbch\af31505\loch\f2     for (int i = 0; i < (int) op->msgArraySize(); i++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_msg& msg = op->msg(i);
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13572568 \hich\af2\dbch\af31505\loch\f2  }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 // If ttl is less than or equal to zero, or}{\rtlch\fcs1 \af2 \ltrch\fcs0 
\f2\cf17\insrsid13572568 \hich\af2\dbch\af31505\loch\f2  }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 the receiver is the same as }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid13572568 
\hich\af2\dbch\af31505\loch\f2 // }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 the originator,\hich\af2\dbch\af31505\loch\f2 the m}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid13572568 
\hich\af2\dbch\af31505\loch\f2 essage must be silently dropped if (msg.ttl()}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 <= 0 }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid13572568 \hich\af2\dbch\af31505\loch\f2 
// }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 || msg.orig_addr() == ra_addr())
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid13572568 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid10751145 \hich\af2\dbch\af31505\loch\f2         if (msg.ttl() <= 0 || isLocalAddress(msg.orig_addr()))
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par 
\par \hich\af2\dbch\af31505\loch\f2         // If the message has been processed it must not be
\par \hich\af2\dbch\af31505\loch\f2         // processed again
\par \hich\af2\dbch\af31505\loch\f2         bool do_forwarding = true;
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid10751145 
\par \hich\af2\dbch\af31505\loch\f2         OLSR_dup_tuple* duplicated = state_.find_dup_tuple(msg.orig_addr(), msg.msg_seq_num());
\par \hich\af2\dbch\af31505\loch\f2         if (duplicated == NULL)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             // Process the message according to its ty\hich\af2\dbch\af31505\loch\f2 pe
\par \hich\af2\dbch\af31505\loch\f2             if (msg.msg_type() == OLSR_HELLO_MSG)
\par \hich\af2\dbch\af31505\loch\f2                 process_hello(msg, receiverIfaceAddr, src_addr, index);
\par \hich\af2\dbch\af31505\loch\f2             else if (msg.msg_type() == OLSR_TC_MSG)
\par \hich\af2\dbch\af31505\loch\f2                 process_tc(msg, src_addr, index);
\par \hich\af2\dbch\af31505\loch\f2             else if (msg.msg_\hich\af2\dbch\af31505\loch\f2 type() == OLSR_MID_MSG)
\par \hich\af2\dbch\af31505\loch\f2                 process_mid(msg, src_addr, index);
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 debug("%f: Node %s can not process OLSR packet because does not "
\par \hich\af2\dbch\af31505\loch\f2                       "implement OLSR type (%x)\\n",
\par \hich\af2\dbch\af31505\loch\f2                 \hich\af2\dbch\af31505\loch\f2       CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2                       getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2                       msg.msg_type());
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             // If the message has been considered for forwarding, it should
\par \hich\af2\dbch\af31505\loch\f2             // not be retransmitted again
\par \hich\af2\dbch\af31505\loch\f2             for (addr_list_t::iterator it = duplicated->iface_list().begin();
\par \hich\af2\dbch\af31505\loch\f2                     it != duplicated->iface_list().end();
\par \hich\af2\dbch\af31505\loch\f2                     it++)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 if (*it == receiverIfa\hich\af2\dbch\af31505\loch\f2 ceAddr)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     do_forwarding = false;
\par \hich\af2\dbch\af31505\loch\f2                     break;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (do_forwarding)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             // HELLO messages are never forwarded.
\par \hich\af2\dbch\af31505\loch\f2             // TC and MID mes\hich\af2\dbch\af31505\loch\f2 sages are forwarded using the default algorithm.
\par \hich\af2\dbch\af31505\loch\f2             // Remaining messages are also forwarded using the default algorithm.
\par \hich\af2\dbch\af31505\loch\f2             if (msg.msg_type() != OLSR_HELLO_MSG)
\par \hich\af2\dbch\af31505\loch\f2                 forward_default(msg, duplicated, receiverIfaceAddr, src_add\hich\af2\dbch\af31505\loch\f2 r);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     delete op;
\par 
\par \hich\af2\dbch\af31505\loch\f2     // After processing all OLSR messages, we must recompute routing table
\par \hich\af2\dbch\af31505\loch\f2     rtable_computation();
\par \}
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid13572568 \hich\af2\dbch\af31505\loch\f2 // Nod\hich\af2\dbch\af31505\loch\f2 e with two hope \hich\af2\dbch\af31505\loch\f2 neighbors\hich\af2\dbch\af31505\loch\f2  are handled here. 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid10751145 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid10751145 \hich\af2\dbch\af31505\loch\f2 void OLSR::CoverTwoHopNeighbors(const nsaddr_t &neighborMainAddr, nb2hopset_t & N2)
\par \{\hich\af2\dbch\af31505\loch\f2  // first gather all 2-hop neighbors to be removed
\par \hich\af2\dbch\af31505\loch\f2     std::set<nsaddr_t> toRemove;
\par \hich\af2\dbch\af31505\loch\f2     for (nb2hopset_t::iterator it = N2.begin(); it != N2.end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb2hop_tuple* twoHopNeigh = *it;
\par \hich\af2\dbch\af31505\loch\f2         if (twoHopNeigh->nb_main_addr() == neighbo\hich\af2\dbch\af31505\loch\f2 rMainAddr)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             toRemove.insert(twoHopNeigh->nb2hop_addr());
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     // Now remove all matching records from N2
\par \hich\af2\dbch\af31505\loch\f2     for (nb2hopset_t::iterator it = N2.begin(); it != N2.end();)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb2hop_tuple* twoHopNeigh = *it\hich\af2\dbch\af31505\loch\f2 ;
\par \hich\af2\dbch\af31505\loch\f2         if (toRemove.find(twoHopNeigh->nb2hop_addr()) != toRemove.end())
\par \hich\af2\dbch\af31505\loch\f2             it = N2.erase(it);
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2             it++;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid10751145 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Computates MPR set of a node following RFC 3626 hints.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 #if 0
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::mpr_computation()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     // MPR computation should be done for each interface. See section 8.3.1
\par \hich\af2\dbch\af31505\loch\f2     // (RFC 3626) for details.
\par \hich\af2\dbch\af31505\loch\f2     bool increment;
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.clear_mprset();
\par 
\par \hich\af2\dbch\af31505\loch\f2     nbset_t N; nb2hopset_t N2;
\par \hich\af2\dbch\af31505\loch\f2     // N is the subset of neighbors of the node, which are
\par \hich\af2\dbch\af31505\loch\f2     // ne\hich\af2\dbch\af31505\loch\f2 ighbor "of the interface I"
\par \hich\af2\dbch\af31505\loch\f2     for (nbset_t::iterator it = nbset().begin(); it != nbset().end(); it++)
\par \hich\af2\dbch\af31505\loch\f2         if ((*it)->getStatus() == OLSR_STATUS_SYM) // I think that we need this check
\par \hich\af2\dbch\af31505\loch\f2             N.push_back(*it);
\par 
\par \hich\af2\dbch\af31505\loch\f2     // N2 is the set of 2-hop neigh\hich\af2\dbch\af31505\loch\f2 bors reachable from "the interface
\par \hich\af2\dbch\af31505\loch\f2     // I", excluding:
\par \hich\af2\dbch\af31505\loch\f2     // (i)   the nodes only reachable by members of N with willingness WILL_NEVER
\par \hich\af2\dbch\af31505\loch\f2     // (ii)  the node performing the computation
\par \hich\af2\dbch\af31505\loch\f2     // (iii) all the symmetric neighbors: the nodes for which there \hich\af2\dbch\af31505\loch\f2 exists a symmetric
\par \hich\af2\dbch\af31505\loch\f2     //       link to this node on some interface.
\par \hich\af2\dbch\af31505\loch\f2     for (nb2hopset_t::iterator it = nb2hopset().begin(); it != nb2hopset().end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb2hop_tuple* nb2hop_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2         bool ok = true;
\par 
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb_tuple* nb_tuple = state_.find_sym_nb_tuple(nb2hop_tuple->nb_main_addr());
\par \hich\af2\dbch\af31505\loch\f2         if (nb_tuple == NULL)
\par \hich\af2\dbch\af31505\loch\f2             ok = false;
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             nb_tuple = state_.find_nb_tuple(nb2hop_tuple->nb_main_addr(), OLSR_WILL_NEVER\hich\af2\dbch\af31505\loch\f2 );
\par \hich\af2\dbch\af31505\loch\f2             if (nb_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2                 ok = false;
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 nb_tuple = state_.find_sym_nb_tuple(nb2hop_tuple->nb2hop_addr());
\par \hich\af2\dbch\af31505\loch\f2                 if (nb_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2                     ok = false;
\par \hich\af2\dbch\af31505\loch\f2         \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (ok)
\par \hich\af2\dbch\af31505\loch\f2             N2.push_back(nb2hop_tuple);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 1. Start with an MPR set made of all members of N with
\par \hich\af2\dbch\af31505\loch\f2     // N_willingness equal to WILL_ALWAYS
\par \hich\af2\dbch\af31505\loch\f2     for (nbset_t::iterator it = N.begin(); it != N.end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2   \hich\af2\dbch\af31505\loch\f2       OLSR_nb_tuple* nb_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2         if (nb_tuple->willingness() == OLSR_WILL_ALWAYS)
\par \hich\af2\dbch\af31505\loch\f2             state_.insert_mpr_addr(nb_tuple->nb_main_addr());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 2. Calculate D(y), where y is a member of N, for all nodes in N.
\par \hich\af2\dbch\af31505\loch\f2     // We will do this later.
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 3. Add to the MPR set those nodes in N, which are the *only*
\par \hich\af2\dbch\af31505\loch\f2     // nodes to provide reachability to a node in N2. Remove the
\par \hich\af2\dbch\af31505\loch\f2     // nodes from N2 which are now covered by a node in the MPR set.
\par \hich\af2\dbch\af31505\loch\f2     mprset_t foundset;
\par \hich\af2\dbch\af31505\loch\f2     std::set<nsaddr_t> deleted_addrs;
\par \hich\af2\dbch\af31505\loch\f2     for (nb2hopset_t::iterator it = N2.begin(); it != N2.end();)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         increment = true;
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb2hop_tuple* nb2hop_tuple1 = *it;
\par 
\par \hich\af2\dbch\af31505\loch\f2         mprset_t::iterator pos = foundset.find(nb2hop_tuple1->nb2hop_add\hich\af2\dbch\af31505\loch\f2 r());
\par \hich\af2\dbch\af31505\loch\f2         if (pos != foundset.end())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             it++;
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         bool found = false;
\par \hich\af2\dbch\af31505\loch\f2         for (nbset_t::iterator it2 = N.begin(); it2 != N.end(); it2++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if ((*it2)->nb_main_addr() == nb2\hich\af2\dbch\af31505\loch\f2 hop_tuple1->nb_main_addr())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 found = true;
\par \hich\af2\dbch\af31505\loch\f2                 break;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (!found)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             it++;
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         found = false;
\par 
\par \hich\af2\dbch\af31505\loch\f2         for (nb2hopset_t::iterator it2 = it + 1; it2 != N2.end(); it2++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_nb2hop_tuple* nb2hop_tuple2 = *it2;
\par \hich\af2\dbch\af31505\loch\f2             if (nb2hop_tuple1->nb2hop_addr() == nb2hop_tuple2->nb2hop_addr())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 foundset.ins\hich\af2\dbch\af31505\loch\f2 ert(nb2hop_tuple1->nb2hop_addr());
\par \hich\af2\dbch\af31505\loch\f2                 found = true;
\par \hich\af2\dbch\af31505\loch\f2                 break;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (!found)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             state_.insert_mpr_addr(nb2hop_tuple1->nb_main_addr());
\par 
\par \hich\af2\dbch\af31505\loch\f2             for (nb2hopset_t::iterator it2 = it + 1; it2 != N2.end();)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 OLSR_nb2hop_tuple* nb2hop_tuple2 = *it2;
\par \hich\af2\dbch\af31505\loch\f2                 if (nb2hop_tuple1->nb_main_addr() == nb2hop_tuple2->nb_main_addr())
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2             \hich\af2\dbch\af31505\loch\f2         deleted_addrs.insert(nb2hop_tuple2->nb2hop_addr());
\par \hich\af2\dbch\af31505\loch\f2                     it2 = N2.erase(it2);
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                 else
\par \hich\af2\dbch\af31505\loch\f2                     it2++;
\par 
\par \hich\af2\dbch\af31505\loch\f2             \}
\par 
\par \hich\af2\dbch\af31505\loch\f2             int distanceFromEnd = std::distance(it, N2.end());
\par \hich\af2\dbch\af31505\loch\f2           \hich\af2\dbch\af31505\loch\f2   int distance = std::distance(N2.begin(), it);
\par \hich\af2\dbch\af31505\loch\f2             int i = 0;
\par \hich\af2\dbch\af31505\loch\f2             for (nb2hopset_t::iterator it2 = N2.begin(); i < distance; i++) // check now the first section
\par \hich\af2\dbch\af31505\loch\f2             \{
\par 
\par \hich\af2\dbch\af31505\loch\f2                 OLSR_nb2hop_tuple* nb2hop_tuple2 = *it2;
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2           if (nb2hop_tuple1->nb_main_addr() == nb2hop_tuple2->nb_main_addr())
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     deleted_addrs.insert(nb2hop_tuple2->nb2hop_addr());
\par \hich\af2\dbch\af31505\loch\f2                     it2 = N2.erase(it2);
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                 else
\par \hich\af2\dbch\af31505\loch\f2         \hich\af2\dbch\af31505\loch\f2             it2++;
\par 
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             it = N2.end() - distanceFromEnd; // the standard doesn't guarantee that the iterator is valid if we have delete something in the vector, reload the iterator.
\par 
\par \hich\af2\dbch\af31505\loch\f2             it = N2.erase(it);
\par \hich\af2\dbch\af31505\loch\f2             increment = false;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         for (std::set<nsaddr_t>::iterator it2 = deleted_addrs.begin();
\par \hich\af2\dbch\af31505\loch\f2                 it2 != deleted_addrs.end();
\par \hich\af2\dbch\af31505\loch\f2                 it2++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             for (nb2hopset_t::iterator it3 = N2.begin();
\par \hich\af2\dbch\af31505\loch\f2          \hich\af2\dbch\af31505\loch\f2            it3 != N2.end();)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 if ((*it3)->nb2hop_addr() == *it2)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     it3 = N2.erase(it3);
\par \hich\af2\dbch\af31505\loch\f2                     // I have to reset the external iterator because it
\par \hich\af2\dbch\af31505\loch\f2                     // may have\hich\af2\dbch\af31505\loch\f2  been invalidated by the latter deletion
\par \hich\af2\dbch\af31505\loch\f2                     it = N2.begin();
\par \hich\af2\dbch\af31505\loch\f2                     increment = false;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                 else
\par \hich\af2\dbch\af31505\loch\f2                     it3++;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         deleted_addrs.clear();
\par \hich\af2\dbch\af31505\loch\f2         if (increm\hich\af2\dbch\af31505\loch\f2 ent)
\par \hich\af2\dbch\af31505\loch\f2             it++;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 4. While there exist nodes in N2 which are not covered by at
\par \hich\af2\dbch\af31505\loch\f2     // least one node in the MPR set:
\par \hich\af2\dbch\af31505\loch\f2     while (N2.begin() != N2.end())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         // 4.1. For each node in N, calculate the reachability, i.e., the
\par \hich\af2\dbch\af31505\loch\f2         // number of nodes in N2 which are not yet covered by at
\par \hich\af2\dbch\af31505\loch\f2         // least one node in the MPR set, and which are reachable
\par \hich\af2\dbch\af31505\loch\f2         // through this 1-hop neighbor
\par \hich\af2\dbch\af31505\loch\f2         std::map<int, std::vector<OLSR_nb_tuple*> > reachability;
\par \hich\af2\dbch\af31505\loch\f2         std::set<int\hich\af2\dbch\af31505\loch\f2 > rs;
\par \hich\af2\dbch\af31505\loch\f2         for (nbset_t::iterator it = N.begin(); it != N.end(); it++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_nb_tuple* nb_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2             int r = 0;
\par \hich\af2\dbch\af31505\loch\f2             for (nb2hopset_t::iterator it2 = N2.begin(); it2 != N2.end(); it2++)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2            \hich\af2\dbch\af31505\loch\f2      OLSR_nb2hop_tuple* nb2hop_tuple = *it2;
\par \hich\af2\dbch\af31505\loch\f2                 if (nb_tuple->nb_main_addr() == nb2hop_tuple->nb_main_addr())
\par \hich\af2\dbch\af31505\loch\f2                     r++;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             rs.insert(r);
\par \hich\af2\dbch\af31505\loch\f2             reachability[r].push_back(nb_tuple);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         \hich\af2\dbch\af31505\loch\f2 // 4.2. Select as a MPR the node with highest N_willingness among
\par \hich\af2\dbch\af31505\loch\f2         // the nodes in N with non-zero reachability. In case of
\par \hich\af2\dbch\af31505\loch\f2         // multiple choice select the node which provides
\par \hich\af2\dbch\af31505\loch\f2         // reachability to the maximum number of nodes in N2. In
\par \hich\af2\dbch\af31505\loch\f2         // case of multiple nodes providing the same amount of
\par \hich\af2\dbch\af31505\loch\f2         // reachability, select the node as MPR whose D(y) is
\par \hich\af2\dbch\af31505\loch\f2         // greater. Remove the nodes from N2 which are now covered
\par \hich\af2\dbch\af31505\loch\f2         // by a node in the MPR set.
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb_tuple* max \hich\af2\dbch\af31505\loch\f2 = NULL;
\par \hich\af2\dbch\af31505\loch\f2         int max_r = 0;
\par \hich\af2\dbch\af31505\loch\f2         for (std::set<int>::iterator it = rs.begin(); it != rs.end(); it++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             int r = *it;
\par \hich\af2\dbch\af31505\loch\f2             if (r > 0)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 for (std::vector<OLSR_nb_tuple*>::iterator it2 = reachability\hich\af2\dbch\af31505\loch\f2 [r].begin();
\par \hich\af2\dbch\af31505\loch\f2                         it2 != reachability[r].end();
\par \hich\af2\dbch\af31505\loch\f2                         it2++)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     OLSR_nb_tuple* nb_tuple = *it2;
\par \hich\af2\dbch\af31505\loch\f2                     if (max == NULL || nb_tuple->willingness() > max->willingness())
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2                  \{
\par \hich\af2\dbch\af31505\loch\f2                         max = nb_tuple;
\par \hich\af2\dbch\af31505\loch\f2                         max_r = r;
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                     else if (nb_tuple->willingness() == max->willingness())
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par \hich\af2\dbch\af31505\loch\f2                         if (r > max_r)
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2                      \{
\par \hich\af2\dbch\af31505\loch\f2                             max = nb_tuple;
\par \hich\af2\dbch\af31505\loch\f2                             max_r = r;
\par \hich\af2\dbch\af31505\loch\f2                         \}
\par \hich\af2\dbch\af31505\loch\f2                         else if (r == max_r)
\par \hich\af2\dbch\af31505\loch\f2                         \{
\par \hich\af2\dbch\af31505\loch\f2                             if (degree(nb_tuple) > degree(max))
\par \hich\af2\dbch\af31505\loch\f2                             \{
\par \hich\af2\dbch\af31505\loch\f2                                 max = nb_tuple;
\par \hich\af2\dbch\af31505\loch\f2                                 max_r = r;
\par \hich\af2\dbch\af31505\loch\f2                             \}
\par \hich\af2\dbch\af31505\loch\f2                         \}
\par \hich\af2\dbch\af31505\loch\f2                \hich\af2\dbch\af31505\loch\f2      \}
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         if (max != NULL)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             state_.insert_mpr_addr(max->nb_main_addr());
\par \hich\af2\dbch\af31505\loch\f2             std::set<nsaddr_t> nb2hop_addrs;
\par \hich\af2\dbch\af31505\loch\f2             for (nb2hopset_t::iterator it = N2.begin(); it != N2.end()\hich\af2\dbch\af31505\loch\f2 ; )
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 OLSR_nb2hop_tuple* nb2hop_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2                 if (nb2hop_tuple->nb_main_addr() == max->nb_main_addr())
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     nb2hop_addrs.insert(nb2hop_tuple->nb2hop_addr());
\par \hich\af2\dbch\af31505\loch\f2                     it\hich\af2\dbch\af31505\loch\f2  = N2.erase(it);
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                 else
\par \hich\af2\dbch\af31505\loch\f2                     it++;
\par 
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             for (nb2hopset_t::iterator it = N2.begin(); it != N2.end();)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 OLSR_nb2hop_tuple* nb2hop_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2                 std::set<nsaddr_t>::iterator it2 =
\par \hich\af2\dbch\af31505\loch\f2                     nb2hop_addrs.find(nb2hop_tuple->nb2hop_addr());
\par \hich\af2\dbch\af31505\loch\f2                 if (it2 != nb2hop_addrs.end())
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     it = N2.erase(it);
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                \hich\af2\dbch\af31505\loch\f2  else
\par \hich\af2\dbch\af31505\loch\f2                     it++;
\par 
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #else
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::mpr_computation()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     // MPR computation should be done for each interface. See section 8.3.1
\par \hich\af2\dbch\af31505\loch\f2     // (RFC 3626) for details.
\par \hich\af2\dbch\af31505\loch\f2     state_.clear_mprset();
\par 
\par \hich\af2\dbch\af31505\loch\f2     nbset_t N; nb2hopset_t N2;
\par \hich\af2\dbch\af31505\loch\f2     // N is the subset of neighbors of the node, which are
\par \hich\af2\dbch\af31505\loch\f2     // neighbor "of the interface I"
\par \hich\af2\dbch\af31505\loch\f2     for (nbset_t::iterator it = nbset().begin(); it != nbset().end(); it++)
\par \hich\af2\dbch\af31505\loch\f2         if ((*it)->getStatus() == OLSR_STATUS_SYM) //\hich\af2\dbch\af31505\loch\f2  I think that we need this check
\par \hich\af2\dbch\af31505\loch\f2             N.push_back(*it);
\par 
\par \hich\af2\dbch\af31505\loch\f2     // N2 is the set of 2-hop neighbors reachable from "the interface
\par \hich\af2\dbch\af31505\loch\f2     // I", excluding:
\par \hich\af2\dbch\af31505\loch\f2     // (i)   the nodes only reachable by members of N with willingness WILL_NEVER
\par \hich\af2\dbch\af31505\loch\f2     // (ii)  the n\hich\af2\dbch\af31505\loch\f2 ode performing the computation
\par \hich\af2\dbch\af31505\loch\f2     // (iii) all the symmetric neighbors: the nodes for which there exists a symmetric
\par \hich\af2\dbch\af31505\loch\f2     //       link to this node on some interface.
\par \hich\af2\dbch\af31505\loch\f2     for (nb2hopset_t::iterator it = nb2hopset().begin(); it != nb2hopset().end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb2hop_tuple* nb2hop_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2         // (ii)  the node performing the computation
\par \hich\af2\dbch\af31505\loch\f2         if (isLocalAddress(nb2hop_tuple->nb2hop_addr()))
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         // excluding:
\par \hich\af2\dbch\af31505\loch\f2         // (i) the nodes only\hich\af2\dbch\af31505\loch\f2  reachable by members of N with willingness WILL_NEVER
\par \hich\af2\dbch\af31505\loch\f2         bool ok = false;
\par \hich\af2\dbch\af31505\loch\f2         for (nbset_t::const_iterator it2 = N.begin(); it2 != N.end(); it2++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_nb_tuple* neigh = *it2;
\par \hich\af2\dbch\af31505\loch\f2             if (neigh->nb_main_addr() == nb2hop_tuple->nb_main_addr())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 if (neigh->willingness() == OLSR_WILL_NEVER)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     ok = false;
\par \hich\af2\dbch\af31505\loch\f2                     break;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                \hich\af2\dbch\af31505\loch\f2  else
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     ok = true;
\par \hich\af2\dbch\af31505\loch\f2                     break;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         if (!ok)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         // excluding:
\par \hich\af2\dbch\af31505\loch\f2         // (iii) all the symmetric neighbors: the \hich\af2\dbch\af31505\loch\f2 nodes for which there exists a symmetric
\par \hich\af2\dbch\af31505\loch\f2         //       link to this node on some interface.
\par \hich\af2\dbch\af31505\loch\f2         for (nbset_t::iterator it2 = N.begin(); it2 != N.end(); it2++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_nb_tuple* neigh = *it2;
\par \hich\af2\dbch\af31505\loch\f2             if (neigh->nb_main_addr() =\hich\af2\dbch\af31505\loch\f2 = nb2hop_tuple->nb2hop_addr())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 ok = false;
\par \hich\af2\dbch\af31505\loch\f2                 break;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         if (ok)
\par \hich\af2\dbch\af31505\loch\f2             N2.push_back(nb2hop_tuple);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 1. Start with an MPR set made of all members of N with
\par \hich\af2\dbch\af31505\loch\f2     // N_willingness equal to WILL_ALWAYS
\par \hich\af2\dbch\af31505\loch\f2     for (nbset_t::iterator it = N.begin(); it != N.end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb_tuple* nb_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2         if (nb_tuple->willingness() == OLSR_WILL_ALWAYS)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             state_.insert_mpr_addr(nb_\hich\af2\dbch\af31505\loch\f2 tuple->nb_main_addr());
\par \hich\af2\dbch\af31505\loch\f2             // (not in RFC but I think is needed: remove the 2-hop
\par \hich\af2\dbch\af31505\loch\f2             // neighbors reachable by the MPR from N2)
\par \hich\af2\dbch\af31505\loch\f2             CoverTwoHopNeighbors (nb_tuple->nb_main_addr(), N2);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 2. Calculate D(y), wh\hich\af2\dbch\af31505\loch\f2 ere y is a member of N, for all nodes in N.
\par \hich\af2\dbch\af31505\loch\f2     // We will do this later.
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 3. Add to the MPR set those nodes in N, which are the *only*
\par \hich\af2\dbch\af31505\loch\f2     // nodes to provide reachability to a node in N2. Remove the
\par \hich\af2\dbch\af31505\loch\f2     // nodes from N2 which are now covered by a \hich\af2\dbch\af31505\loch\f2 node in the MPR set.
\par 
\par \hich\af2\dbch\af31505\loch\f2     std::set<nsaddr_t> coveredTwoHopNeighbors;
\par \hich\af2\dbch\af31505\loch\f2     for (nb2hopset_t::iterator it = N2.begin(); it != N2.end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb2hop_tuple* twoHopNeigh = *it;
\par \hich\af2\dbch\af31505\loch\f2         bool onlyOne = true;
\par \hich\af2\dbch\af31505\loch\f2         \hich\af2\dbch\af31505\loch\f2 // try to find another neighbor that can reach twoHopNeigh->twoHopNeighborAddr
\par \hich\af2\dbch\af31505\loch\f2         for (nb2hopset_t::const_iterator it2 = N2.begin(); it2 != N2.end(); it2++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_nb2hop_tuple* otherTwoHopNeigh = *it2;
\par \hich\af2\dbch\af31505\loch\f2             if (otherTwoHopN\hich\af2\dbch\af31505\loch\f2 eigh->nb2hop_addr() == twoHopNeigh->nb2hop_addr()
\par \hich\af2\dbch\af31505\loch\f2                     && otherTwoHopNeigh->nb_main_addr() != twoHopNeigh->nb_main_addr())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 onlyOne = false;
\par \hich\af2\dbch\af31505\loch\f2                 break;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         if (onlyOne)
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2      \{
\par \hich\af2\dbch\af31505\loch\f2             state_.insert_mpr_addr(twoHopNeigh->nb_main_addr());
\par 
\par \hich\af2\dbch\af31505\loch\f2             // take note of all the 2-hop neighbors reachable by the newly elected MPR
\par \hich\af2\dbch\af31505\loch\f2             for (nb2hopset_t::const_iterator it2 = N2.begin(); it2 != N2.end(); it2++)
\par \hich\af2\dbch\af31505\loch\f2          \hich\af2\dbch\af31505\loch\f2    \{
\par \hich\af2\dbch\af31505\loch\f2                 OLSR_nb2hop_tuple* otherTwoHopNeigh = *it2;
\par \hich\af2\dbch\af31505\loch\f2                 if (otherTwoHopNeigh->nb_main_addr() == twoHopNeigh->nb_main_addr())
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     coveredTwoHopNeighbors.insert(otherTwoHopNeigh->nb2hop_addr());
\par \hich\af2\dbch\af31505\loch\f2     \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     // Remove the nodes from N2 which are now covered by a node in the MPR set.
\par \hich\af2\dbch\af31505\loch\f2     for (nb2hopset_t::iterator it = N2.begin(); it != N2.end();)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb2hop_tuple* twoHopNeigh = *it;
\par \hich\af2\dbch\af31505\loch\f2         if (coveredTwoHopNeighbors.find(twoHopNeigh->nb2hop_addr()) != coveredTwoHopNeighbors.end())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             // This works correctly only because it is known that twoHopNeigh is reachable by exactly one neighbor,
\par \hich\af2\dbch\af31505\loch\f2             // so only one re\hich\af2\dbch\af31505\loch\f2 cord in N2 exists for each of them. This record is erased here.
\par \hich\af2\dbch\af31505\loch\f2             it = N2.erase(it);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             it++;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     // 4. While there exist nodes in N2 which are not covered by at
\par \hich\af2\dbch\af31505\loch\f2     // least one node in t\hich\af2\dbch\af31505\loch\f2 he MPR set:
\par 
\par \hich\af2\dbch\af31505\loch\f2     while (N2.begin() != N2.end())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par 
\par \hich\af2\dbch\af31505\loch\f2         // 4.1. For each node in N, calculate the reachability, i.e., the
\par \hich\af2\dbch\af31505\loch\f2         // number of nodes in N2 which are not yet covered by at
\par \hich\af2\dbch\af31505\loch\f2         // least one node in the MPR set, and which are reacha\hich\af2\dbch\af31505\loch\f2 ble
\par \hich\af2\dbch\af31505\loch\f2         // through this 1-hop neighbor
\par \hich\af2\dbch\af31505\loch\f2         std::map<int, std::vector<OLSR_nb_tuple*> > reachability;
\par \hich\af2\dbch\af31505\loch\f2         std::set<int> rs;
\par \hich\af2\dbch\af31505\loch\f2         for (nbset_t::iterator it = N.begin(); it != N.end(); it++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_nb_tuple* nb_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2             int r = 0;
\par \hich\af2\dbch\af31505\loch\f2             for (nb2hopset_t::iterator it2 = N2.begin(); it2 != N2.end(); it2++)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 OLSR_nb2hop_tuple* nb2hop_tuple = *it2;
\par 
\par \hich\af2\dbch\af31505\loch\f2                 if (nb_tuple->nb_main_addr() == nb2hop_tuple->nb_main_addr())
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2                  r++;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             rs.insert(r);
\par \hich\af2\dbch\af31505\loch\f2             reachability[r].push_back(nb_tuple);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         // 4.2. Select as a MPR the node with highest N_willingness among
\par \hich\af2\dbch\af31505\loch\f2         // the nodes in N with non-zero reachability. In cas\hich\af2\dbch\af31505\loch\f2 e of
\par \hich\af2\dbch\af31505\loch\f2         // multiple choice select the node which provides
\par \hich\af2\dbch\af31505\loch\f2         // reachability to the maximum number of nodes in N2. In
\par \hich\af2\dbch\af31505\loch\f2         // case of multiple nodes providing the same amount of
\par \hich\af2\dbch\af31505\loch\f2         // reachability, select the node as MPR whose D(y) is
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2      // greater. Remove the nodes from N2 which are now covered
\par \hich\af2\dbch\af31505\loch\f2         // by a node in the MPR set.
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb_tuple *max = NULL;
\par \hich\af2\dbch\af31505\loch\f2         int max_r = 0;
\par \hich\af2\dbch\af31505\loch\f2         for (std::set<int>::iterator it = rs.begin(); it != rs.end(); it++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             int r = *it;
\par \hich\af2\dbch\af31505\loch\f2             if (r == 0)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 continue;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             for (std::vector<OLSR_nb_tuple *>::iterator it2 = reachability[r].begin();
\par \hich\af2\dbch\af31505\loch\f2                     it2 != reachability[r].end(); it2++)
\par \hich\af2\dbch\af31505\loch\f2          \hich\af2\dbch\af31505\loch\f2    \{
\par \hich\af2\dbch\af31505\loch\f2                 OLSR_nb_tuple *nb_tuple = *it2;
\par \hich\af2\dbch\af31505\loch\f2                 if (max == NULL || nb_tuple->willingness() > max->willingness())
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     max = nb_tuple;
\par \hich\af2\dbch\af31505\loch\f2                     max_r = r;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                 els\hich\af2\dbch\af31505\loch\f2 e if (nb_tuple->willingness() == max->willingness())
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     if (r > max_r)
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par \hich\af2\dbch\af31505\loch\f2                         max = nb_tuple;
\par \hich\af2\dbch\af31505\loch\f2                         max_r = r;
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                     else if (r \hich\af2\dbch\af31505\loch\f2 == max_r)
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par \hich\af2\dbch\af31505\loch\f2                         if (degree(nb_tuple) > degree(max))
\par \hich\af2\dbch\af31505\loch\f2                         \{
\par \hich\af2\dbch\af31505\loch\f2                             max = nb_tuple;
\par \hich\af2\dbch\af31505\loch\f2                             max_r = r;
\par \hich\af2\dbch\af31505\loch\f2                         \}
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         if (max != NULL)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             state_.insert_mpr_addr(max->nb_main_addr());
\par \hich\af2\dbch\af31505\loch\f2             CoverTwoHopNeighbors(max->nb_main_addr(), N2);
\par \hich\af2\dbch\af31505\loch\f2             EV << N2.size () << " 2-hop neighbors left to cover\hich\af2\dbch\af31505\loch\f2 ! \\n";
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par \hich\af2\dbch\af31505\loch\f2 #endif
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Creates the routing table of the node following RFC 3626 hints.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::rtable_computation()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     nsaddr_t netmask(IPv4Address::ALLONES_ADDRESS);
\par \hich\af2\dbch\af31505\loch\f2     // 1. All the entries from the routing table are re\hich\af2\dbch\af31505\loch\f2 moved.
\par \hich\af2\dbch\af31505\loch\f2     //
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (par("DelOnlyRtEntriesInrtable_").boolValue())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         for (rtable_t::const_iterator itRtTable = rtable_.getInternalTable()->begin();itRtTable != rtable_.getInternalTable()->begin();++itRtTable)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             nsaddr_t addr = itRtTable->first;
\par \hich\af2\dbch\af31505\loch\f2             omnet_chg_rte(addr, addr,netmask,1, true, addr);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         omnet_clean_rte(); // clean IP tables
\par 
\par \hich\af2\dbch\af31505\loch\f2     rtable_.clear();
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 2. The new routing entries are added starting w\hich\af2\dbch\af31505\loch\f2 ith the
\par \hich\af2\dbch\af31505\loch\f2     // symmetric neighbors (h=1) as the destination nodes.
\par 
\par \hich\af2\dbch\af31505\loch\f2     for (nbset_t::iterator it = nbset().begin(); it != nbset().end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb_tuple* nb_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2         if (nb_tuple->getStatus() == OLSR_STATUS_SYM)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2          bool nb_main_addr = false;
\par \hich\af2\dbch\af31505\loch\f2             OLSR_link_tuple* lt = NULL;
\par \hich\af2\dbch\af31505\loch\f2             for (linkset_t::iterator it2 = linkset().begin(); it2 != linkset().end(); it2++)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 OLSR_link_tuple* link_tuple = *it2;
\par \hich\af2\dbch\af31505\loch\f2                 if (g\hich\af2\dbch\af31505\loch\f2 et_main_addr(link_tuple->nb_iface_addr()) == nb_tuple->nb_main_addr() && link_tuple->time() >= CURRENT_TIME)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     lt = link_tuple;
\par \hich\af2\dbch\af31505\loch\f2                     rtable_.add_entry(link_tuple->nb_iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                          \hich\af2\dbch\af31505\loch\f2              link_tuple->nb_iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                       link_tuple->local_iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                       1, link_tuple->local_iface_index());
\par \hich\af2\dbch\af31505\loch\f2                     if (!useIndex)
\par \hich\af2\dbch\af31505\loch\f2                         omnet_chg_rte(link_tuple->nb_iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                        link_tuple->nb_iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                        netmask,
\par \hich\af2\dbch\af31505\loch\f2                                        1, false, link_tuple->local_iface_\hich\af2\dbch\af31505\loch\f2 addr());
\par \hich\af2\dbch\af31505\loch\f2                     else
\par \hich\af2\dbch\af31505\loch\f2                         omnet_chg_rte(link_tuple->nb_iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                        link_tuple->nb_iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                        netmask,
\par \hich\af2\dbch\af31505\loch\f2                                        \hich\af2\dbch\af31505\loch\f2 1, false, link_tuple->local_iface_index());
\par 
\par \hich\af2\dbch\af31505\loch\f2                     if (link_tuple->nb_iface_addr() == nb_tuple->nb_main_addr())
\par \hich\af2\dbch\af31505\loch\f2                         nb_main_addr = true;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             if (!nb_main_addr && lt != NULL)
\par \hich\af2\dbch\af31505\loch\f2         \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2                 rtable_.add_entry(nb_tuple->nb_main_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                   lt->nb_iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                   lt->local_iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                   1, lt->local_iface_index());
\par 
\par \hich\af2\dbch\af31505\loch\f2              \hich\af2\dbch\af31505\loch\f2    if (!useIndex)
\par \hich\af2\dbch\af31505\loch\f2                     omnet_chg_rte(nb_tuple->nb_main_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    lt->nb_iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    netmask,// Default mask
\par \hich\af2\dbch\af31505\loch\f2                                    1, false, lt->local_iface_addr());
\par 
\par \hich\af2\dbch\af31505\loch\f2                 else
\par \hich\af2\dbch\af31505\loch\f2                     omnet_chg_rte(nb_tuple->nb_main_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    lt->nb_iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    netmask,// De\hich\af2\dbch\af31505\loch\f2 fault mask
\par \hich\af2\dbch\af31505\loch\f2                                    1, false, lt->local_iface_index());
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     // N2 is the set of 2-hop neighbors reachable from this node, excluding:
\par \hich\af2\dbch\af31505\loch\f2     // (i)   the nodes only reachable by members of N with willing\hich\af2\dbch\af31505\loch\f2 ness WILL_NEVER
\par \hich\af2\dbch\af31505\loch\f2     // (ii)  the node performing the computation
\par \hich\af2\dbch\af31505\loch\f2     // (iii) all the symmetric neighbors: the nodes for which there exists a symmetric
\par \hich\af2\dbch\af31505\loch\f2     //       link to this node on some interface.
\par \hich\af2\dbch\af31505\loch\f2     for (nb2hopset_t::iterator it = nb2hopset().begin(\hich\af2\dbch\af31505\loch\f2 ); it != nb2hopset().end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb2hop_tuple* nb2hop_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2         bool ok = true;
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb_tuple* nb_tuple = state_.find_sym_nb_tuple(nb2hop_tuple->nb_main_addr());
\par \hich\af2\dbch\af31505\loch\f2         if (nb_tuple == NULL)
\par \hich\af2\dbch\af31505\loch\f2             ok = false;
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2        else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             nb_tuple = state_.find_nb_tuple(nb2hop_tuple->nb_main_addr(), OLSR_WILL_NEVER);
\par \hich\af2\dbch\af31505\loch\f2             if (nb_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2                 ok = false;
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 nb_tuple = state_.find_sym_nb_tuple(nb2hop_tuple->nb2hop_addr());
\par \hich\af2\dbch\af31505\loch\f2                 if (nb_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2                     ok = false;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         // 3. For each node in N2 create a new entry in the routing table
\par \hich\af2\dbch\af31505\loch\f2      \hich\af2\dbch\af31505\loch\f2    if (ok)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_rt_entry* entry = rtable_.lookup(nb2hop_tuple->nb_main_addr());
\par \hich\af2\dbch\af31505\loch\f2             assert(entry != NULL);
\par 
\par \hich\af2\dbch\af31505\loch\f2             // check if the entry is already in the routing table and the new is a better alternative
\par \hich\af2\dbch\af31505\loch\f2             bool\hich\af2\dbch\af31505\loch\f2  insert = true;
\par \hich\af2\dbch\af31505\loch\f2             OLSR_rt_entry* entry2hop = rtable_.lookup(nb2hop_tuple->nb2hop_addr());
\par \hich\af2\dbch\af31505\loch\f2             if (entry2hop)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 // check if the node is a better alternative
\par \hich\af2\dbch\af31505\loch\f2                 OLSR_nb_tuple* nb_tupleNew = state_.fi\hich\af2\dbch\af31505\loch\f2 nd_sym_nb_tuple(nb2hop_tuple->nb_main_addr());
\par \hich\af2\dbch\af31505\loch\f2                 OLSR_nb_tuple* nb_tupleOld = state_.find_sym_nb_tuple(entry2hop->next_addr());
\par 
\par \hich\af2\dbch\af31505\loch\f2                 if (nb_tupleOld != NULL && nb_tupleOld->willingness() > nb_tupleNew->willingness())
\par \hich\af2\dbch\af31505\loch\f2              \hich\af2\dbch\af31505\loch\f2        insert = false;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par 
\par \hich\af2\dbch\af31505\loch\f2             if (insert)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 rtable_.add_entry(nb2hop_tuple->nb2hop_addr(),
\par \hich\af2\dbch\af31505\loch\f2                         entry->next_addr(),
\par \hich\af2\dbch\af31505\loch\f2                         entry->iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                         2, entry->local_iface_index());
\par \hich\af2\dbch\af31505\loch\f2                 if (!useIndex)
\par \hich\af2\dbch\af31505\loch\f2                     omnet_chg_rte(nb2hop_tuple->nb2hop_addr(),
\par \hich\af2\dbch\af31505\loch\f2                             entry->next_addr(),
\par \hich\af2\dbch\af31505\loch\f2                             netmask,
\par \hich\af2\dbch\af31505\loch\f2                      \hich\af2\dbch\af31505\loch\f2        2, false, entry->iface_addr());
\par \hich\af2\dbch\af31505\loch\f2                 else
\par \hich\af2\dbch\af31505\loch\f2                     omnet_chg_rte(nb2hop_tuple->nb2hop_addr(),
\par \hich\af2\dbch\af31505\loch\f2                             entry->next_addr(),
\par \hich\af2\dbch\af31505\loch\f2                             netmask,
\par \hich\af2\dbch\af31505\loch\f2                             2, false, entry->loc\hich\af2\dbch\af31505\loch\f2 al_iface_index());
\par \hich\af2\dbch\af31505\loch\f2             \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     for (uint32_t h = 2;; h++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         bool added = false;
\par 
\par \hich\af2\dbch\af31505\loch\f2         // 4.1. For each topology entry in the topology table, if its
\par \hich\af2\dbch\af31505\loch\f2         // T_dest_addr does not correspond to R_dest_addr of any
\par \hich\af2\dbch\af31505\loch\f2     \hich\af2\dbch\af31505\loch\f2     // route entry in the routing table AND its T_last_addr
\par \hich\af2\dbch\af31505\loch\f2         // corresponds to R_dest_addr of a route entry whose R_dist
\par \hich\af2\dbch\af31505\loch\f2         // is equal to h, then a new route entry MUST be recorded in
\par \hich\af2\dbch\af31505\loch\f2         // the routing table (if it does not already exist)
\par \hich\af2\dbch\af31505\loch\f2         for (topologyset_t::iterator it = topologyset().begin();
\par \hich\af2\dbch\af31505\loch\f2                 it != topologyset().end();
\par \hich\af2\dbch\af31505\loch\f2                 it++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_topology_tuple* topology_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2             OLSR_rt_entry* entry1 = rtable_.lookup(topology_\hich\af2\dbch\af31505\loch\f2 tuple->dest_addr());
\par \hich\af2\dbch\af31505\loch\f2             OLSR_rt_entry* entry2 = rtable_.lookup(topology_tuple->last_addr());
\par \hich\af2\dbch\af31505\loch\f2             if (entry1 == NULL && entry2 != NULL && entry2->dist() == h)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 rtable_.add_entry(topology_tuple->dest_addr(),
\par \hich\af2\dbch\af31505\loch\f2     \hich\af2\dbch\af31505\loch\f2                               entry2->next_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                   entry2->iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                   h+1, entry2->local_iface_index(), entry2);
\par 
\par \hich\af2\dbch\af31505\loch\f2                 if (!useIndex)
\par \hich\af2\dbch\af31505\loch\f2                     omnet_chg_rte(topolo\hich\af2\dbch\af31505\loch\f2 gy_tuple->dest_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    entry2->next_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    netmask,
\par \hich\af2\dbch\af31505\loch\f2                                    h+1, false, entry2->iface_addr());
\par 
\par \hich\af2\dbch\af31505\loch\f2                 else
\par \hich\af2\dbch\af31505\loch\f2                     omnet_chg_rte(topolog\hich\af2\dbch\af31505\loch\f2 y_tuple->dest_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    entry2->next_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    netmask,
\par \hich\af2\dbch\af31505\loch\f2                                    h+1, false, entry2->local_iface_index());
\par 
\par \hich\af2\dbch\af31505\loch\f2                 added = true;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         // 5. For each entry in the multiple interface association base
\par \hich\af2\dbch\af31505\loch\f2         // where there exists a routing entry such that:
\par \hich\af2\dbch\af31505\loch\f2         //  R_dest_addr  == I_main_addr  (of the multiple interface association entry)
\par \hich\af2\dbch\af31505\loch\f2         // AND there is no routing entry\hich\af2\dbch\af31505\loch\f2  such that:
\par \hich\af2\dbch\af31505\loch\f2         //  R_dest_addr  == I_iface_addr
\par \hich\af2\dbch\af31505\loch\f2         // then a route entry is created in the routing table
\par \hich\af2\dbch\af31505\loch\f2         for (ifaceassocset_t::iterator it = ifaceassocset().begin();
\par \hich\af2\dbch\af31505\loch\f2                 it != ifaceassocset().end();
\par \hich\af2\dbch\af31505\loch\f2                 it++)
\par \hich\af2\dbch\af31505\loch\f2      \hich\af2\dbch\af31505\loch\f2    \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_iface_assoc_tuple* tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2             OLSR_rt_entry* entry1 = rtable_.lookup(tuple->main_addr());
\par \hich\af2\dbch\af31505\loch\f2             OLSR_rt_entry* entry2 = rtable_.lookup(tuple->iface_addr());
\par \hich\af2\dbch\af31505\loch\f2             if (entry1 != NULL && entry2 == NULL)
\par \hich\af2\dbch\af31505\loch\f2        \hich\af2\dbch\af31505\loch\f2      \{
\par \hich\af2\dbch\af31505\loch\f2                 rtable_.add_entry(tuple->iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                   entry1->next_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                   entry1->iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                   entry1->dist(), entry1->local_iface_index(), entr\hich\af2\dbch\af31505\loch\f2 y1);
\par 
\par \hich\af2\dbch\af31505\loch\f2                 if (!useIndex)
\par \hich\af2\dbch\af31505\loch\f2                     omnet_chg_rte(tuple->iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    entry1->next_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    netmask,
\par \hich\af2\dbch\af31505\loch\f2                                    entry1->dist(), false, entry1->iface_addr());
\par 
\par \hich\af2\dbch\af31505\loch\f2                 else
\par \hich\af2\dbch\af31505\loch\f2                     omnet_chg_rte(tuple->iface_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    entry1->next_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                    netmask,
\par \hich\af2\dbch\af31505\loch\f2                                    entry1->dist(), false, entry1->local_iface_index());
\par \hich\af2\dbch\af31505\loch\f2                 added = true;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (!added)
\par \hich\af2\dbch\af31505\loch\f2             break;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     setTopologyChanged(false);
\par \hich\af2\dbch\af31505\loch\f2     computeDistributionPath(ra_addr\hich\af2\dbch\af31505\loch\f2 ());
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Processes a HELLO message following RFC 3626 specification.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// Link sensing and population of the Neighbor Set, 2-hop Neighbor Set and MPR
\par \hich\af2\dbch\af31505\loch\f2 /// Selector Set are performed.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param msg the %OLSR message which contains the H\hich\af2\dbch\af31505\loch\f2 ELLO message.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param receiver_iface the address of the interface where the message was received from.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param sender_iface the address of the interface where the message was sent from.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 bool
\par \hich\af2\dbch\af31505\loch\f2 OLSR::process_hello(OLSR_msg& msg, const nsaddr_t &receiver_iface, const nsaddr_t &sender_iface, const int &index)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     assert(msg.msg_type() == OLSR_HELLO_MSG);
\par 
\par \hich\af2\dbch\af31505\loch\f2     link_sensing(msg, receiver_iface, sender_iface, index);
\par \hich\af2\dbch\af31505\loch\f2     populate_nbset(msg);
\par \hich\af2\dbch\af31505\loch\f2     pop\hich\af2\dbch\af31505\loch\f2 ulate_nb2hopset(msg);
\par \hich\af2\dbch\af31505\loch\f2     mpr_computation();
\par \hich\af2\dbch\af31505\loch\f2     populate_mprselset(msg);
\par \hich\af2\dbch\af31505\loch\f2     return false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Processes a TC message following RFC 3626 specification.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// The Topology Set is updated (if needed) with the information of
\par \hich\af2\dbch\af31505\loch\f2 /// the received \hich\af2\dbch\af31505\loch\f2 TC message.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param msg the %OLSR message which contains the TC message.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param sender_iface the address of the interface where the message was sent from.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 bool
\par \hich\af2\dbch\af31505\loch\f2 OLSR::process_tc(OLSR_msg& msg, const nsaddr_t &sender_iface, const int &index)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     assert(msg.msg_type() == OLSR_TC_MSG);
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_tc& tc = msg.tc();
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 1. If the sender interface of this message is not in the symmetric
\par \hich\af2\dbch\af31505\loch\f2     // 1-hop neighborhood of this node, the message MUST be discarded.
\par \hich\af2\dbch\af31505\loch\f2     OLSR_link_tuple* link_tuple = state_.find_sym_link_tuple(sender_iface, now);
\par \hich\af2\dbch\af31505\loch\f2     if (link_tuple == NULL)
\par \hich\af2\dbch\af31505\loch\f2         return false;
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 2. If there exist some tuple in the topology set where:
\par \hich\af2\dbch\af31505\loch\f2     //  T_last_addr == originator address AND
\par \hich\af2\dbch\af31505\loch\f2     //  T_seq  \hich\af2\dbch\af31505\loch\f2      >  ANSN,
\par \hich\af2\dbch\af31505\loch\f2     // then further processing of this TC message MUST NOT be
\par \hich\af2\dbch\af31505\loch\f2     // performed.
\par \hich\af2\dbch\af31505\loch\f2     OLSR_topology_tuple* topology_tuple =
\par \hich\af2\dbch\af31505\loch\f2         state_.find_newer_topology_tuple(msg.orig_addr(), tc.ansn());
\par \hich\af2\dbch\af31505\loch\f2     if (topology_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2         return fal\hich\af2\dbch\af31505\loch\f2 se;
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 3. All tuples in the topology set where:
\par \hich\af2\dbch\af31505\loch\f2     //  T_last_addr == originator address AND
\par \hich\af2\dbch\af31505\loch\f2     //  T_seq       <  ANSN
\par \hich\af2\dbch\af31505\loch\f2     // MUST be removed from the topology set.
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_older_topology_tuples(msg.orig_addr(), tc.ansn());
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 4. For \hich\af2\dbch\af31505\loch\f2 each of the advertised neighbor main address received in
\par \hich\af2\dbch\af31505\loch\f2     // the TC message:
\par \hich\af2\dbch\af31505\loch\f2     for (int i = 0; i < tc.count; i++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         assert(i >= 0 && i < OLSR_MAX_ADDRS);
\par \hich\af2\dbch\af31505\loch\f2         nsaddr_t addr = tc.nb_main_addr(i);
\par \hich\af2\dbch\af31505\loch\f2         // 4.1. If there exist some tuple in the topology set where:
\par \hich\af2\dbch\af31505\loch\f2         //  T_dest_addr == advertised neighbor main address, AND
\par \hich\af2\dbch\af31505\loch\f2         //  T_last_addr == originator address,
\par \hich\af2\dbch\af31505\loch\f2         // then the holding time of that tuple MUST be set to:
\par \hich\af2\dbch\af31505\loch\f2         //  \hich\af2\dbch\af31505\loch\f2 T_time      =  current time + validity time.
\par \hich\af2\dbch\af31505\loch\f2         OLSR_topology_tuple* topology_tuple =
\par \hich\af2\dbch\af31505\loch\f2             state_.find_topology_tuple(addr, msg.orig_addr());
\par \hich\af2\dbch\af31505\loch\f2         if (topology_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2             topology_tuple->time() = now + OLSR::emf_to_seconds(ms\hich\af2\dbch\af31505\loch\f2 g.vtime());
\par \hich\af2\dbch\af31505\loch\f2         // 4.2. Otherwise, a new tuple MUST be recorded in the topology
\par \hich\af2\dbch\af31505\loch\f2         // set where:
\par \hich\af2\dbch\af31505\loch\f2         //  T_dest_addr = advertised neighbor main address,
\par \hich\af2\dbch\af31505\loch\f2         //  T_last_addr = originator address,
\par \hich\af2\dbch\af31505\loch\f2         //  T_seq       = ANSN,
\par \hich\af2\dbch\af31505\loch\f2         //  \hich\af2\dbch\af31505\loch\f2 T_time      = current time + validity time.
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_topology_tuple* topology_tuple = new OLSR_topology_tuple;
\par \hich\af2\dbch\af31505\loch\f2             topology_tuple->dest_addr() = addr;
\par \hich\af2\dbch\af31505\loch\f2             topology_tuple->last_addr() = msg.orig_addr();
\par \hich\af2\dbch\af31505\loch\f2        \hich\af2\dbch\af31505\loch\f2      topology_tuple->seq() = tc.ansn();
\par \hich\af2\dbch\af31505\loch\f2             topology_tuple->time() = now + OLSR::emf_to_seconds(msg.vtime());
\par \hich\af2\dbch\af31505\loch\f2             topology_tuple->local_iface_index() = index;
\par \hich\af2\dbch\af31505\loch\f2             add_topology_tuple(topology_tuple);
\par \hich\af2\dbch\af31505\loch\f2             // Schedules topology\hich\af2\dbch\af31505\loch\f2  tuple deletion
\par \hich\af2\dbch\af31505\loch\f2             OLSR_TopologyTupleTimer* topology_timer =
\par \hich\af2\dbch\af31505\loch\f2                 new OLSR_TopologyTupleTimer(this, topology_tuple);
\par \hich\af2\dbch\af31505\loch\f2             topology_timer->resched(DELAY(topology_tuple->time()));
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 brief Processes a MID message following RFC 3626 specification.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// The Interface Association Set is updated (if needed) with the information
\par \hich\af2\dbch\af31505\loch\f2 /// of the received MID message.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param msg the %OLSR message which contains the MID message.
\par \hich\af2\dbch\af31505\loch\f2 /// \\par\hich\af2\dbch\af31505\loch\f2 am sender_iface the address of the interface where the message was sent from.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::process_mid(OLSR_msg& msg, const nsaddr_t &sender_iface, const int &index)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     assert(msg.msg_type() == OLSR_MID_MSG);
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_mi\hich\af2\dbch\af31505\loch\f2 d& mid = msg.mid();
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 1. If the sender interface of this message is not in the symmetric
\par \hich\af2\dbch\af31505\loch\f2     // 1-hop neighborhood of this node, the message MUST be discarded.
\par \hich\af2\dbch\af31505\loch\f2     OLSR_link_tuple* link_tuple = state_.find_sym_link_tuple(sender_iface, now);
\par \hich\af2\dbch\af31505\loch\f2     if (l\hich\af2\dbch\af31505\loch\f2 ink_tuple == NULL)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par 
\par \hich\af2\dbch\af31505\loch\f2     // 2. For each interface address listed in the MID message
\par \hich\af2\dbch\af31505\loch\f2     for (int i = 0; i < mid.count; i++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         bool updated = false;
\par \hich\af2\dbch\af31505\loch\f2         for (ifaceassocset_t::iterator it = ifaceassocset().begin();
\par \hich\af2\dbch\af31505\loch\f2                 it != ifaceassocset().end();
\par \hich\af2\dbch\af31505\loch\f2                 it++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_iface_assoc_tuple* tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2             if (tuple->iface_addr() == mid.iface_addr(i)
\par \hich\af2\dbch\af31505\loch\f2                     && tuple->main_addr() == msg.orig_addr())
\par \hich\af2\dbch\af31505\loch\f2            \hich\af2\dbch\af31505\loch\f2  \{
\par \hich\af2\dbch\af31505\loch\f2                 tuple->time() = now + OLSR::emf_to_seconds(msg.vtime());
\par \hich\af2\dbch\af31505\loch\f2                 updated = true;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         if (!updated)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_iface_assoc_tuple* tuple = new OLSR_iface_assoc_tuple;
\par \hich\af2\dbch\af31505\loch\f2             tuple->i\hich\af2\dbch\af31505\loch\f2 face_addr() = msg.mid().iface_addr(i);
\par \hich\af2\dbch\af31505\loch\f2             tuple->main_addr() = msg.orig_addr();
\par \hich\af2\dbch\af31505\loch\f2             tuple->time() = now + OLSR::emf_to_seconds(msg.vtime());
\par \hich\af2\dbch\af31505\loch\f2             tuple->local_iface_index() = index;
\par \hich\af2\dbch\af31505\loch\f2             add_ifaceassoc_tuple(tuple);
\par \hich\af2\dbch\af31505\loch\f2          \hich\af2\dbch\af31505\loch\f2    // Schedules iface association tuple deletion
\par \hich\af2\dbch\af31505\loch\f2             OLSR_IfaceAssocTupleTimer* ifaceassoc_timer =
\par \hich\af2\dbch\af31505\loch\f2                 new OLSR_IfaceAssocTupleTimer(this, tuple);
\par \hich\af2\dbch\af31505\loch\f2             ifaceassoc_timer->resched(DELAY(tuple->time()));
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 brief OLSR's default forwarding algorithm.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// See RFC 3626 for details.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param p the %OLSR packet which has been received.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param msg the %OLSR message which must be forwarded.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param dup_tuple NULL if the message has never been consid\hich\af2\dbch\af31505\loch\f2 ered for forwarding,
\par \hich\af2\dbch\af31505\loch\f2 /// or a duplicate tuple in other case.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param local_iface the address of the interface where the message was received from.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::forward_default(OLSR_msg& msg, OLSR_dup_tuple* dup_tuple, const nsaddr_t &local_iface, cons\hich\af2\dbch\af31505\loch\f2 t nsaddr_t &src_addr)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par 
\par \hich\af2\dbch\af31505\loch\f2     // If the sender interface address is not in the symmetric
\par \hich\af2\dbch\af31505\loch\f2     // 1-hop neighborhood the message must not be forwarded
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     OLSR_link_tuple* link_tuple = state_.find_sym_link_tuple(src_addr, now)\hich\af2\dbch\af31505\loch\f2 ;
\par \hich\af2\dbch\af31505\loch\f2     if (link_tuple == NULL)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par 
\par \hich\af2\dbch\af31505\loch\f2     // If the message has already been considered for forwarding,
\par \hich\af2\dbch\af31505\loch\f2     // it must not be retransmitted again
\par \hich\af2\dbch\af31505\loch\f2     if (dup_tuple != NULL && dup_tuple->retransmitted())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         debug("%f: Node %s does not forward a message received"
\par \hich\af2\dbch\af31505\loch\f2               " from %s because it is duplicated\\n",
\par \hich\af2\dbch\af31505\loch\f2               CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2               getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2               getNodeId(dup_tuple->getAddr()));
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     \hich\af2\dbch\af31505\loch\f2 // If the sender interface address is an interface address
\par \hich\af2\dbch\af31505\loch\f2     // of a MPR selector of this node and ttl is greater than 1,
\par \hich\af2\dbch\af31505\loch\f2     // the message must be retransmitted
\par \hich\af2\dbch\af31505\loch\f2     bool retransmitted = false;
\par \hich\af2\dbch\af31505\loch\f2     if (msg.ttl() > 1)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_mprsel_tuple* mpr\hich\af2\dbch\af31505\loch\f2 sel_tuple =
\par \hich\af2\dbch\af31505\loch\f2             state_.find_mprsel_tuple(get_main_addr(src_addr));
\par \hich\af2\dbch\af31505\loch\f2         if (mprsel_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_msg& new_msg = msg;
\par \hich\af2\dbch\af31505\loch\f2             new_msg.ttl()--;
\par \hich\af2\dbch\af31505\loch\f2             new_msg.hop_count()++;
\par \hich\af2\dbch\af31505\loch\f2             // We have to introduce \hich\af2\dbch\af31505\loch\f2 a random delay to avoid
\par \hich\af2\dbch\af31505\loch\f2             // synchronization with neighbors.
\par \hich\af2\dbch\af31505\loch\f2             enque_msg(new_msg, JITTER);
\par \hich\af2\dbch\af31505\loch\f2             retransmitted = true;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     // Update duplicate tuple...
\par \hich\af2\dbch\af31505\loch\f2     if (dup_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         dup_tuple->time() = now + OLSR_DUP_HOLD_TIME;
\par \hich\af2\dbch\af31505\loch\f2         dup_tuple->retransmitted() = retransmitted;
\par \hich\af2\dbch\af31505\loch\f2         dup_tuple->iface_list().push_back(local_iface);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     // ...or create a new one
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_dup_tuple* new_dup = new OLSR_\hich\af2\dbch\af31505\loch\f2 dup_tuple;
\par \hich\af2\dbch\af31505\loch\f2         new_dup->getAddr() = msg.orig_addr();
\par \hich\af2\dbch\af31505\loch\f2         new_dup->seq_num() = msg.msg_seq_num();
\par \hich\af2\dbch\af31505\loch\f2         new_dup->time() = now + OLSR_DUP_HOLD_TIME;
\par \hich\af2\dbch\af31505\loch\f2         new_dup->retransmitted() = retransmitted;
\par \hich\af2\dbch\af31505\loch\f2         new_dup->iface_list().push_back(local_ifa\hich\af2\dbch\af31505\loch\f2 ce);
\par \hich\af2\dbch\af31505\loch\f2         add_dup_tuple(new_dup);
\par \hich\af2\dbch\af31505\loch\f2         // Schedules dup tuple deletion
\par \hich\af2\dbch\af31505\loch\f2         OLSR_DupTupleTimer* dup_timer =
\par \hich\af2\dbch\af31505\loch\f2             new OLSR_DupTupleTimer(this, new_dup);
\par \hich\af2\dbch\af31505\loch\f2         dup_timer->resched(DELAY(new_dup->time()));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 brief Forwards a data packet to the appropiate next hop indicated by the routing table.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param p the packet which must be forwarded.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 #if 0
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::forward_data(cMessage* p, nsaddr_t addr)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     struct hdr_cmn* ch = HDR_CMN(p);
\par \hich\af2\dbch\af31505\loch\f2     struct hdr\hich\af2\dbch\af31505\loch\f2 _ip* ih = HDR_IP(p);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (ch->direction() == hdr_cmn::UP &&
\par \hich\af2\dbch\af31505\loch\f2             ((uint32_t)ih->daddr() == IP_BROADCAST || ih->daddr() == ra_addr()))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         dmux_->recv(p, 0);
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if ((uint32_t)ih->daddr() != IP_B\hich\af2\dbch\af31505\loch\f2 ROADCAST)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             OLSR_rt_entry* entry = rtable_.lookup(ih->daddr());
\par \hich\af2\dbch\af31505\loch\f2             if (entry == NULL)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 debug("%f: Node %d can not forward a packet destined to %d\\n",
\par \hich\af2\dbch\af31505\loch\f2                       CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2             \hich\af2\dbch\af31505\loch\f2           OLSR::node_id(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2                       OLSR::node_id(ih->daddr()));
\par \hich\af2\dbch\af31505\loch\f2                 drop(p, DROP_RTR_NO_ROUTE);
\par \hich\af2\dbch\af31505\loch\f2                 return;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 entry = rtable_.find_send_entry(entry);
\par \hich\af2\dbch\af31505\loch\f2                 assert(entry != NULL);
\par \hich\af2\dbch\af31505\loch\f2                 ch->next_hop() = entry->next_addr();
\par 
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         sendToIp();
\par \hich\af2\dbch\af31505\loch\f2         Scheduler::getInstance().schedule(target_, p, 0.0);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par \hich\af2\dbch\af31505\loch\f2 #endif
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Enques an %OLSR message which\hich\af2\dbch\af31505\loch\f2  will be sent with a delay of (0, delay].
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// This buffering system is used in order to piggyback several %OLSR messages in
\par \hich\af2\dbch\af31505\loch\f2 /// a same %OLSR packet.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param msg the %OLSR message which must be sent.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param delay maximum delay the %OLSR messa\hich\af2\dbch\af31505\loch\f2 ge is going to be buffered.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::enque_msg(OLSR_msg& msg, double delay)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     assert(delay >= 0);
\par 
\par \hich\af2\dbch\af31505\loch\f2     msgs_.push_back(msg);
\par \hich\af2\dbch\af31505\loch\f2     OLSR_MsgTimer* timer = new OLSR_MsgTimer(this);
\par \hich\af2\dbch\af31505\loch\f2     timer->resched(delay);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 brief Creates as many %OLSR packets as needed in order to send all buffered
\par \hich\af2\dbch\af31505\loch\f2 /// %OLSR messages.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// Maximum number of messages which can be contained in an %OLSR packet is
\par \hich\af2\dbch\af31505\loch\f2 /// dictated by OLSR_MAX_MSGS constant.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::send_pkt()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     int num_\hich\af2\dbch\af31505\loch\f2 msgs = msgs_.size();
\par \hich\af2\dbch\af31505\loch\f2     if (num_msgs == 0)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par 
\par \hich\af2\dbch\af31505\loch\f2     // Calculates the number of needed packets
\par \hich\af2\dbch\af31505\loch\f2     int num_pkts = (num_msgs%OLSR_MAX_MSGS == 0) ? num_msgs/OLSR_MAX_MSGS :
\par \hich\af2\dbch\af31505\loch\f2                    (num_msgs/OLSR_MAX_MSGS + 1);
\par 
\par \hich\af2\dbch\af31505\loch\f2     ManetAddress destA\hich\af2\dbch\af31505\loch\f2 dd;
\par \hich\af2\dbch\af31505\loch\f2     if (!this->isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2         destAdd.set(IPv4Address::ALLONES_ADDRESS);
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         destAdd.set(MACAddress::BROADCAST_ADDRESS);
\par 
\par \hich\af2\dbch\af31505\loch\f2     for (int i = 0; i < num_pkts; i++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_pkt* op = new OLSR_pkt;
\par \hich\af2\dbch\af31505\loch\f2         op->setName("OLSR Pkt");
\par 
\par \hich\af2\dbch\af31505\loch\f2         op->setByteLength( OLSR_PKT_HDR_SIZE );
\par \hich\af2\dbch\af31505\loch\f2         op->setPkt_seq_num( pkt_seq());
\par \hich\af2\dbch\af31505\loch\f2         op->setReduceFuncionality(par("reduceFuncionality").boolValue());
\par 
\par \hich\af2\dbch\af31505\loch\f2         int j = 0;
\par \hich\af2\dbch\af31505\loch\f2         for (std::vector<OLSR_msg>::iter\hich\af2\dbch\af31505\loch\f2 ator it = msgs_.begin(); it != msgs_.end();)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (j == OLSR_MAX_MSGS)
\par \hich\af2\dbch\af31505\loch\f2                 break;
\par 
\par \hich\af2\dbch\af31505\loch\f2             op->setMsgArraySize(j+1);
\par \hich\af2\dbch\af31505\loch\f2             op->setMsg(j++, *it);
\par \hich\af2\dbch\af31505\loch\f2             op->setByteLength(op->getByteLength()+(*it).size());
\par 
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2          it = msgs_.erase(it);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         sendToIp(op, RT_PORT, destAdd, RT_PORT, IP_DEF_TTL, 0.0, ManetAddress::ZERO);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Creates a new %OLSR HELLO message which is buffered to be sent later on.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::send_hello()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_msg msg;
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par \hich\af2\dbch\af31505\loch\f2     msg.msg_type() = OLSR_HELLO_MSG;
\par \hich\af2\dbch\af31505\loch\f2     msg.vtime() = OLSR::seconds_to_emf(OLSR_NEIGHB_HOLD_TIME);
\par \hich\af2\dbch\af31505\loch\f2     msg.orig_addr() = ra_addr();
\par \hich\af2\dbch\af31505\loch\f2     msg.ttl() = 1;
\par \hich\af2\dbch\af31505\loch\f2     msg.hop_count() = 0;
\par \hich\af2\dbch\af31505\loch\f2     msg.msg_seq_num() = msg_se\hich\af2\dbch\af31505\loch\f2 q();
\par 
\par \hich\af2\dbch\af31505\loch\f2     msg.hello().reserved() = 0;
\par \hich\af2\dbch\af31505\loch\f2     msg.hello().htime() = OLSR::seconds_to_emf(hello_ival());
\par \hich\af2\dbch\af31505\loch\f2     msg.hello().willingness() = willingness();
\par \hich\af2\dbch\af31505\loch\f2     msg.hello().count = 0;
\par 
\par \hich\af2\dbch\af31505\loch\f2     std::map<uint8_t, int> linkcodes_count;
\par \hich\af2\dbch\af31505\loch\f2     for (linkset_t::iterator it = lin\hich\af2\dbch\af31505\loch\f2 kset().begin(); it != linkset().end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_link_tuple* link_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2         if (get_main_addr(link_tuple->local_iface_addr()) == ra_addr() && link_tuple->time() >= now)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             uint8_t link_type, nb_type, link_code;
\par 
\par \hich\af2\dbch\af31505\loch\f2             // Establishes link type
\par \hich\af2\dbch\af31505\loch\f2             if (use_mac() && link_tuple->lost_time() >= now)
\par \hich\af2\dbch\af31505\loch\f2                 link_type = OLSR_LOST_LINK;
\par \hich\af2\dbch\af31505\loch\f2             else if (link_tuple->sym_time() >= now)
\par \hich\af2\dbch\af31505\loch\f2                 link_type = OLSR_SYM_LINK;
\par \hich\af2\dbch\af31505\loch\f2             else i\hich\af2\dbch\af31505\loch\f2 f (link_tuple->asym_time() >= now)
\par \hich\af2\dbch\af31505\loch\f2                 link_type = OLSR_ASYM_LINK;
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2                 link_type = OLSR_LOST_LINK;
\par \hich\af2\dbch\af31505\loch\f2             // Establishes neighbor type.
\par \hich\af2\dbch\af31505\loch\f2             if (state_.find_mpr_addr(get_main_addr(link_tuple->nb_iface_ad\hich\af2\dbch\af31505\loch\f2 dr())))
\par \hich\af2\dbch\af31505\loch\f2                 nb_type = OLSR_MPR_NEIGH;
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 bool ok = false;
\par \hich\af2\dbch\af31505\loch\f2                 for (nbset_t::iterator nb_it = nbset().begin();
\par \hich\af2\dbch\af31505\loch\f2                         nb_it != nbset().end();
\par \hich\af2\dbch\af31505\loch\f2                         nb_it+\hich\af2\dbch\af31505\loch\f2 +)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     OLSR_nb_tuple* nb_tuple = *nb_it;
\par \hich\af2\dbch\af31505\loch\f2                     if (nb_tuple->nb_main_addr() == get_main_addr(link_tuple->nb_iface_addr()))
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par \hich\af2\dbch\af31505\loch\f2                         if (nb_tuple->getStatus() == OLSR_STATU\hich\af2\dbch\af31505\loch\f2 S_SYM)
\par \hich\af2\dbch\af31505\loch\f2                             nb_type = OLSR_SYM_NEIGH;
\par \hich\af2\dbch\af31505\loch\f2                         else if (nb_tuple->getStatus() == OLSR_STATUS_NOT_SYM)
\par \hich\af2\dbch\af31505\loch\f2                             nb_type = OLSR_NOT_NEIGH;
\par \hich\af2\dbch\af31505\loch\f2                         else
\par \hich\af2\dbch\af31505\loch\f2                         \{
\par \hich\af2\dbch\af31505\loch\f2                             error ("There is a neighbor tuple with an unknown status!");
\par \hich\af2\dbch\af31505\loch\f2                         \}
\par \hich\af2\dbch\af31505\loch\f2                         ok = true;
\par \hich\af2\dbch\af31505\loch\f2                         break;
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                 if (!ok)
\par \hich\af2\dbch\af31505\loch\f2           \hich\af2\dbch\af31505\loch\f2       \{
\par \hich\af2\dbch\af31505\loch\f2                     EV << "I don't know the neighbor " << get_main_addr(link_tuple->nb_iface_addr()) << "!!! \\n";
\par \hich\af2\dbch\af31505\loch\f2                     continue;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par 
\par \hich\af2\dbch\af31505\loch\f2             int count = msg.hello().count;
\par \hich\af2\dbch\af31505\loch\f2             link_code = (lin\hich\af2\dbch\af31505\loch\f2 k_type & 0x03) | ((nb_type << 2) & 0x0f);
\par \hich\af2\dbch\af31505\loch\f2             std::map<uint8_t, int>::iterator pos = linkcodes_count.find(link_code);
\par \hich\af2\dbch\af31505\loch\f2             if (pos == linkcodes_count.end())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 linkcodes_count[link_code] = count;
\par \hich\af2\dbch\af31505\loch\f2                 as\hich\af2\dbch\af31505\loch\f2 sert(count >= 0 && count < OLSR_MAX_HELLOS);
\par \hich\af2\dbch\af31505\loch\f2                 msg.hello().hello_msg(count).count = 0;
\par \hich\af2\dbch\af31505\loch\f2                 msg.hello().hello_msg(count).link_code() = link_code;
\par \hich\af2\dbch\af31505\loch\f2                 msg.hello().hello_msg(count).reserved() = 0;
\par \hich\af2\dbch\af31505\loch\f2                 msg.hell\hich\af2\dbch\af31505\loch\f2 o().count++;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2                 count = (*pos).second;
\par 
\par \hich\af2\dbch\af31505\loch\f2             int i = msg.hello().hello_msg(count).count;
\par \hich\af2\dbch\af31505\loch\f2             assert(count >= 0 && count < OLSR_MAX_HELLOS);
\par \hich\af2\dbch\af31505\loch\f2             assert(i >= 0 && i < OLSR_MAX_ADDRS);
\par 
\par \hich\af2\dbch\af31505\loch\f2             msg.hello().hello_msg(count).nb_iface_addr(i) =
\par \hich\af2\dbch\af31505\loch\f2                 link_tuple->nb_iface_addr();
\par \hich\af2\dbch\af31505\loch\f2             msg.hello().hello_msg(count).count++;
\par \hich\af2\dbch\af31505\loch\f2             msg.hello().hello_msg(count).link_msg_size() =
\par \hich\af2\dbch\af31505\loch\f2                 msg.hello().hello_msg(coun\hich\af2\dbch\af31505\loch\f2 t).size();
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     msg.msg_size() = msg.size();
\par 
\par \hich\af2\dbch\af31505\loch\f2     enque_msg(msg, JITTER);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Creates a new %OLSR TC message which is buffered to be sent later on.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::send_tc()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_msg msg;
\par \hich\af2\dbch\af31505\loch\f2     msg.msg_type() = OLSR_TC_MSG;
\par \hich\af2\dbch\af31505\loch\f2     msg.vtime() = OLSR::seconds_to_emf(OLSR_TOP_HOLD_TIME);
\par \hich\af2\dbch\af31505\loch\f2     msg.orig_addr() = ra_addr();
\par \hich\af2\dbch\af31505\loch\f2     msg.ttl() = 255;
\par \hich\af2\dbch\af31505\loch\f2     msg.hop_count() = 0;
\par \hich\af2\dbch\af31505\loch\f2     msg.msg_seq_num() = msg_seq();
\par 
\par \hich\af2\dbch\af31505\loch\f2     msg.tc().ansn() = ansn_;
\par \hich\af2\dbch\af31505\loch\f2     msg.tc().reserved() = 0;
\par \hich\af2\dbch\af31505\loch\f2     msg.tc().count = 0;
\par 
\par \hich\af2\dbch\af31505\loch\f2     for (mprselset_t::iterator it = mprselset().begin(); it != mprselset().end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_mprsel_tuple* mprsel_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2         int count = msg.tc().count;
\par 
\par \hich\af2\dbch\af31505\loch\f2         assert(count >= 0 && count < OLSR_MAX_ADDRS);
\par \hich\af2\dbch\af31505\loch\f2         msg.tc().nb_main_addr(count) = mprsel_tuple->main_addr();
\par \hich\af2\dbch\af31505\loch\f2         msg.tc().count++;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     msg.msg_size() = msg.size();
\par 
\par \hich\af2\dbch\af31505\loch\f2     enque_msg(msg, JITTER);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Creates a new %OLSR MID message which is buffered to be sent later on.
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 warning This message is never invoked because there is no support for multiple interfaces.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::send_mid()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (getNumWlanInterfaces() <= 1 && optimizedMid)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_msg msg;
\par \hich\af2\dbch\af31505\loch\f2     msg.msg_type() = OLSR_MID_MSG;
\par \hich\af2\dbch\af31505\loch\f2     msg.vtime() = OLSR::seconds_to_emf(OLSR_MID_HOLD_TIME);
\par \hich\af2\dbch\af31505\loch\f2     msg.orig_addr() = ra_addr();
\par \hich\af2\dbch\af31505\loch\f2     msg.ttl() = 255;
\par \hich\af2\dbch\af31505\loch\f2     msg.hop_count() = 0;
\par \hich\af2\dbch\af31505\loch\f2     msg.msg_seq_num() = msg_seq();
\par 
\par \hich\af2\dbch\af31505\loch\f2     msg.mid().count = 0;
\par \hich\af2\dbch\af31505\loch\f2     for (int i = 0; i< getNumWlanInterfaces(); i++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         int index = getWlanInterfaceIndex(i);
\par \hich\af2\dbch\af31505\loch\f2         nsaddr_t addr = getIfaceAddressFromIndex(index);
\par \hich\af2\dbch\af31505\loch\f2         msg.mid().setIface_addr(i,addr);
\par \hich\af2\dbch\af31505\loch\f2         msg.mid().count++;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     //foreach iface in this_node do
\par \hich\af2\dbch\af31505\loch\f2     //  msg.mid().iface_addr(i) = iface
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2    //  msg.mid().count++
\par \hich\af2\dbch\af31505\loch\f2     //done
\par 
\par \hich\af2\dbch\af31505\loch\f2     msg.msg_size() = msg.size();
\par 
\par \hich\af2\dbch\af31505\loch\f2     enque_msg(msg, JITTER);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief  Updates Link Set according to a new received HELLO message (following RFC 3626
\par \hich\af2\dbch\af31505\loch\f2 ///     specification). Neighbor Set is also updated if needed.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param msg the OLSR message which contains the HELLO message.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param receiver_iface the address of the interface where the message was received from.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param sender_iface the ad\hich\af2\dbch\af31505\loch\f2 dress of the interface where the message was sent from.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 bool
\par \hich\af2\dbch\af31505\loch\f2 OLSR::link_sensing(OLSR_msg& msg, const nsaddr_t &receiver_iface, const nsaddr_t &sender_iface, const int &index)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_hello& hello = msg.hello();
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par \hich\af2\dbch\af31505\loch\f2     boo\hich\af2\dbch\af31505\loch\f2 l updated = false;
\par \hich\af2\dbch\af31505\loch\f2     bool created = false;
\par 
\par \hich\af2\dbch\af31505\loch\f2     OLSR_link_tuple* link_tuple = state_.find_link_tuple(sender_iface);
\par \hich\af2\dbch\af31505\loch\f2     if (link_tuple == NULL)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         // We have to create a new tuple
\par \hich\af2\dbch\af31505\loch\f2         link_tuple = new OLSR_link_tuple;
\par \hich\af2\dbch\af31505\loch\f2         link_tuple->n\hich\af2\dbch\af31505\loch\f2 b_iface_addr() = sender_iface;
\par \hich\af2\dbch\af31505\loch\f2         link_tuple->local_iface_addr() = receiver_iface;
\par \hich\af2\dbch\af31505\loch\f2         link_tuple->local_iface_index() = index;
\par \hich\af2\dbch\af31505\loch\f2         link_tuple->sym_time() = now - 1;
\par \hich\af2\dbch\af31505\loch\f2         link_tuple->lost_time() = 0.0;
\par \hich\af2\dbch\af31505\loch\f2         link_tuple->time() = now + OLSR::emf_to_seconds(msg.vtime());
\par \hich\af2\dbch\af31505\loch\f2         add_link_tuple(link_tuple, hello.willingness());
\par \hich\af2\dbch\af31505\loch\f2         created = true;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         updated = true;
\par 
\par \hich\af2\dbch\af31505\loch\f2     link_tuple->asym_time() = now + OLSR::emf_to_seconds(msg.vtim\hich\af2\dbch\af31505\loch\f2 e());
\par \hich\af2\dbch\af31505\loch\f2     assert(hello.count >= 0 && hello.count <= OLSR_MAX_HELLOS);
\par \hich\af2\dbch\af31505\loch\f2     for (int i = 0; i < hello.count; i++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_hello_msg& hello_msg = hello.hello_msg(i);
\par \hich\af2\dbch\af31505\loch\f2         int lt = hello_msg.link_code() & 0x03;
\par \hich\af2\dbch\af31505\loch\f2         int nt = hello_msg.link_cod\hich\af2\dbch\af31505\loch\f2 e() >> 2;
\par 
\par \hich\af2\dbch\af31505\loch\f2         // We must not process invalid advertised links
\par \hich\af2\dbch\af31505\loch\f2         if ((lt == OLSR_SYM_LINK && nt == OLSR_NOT_NEIGH) ||
\par \hich\af2\dbch\af31505\loch\f2                 (nt != OLSR_SYM_NEIGH && nt != OLSR_MPR_NEIGH
\par \hich\af2\dbch\af31505\loch\f2                  && nt != OLSR_NOT_NEIGH))
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par 
\par \hich\af2\dbch\af31505\loch\f2         assert(hello_msg.count >= 0 && hello_msg.count <= OLSR_MAX_ADDRS);
\par \hich\af2\dbch\af31505\loch\f2         for (int j = 0; j < hello_msg.count; j++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (hello_msg.nb_iface_addr(j) == receiver_iface)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 if (lt == OLSR_LOST_LINK)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     link_tuple->sym_time() = now - 1;
\par \hich\af2\dbch\af31505\loch\f2                     updated = true;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                 else if (lt == OLSR_SYM_LINK || lt == OLSR_ASYM_LINK)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     link_tuple->sym_time()\hich\af2\dbch\af31505\loch\f2  =
\par \hich\af2\dbch\af31505\loch\f2                         now + OLSR::emf_to_seconds(msg.vtime());
\par \hich\af2\dbch\af31505\loch\f2                     link_tuple->time() =
\par \hich\af2\dbch\af31505\loch\f2                         link_tuple->sym_time() + OLSR_NEIGHB_HOLD_TIME;
\par \hich\af2\dbch\af31505\loch\f2                     link_tuple->lost_time() = 0.0;
\par \hich\af2\dbch\af31505\loch\f2                     upda\hich\af2\dbch\af31505\loch\f2 ted = true;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                 break;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     link_tuple->time() = MAX(link_tuple->time(), link_tuple->asym_time());
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (updated)
\par \hich\af2\dbch\af31505\loch\f2         updated_link_tuple(link_tuple, hello.willingness());
\par 
\par \hich\af2\dbch\af31505\loch\f2     // Schedules \hich\af2\dbch\af31505\loch\f2 link tuple deletion
\par \hich\af2\dbch\af31505\loch\f2     if (created && link_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_LinkTupleTimer* link_timer =
\par \hich\af2\dbch\af31505\loch\f2             new OLSR_LinkTupleTimer(this, link_tuple);
\par \hich\af2\dbch\af31505\loch\f2         link_timer->resched(DELAY(MIN(link_tuple->time(), link_tuple->sym_time())));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief  Updates the Neighbor Set according to the information contained in a new received
\par \hich\af2\dbch\af31505\loch\f2 ///     HELLO message (following RFC 3626).
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param msg the %OLSR message which contains the HELLO message.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 bool
\par \hich\af2\dbch\af31505\loch\f2 OLSR::populat\hich\af2\dbch\af31505\loch\f2 e_nbset(OLSR_msg& msg)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_hello& hello = msg.hello();
\par 
\par \hich\af2\dbch\af31505\loch\f2     OLSR_nb_tuple* nb_tuple = state_.find_nb_tuple(msg.orig_addr());
\par \hich\af2\dbch\af31505\loch\f2     if (nb_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2         nb_tuple->willingness() = hello.willingness();
\par \hich\af2\dbch\af31505\loch\f2     return false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief  Update\hich\af2\dbch\af31505\loch\f2 s the 2-hop Neighbor Set according to the information contained in a new
\par \hich\af2\dbch\af31505\loch\f2 ///     received HELLO message (following RFC 3626).
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param msg the %OLSR message which contains the HELLO message.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 bool
\par \hich\af2\dbch\af31505\loch\f2 OLSR::populate_nb2hopset(OLSR_msg& msg)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_hello& hello = msg.hello();
\par 
\par \hich\af2\dbch\af31505\loch\f2     for (linkset_t::iterator it_lt = linkset().begin(); it_lt != linkset().end(); it_lt++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_link_tuple* link_tuple = *it_lt;
\par \hich\af2\dbch\af31505\loch\f2         if (get_main_addr(link_tuple->nb_ifa\hich\af2\dbch\af31505\loch\f2 ce_addr()) == msg.orig_addr())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (link_tuple->sym_time() >= now)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 assert(hello.count >= 0 && hello.count <= OLSR_MAX_HELLOS);
\par \hich\af2\dbch\af31505\loch\f2                 for (int i = 0; i < hello.count; i++)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2               OLSR_hello_msg& hello_msg = hello.hello_msg(i);
\par \hich\af2\dbch\af31505\loch\f2                     int nt = hello_msg.link_code() >> 2;
\par \hich\af2\dbch\af31505\loch\f2                     assert(hello_msg.count >= 0 &&
\par \hich\af2\dbch\af31505\loch\f2                            hello_msg.count <= OLSR_MAX_ADDRS);
\par 
\par \hich\af2\dbch\af31505\loch\f2                     fo\hich\af2\dbch\af31505\loch\f2 r (int j = 0; j < hello_msg.count; j++)
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par \hich\af2\dbch\af31505\loch\f2                         nsaddr_t nb2hop_addr = get_main_addr(hello_msg.nb_iface_addr(j));
\par \hich\af2\dbch\af31505\loch\f2                         if (nt == OLSR_SYM_NEIGH || nt == OLSR_MPR_NEIGH)
\par \hich\af2\dbch\af31505\loch\f2                         \{
\par \hich\af2\dbch\af31505\loch\f2     \hich\af2\dbch\af31505\loch\f2                         // if the main address of the 2-hop
\par \hich\af2\dbch\af31505\loch\f2                             // neighbor address = main address of
\par \hich\af2\dbch\af31505\loch\f2                             // the receiving node: silently
\par \hich\af2\dbch\af31505\loch\f2                             // discard the 2-hop neighbor address
\par \hich\af2\dbch\af31505\loch\f2                             if (nb2hop_addr != ra_addr())
\par \hich\af2\dbch\af31505\loch\f2                             \{
\par \hich\af2\dbch\af31505\loch\f2                                 // Otherwise, a 2-hop tuple is created
\par \hich\af2\dbch\af31505\loch\f2                                 OLSR_nb2hop_tuple* nb2hop_tuple =
\par \hich\af2\dbch\af31505\loch\f2                                \hich\af2\dbch\af31505\loch\f2      state_.find_nb2hop_tuple(msg.orig_addr(), nb2hop_addr);
\par \hich\af2\dbch\af31505\loch\f2                                 if (nb2hop_tuple == NULL)
\par \hich\af2\dbch\af31505\loch\f2                                 \{
\par \hich\af2\dbch\af31505\loch\f2                                     nb2hop_tuple =
\par \hich\af2\dbch\af31505\loch\f2                                         new OLSR_nb2\hich\af2\dbch\af31505\loch\f2 hop_tuple;
\par \hich\af2\dbch\af31505\loch\f2                                     nb2hop_tuple->nb_main_addr() =
\par \hich\af2\dbch\af31505\loch\f2                                         msg.orig_addr();
\par \hich\af2\dbch\af31505\loch\f2                                     nb2hop_tuple->nb2hop_addr() =
\par \hich\af2\dbch\af31505\loch\f2                                         nb2hop_addr;
\par \hich\af2\dbch\af31505\loch\f2   \hich\af2\dbch\af31505\loch\f2                                   add_nb2hop_tuple(nb2hop_tuple);
\par \hich\af2\dbch\af31505\loch\f2                                     nb2hop_tuple->time() =
\par \hich\af2\dbch\af31505\loch\f2                                         now + OLSR::emf_to_seconds(msg.vtime());
\par \hich\af2\dbch\af31505\loch\f2                                     // Schedules n\hich\af2\dbch\af31505\loch\f2 b2hop tuple
\par \hich\af2\dbch\af31505\loch\f2                                     // deletion
\par \hich\af2\dbch\af31505\loch\f2                                     OLSR_Nb2hopTupleTimer* nb2hop_timer =
\par \hich\af2\dbch\af31505\loch\f2                                         new OLSR_Nb2hopTupleTimer(this, nb2hop_tuple);
\par \hich\af2\dbch\af31505\loch\f2                                    \hich\af2\dbch\af31505\loch\f2  nb2hop_timer->resched(DELAY(nb2hop_tuple->time()));
\par \hich\af2\dbch\af31505\loch\f2                                 \}
\par \hich\af2\dbch\af31505\loch\f2                                 else
\par \hich\af2\dbch\af31505\loch\f2                                 \{
\par \hich\af2\dbch\af31505\loch\f2                                     nb2hop_tuple->time() =
\par \hich\af2\dbch\af31505\loch\f2                                        \hich\af2\dbch\af31505\loch\f2  now + OLSR::emf_to_seconds(msg.vtime());
\par \hich\af2\dbch\af31505\loch\f2                                 \}
\par 
\par \hich\af2\dbch\af31505\loch\f2                             \}
\par \hich\af2\dbch\af31505\loch\f2                         \}
\par \hich\af2\dbch\af31505\loch\f2                         else if (nt == OLSR_NOT_NEIGH)
\par \hich\af2\dbch\af31505\loch\f2                         \{
\par \hich\af2\dbch\af31505\loch\f2                             // For each 2-hop node listed in the HELLO
\par \hich\af2\dbch\af31505\loch\f2                             // message with Neighbor Type equal to
\par \hich\af2\dbch\af31505\loch\f2                             // NOT_NEIGH all 2-hop tuples where:
\par \hich\af2\dbch\af31505\loch\f2                             // N_neighbor_main_addr =\hich\af2\dbch\af31505\loch\f2 = Originator
\par \hich\af2\dbch\af31505\loch\f2                             // Address AND N_2hop_addr  == main address
\par \hich\af2\dbch\af31505\loch\f2                             // of the 2-hop neighbor are deleted.
\par \hich\af2\dbch\af31505\loch\f2                             state_.erase_nb2hop_tuples(msg.orig_addr(),
\par \hich\af2\dbch\af31505\loch\f2                                  \hich\af2\dbch\af31505\loch\f2                       nb2hop_addr);
\par \hich\af2\dbch\af31505\loch\f2                         \}
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief  Updates the MPR Selector Set according to the information contained in a new
\par \hich\af2\dbch\af31505\loch\f2 ///     re\hich\af2\dbch\af31505\loch\f2 ceived HELLO message (following RFC 3626).
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param msg the %OLSR message which contains the HELLO message.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::populate_mprselset(OLSR_msg& msg)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par \hich\af2\dbch\af31505\loch\f2     OLSR_hello& hello = msg.hello();
\par 
\par \hich\af2\dbch\af31505\loch\f2     assert(hello.count >= 0 && hello.count <= OLSR_MAX_HELLOS);
\par \hich\af2\dbch\af31505\loch\f2     for (int i = 0; i < hello.count; i++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_hello_msg& hello_msg = hello.hello_msg(i);
\par \hich\af2\dbch\af31505\loch\f2         int nt = hello_msg.link_code() >> 2;
\par \hich\af2\dbch\af31505\loch\f2         if (nt == OLSR_MPR_NEIGH)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             assert(hello_msg.count >= 0 && hello_msg.count <= OLSR_MAX_ADDRS);
\par \hich\af2\dbch\af31505\loch\f2             for (int j = 0; j < hello_msg.count; j++)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 if (get_main_addr(hello_msg.nb_iface_addr(j)) == ra_addr())
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2               \hich\af2\dbch\af31505\loch\f2       // We must create a new entry into the mpr selector set
\par \hich\af2\dbch\af31505\loch\f2                     OLSR_mprsel_tuple* mprsel_tuple =
\par \hich\af2\dbch\af31505\loch\f2                         state_.find_mprsel_tuple(msg.orig_addr());
\par \hich\af2\dbch\af31505\loch\f2                     if (mprsel_tuple == NULL)
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par \hich\af2\dbch\af31505\loch\f2      \hich\af2\dbch\af31505\loch\f2                    mprsel_tuple = new OLSR_mprsel_tuple;
\par \hich\af2\dbch\af31505\loch\f2                         mprsel_tuple->main_addr() = msg.orig_addr();
\par \hich\af2\dbch\af31505\loch\f2                         mprsel_tuple->time() =
\par \hich\af2\dbch\af31505\loch\f2                             now + OLSR::emf_to_seconds(msg.vtime());
\par \hich\af2\dbch\af31505\loch\f2                         add_mprsel_tuple(mprsel_tuple);
\par \hich\af2\dbch\af31505\loch\f2                         // Schedules mpr selector tuple deletion
\par \hich\af2\dbch\af31505\loch\f2                         OLSR_MprSelTupleTimer* mprsel_timer =
\par \hich\af2\dbch\af31505\loch\f2                             new OLSR_MprSelTupleTimer(this, mprsel_tuple)\hich\af2\dbch\af31505\loch\f2 ;
\par \hich\af2\dbch\af31505\loch\f2                         mprsel_timer->resched(DELAY(mprsel_tuple->time()));
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                     else
\par \hich\af2\dbch\af31505\loch\f2                         mprsel_tuple->time() =
\par \hich\af2\dbch\af31505\loch\f2                             now + OLSR::emf_to_seconds(msg.vtime());
\par \hich\af2\dbch\af31505\loch\f2                \hich\af2\dbch\af31505\loch\f2  \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief  Drops a given packet because it couldn't be delivered to the corresponding
\par \hich\af2\dbch\af31505\loch\f2 ///     destination by the MAC layer. This may cause a neighbor loss, and appropiate
\par \hich\af2\dbch\af31505\loch\f2 ///     actions are then taken.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\par\hich\af2\dbch\af31505\loch\f2 am p the packet which couldn't be delivered by the MAC layer.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::mac_failed(IPv4Datagram* p)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     nsaddr_t dest_addr = ManetAddress(p->getDestAddress());
\par 
\par \hich\af2\dbch\af31505\loch\f2     EV <<"Node " << OLSR::node_id(ra_addr()) << "MAC Layer detects a breakage on link to "  <<
\par \hich\af2\dbch\af31505\loch\f2     OLSR::node_id(dest_addr);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (dest_addr == ManetAddress(IPv4Address(IP_BROADCAST)))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     OLSR_rt_entry*  entry = rtable_.loo\hich\af2\dbch\af31505\loch\f2 kup(dest_addr);
\par \hich\af2\dbch\af31505\loch\f2     if (entry)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_link_tuple* link_tuple = state_.find_link_tuple(entry->next_addr());
\par \hich\af2\dbch\af31505\loch\f2         if (link_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             link_tuple->lost_time() = now + OLSR_NEIGHB_HOLD_TIME;
\par \hich\af2\dbch\af31505\loch\f2             link_tuple->time\hich\af2\dbch\af31505\loch\f2 () = now + OLSR_NEIGHB_HOLD_TIME;
\par \hich\af2\dbch\af31505\loch\f2             nb_loss(link_tuple);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     deleteIpEntry(dest_addr);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Schedule the timer used for sending HELLO messages.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::set_hello_timer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     hello_timer_.resched(he\hich\af2\dbch\af31505\loch\f2 llo_ival() - JITTER);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Schedule the timer used for sending TC messages.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::set_tc_timer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     tc_timer_.resched(tc_ival() - JITTER);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Schedule the timer used for sending MID messages.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::set_mid_t\hich\af2\dbch\af31505\loch\f2 imer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     mid_timer_.resched(mid_ival() - JITTER);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Performs all actions needed when a neighbor loss occurs.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// Neighbor Set, 2-hop Neighbor Set, MPR Set and MPR Selector Set are updated.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 param tuple link tuple with the information of the link to the neighbor which has been lost.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::nb_loss(OLSR_link_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s detects neighbor %s loss\\n",
\par \hich\af2\dbch\af31505\loch\f2           CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2     getNodeId(tuple->nb_iface_addr()));
\par 
\par \hich\af2\dbch\af31505\loch\f2     updated_link_tuple(tuple,OLSR_WILL_DEFAULT);
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_nb2hop_tuples(get_main_addr(tuple->nb_iface_addr()));
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_mprsel_tuples(get_main_addr(tuple->nb_iface_addr()));
\par 
\par \hich\af2\dbch\af31505\loch\f2     mpr_computation();
\par \hich\af2\dbch\af31505\loch\f2     rtable_computation();
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Adds a duplicate tuple to the Duplicate Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param tuple the duplicate tuple to be added.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::add_dup_tuple(OLSR_dup_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     /*debug("%f: Node %d adds dup tuple: addr = %d seq_num \hich\af2\dbch\af31505\loch\f2 = %d\\n",
\par \hich\af2\dbch\af31505\loch\f2         CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2         OLSR::node_id(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2         OLSR::node_id(tuple->getAddr()),
\par \hich\af2\dbch\af31505\loch\f2         tuple->seq_num());*/
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.insert_dup_tuple(tuple);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes a duplicate tuple from the Duplicate Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 param tuple the duplicate tuple to be removed.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::rm_dup_tuple(OLSR_dup_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     /*debug("%f: Node %d removes dup tuple: addr = %d seq_num = %d\\n",
\par \hich\af2\dbch\af31505\loch\f2         CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2         OLSR::node_id(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2         OLSR::node_id(tuple->\hich\af2\dbch\af31505\loch\f2 getAddr()),
\par \hich\af2\dbch\af31505\loch\f2         tuple->seq_num());*/
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_dup_tuple(tuple);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Adds a link tuple to the Link Set (and an associated neighbor tuple to the Neighbor Set).
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param tuple the link tuple to be added.
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 param willingness willingness of the node which is going to be inserted in the Neighbor Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::add_link_tuple(OLSR_link_tuple* tuple, uint8_t  willingness)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par 
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s adds link tuple: nb_addr = %s\\\hich\af2\dbch\af31505\loch\f2 n",
\par \hich\af2\dbch\af31505\loch\f2           now,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->nb_iface_addr()));
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.insert_link_tuple(tuple);
\par \hich\af2\dbch\af31505\loch\f2     // Creates associated neighbor tuple
\par \hich\af2\dbch\af31505\loch\f2     OLSR_nb_tuple* nb_tuple = new OLSR_nb_tuple;
\par \hich\af2\dbch\af31505\loch\f2     nb_tuple->nb_main_addr() = \hich\af2\dbch\af31505\loch\f2 get_main_addr(tuple->nb_iface_addr());
\par \hich\af2\dbch\af31505\loch\f2     nb_tuple->willingness() = willingness;
\par \hich\af2\dbch\af31505\loch\f2     if (tuple->sym_time() >= now)
\par \hich\af2\dbch\af31505\loch\f2         nb_tuple->getStatus() = OLSR_STATUS_SYM;
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         nb_tuple->getStatus() = OLSR_STATUS_NOT_SYM;
\par \hich\af2\dbch\af31505\loch\f2     add_nb_tuple(nb_tuple);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes a link tuple from the Link Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param tuple the link tuple to be removed.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::rm_link_tuple(OLSR_link_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     nsaddr_t nb_addr = get_main_addr(tuple->nb_iface_addr());
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par 
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s removes link tuple: nb_addr = %s\\n",
\par \hich\af2\dbch\af31505\loch\f2           now,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->nb_iface_addr()));
\par \hich\af2\dbch\af31505\loch\f2     // Prints this here cause we are not actually calling rm_nb_tuple() (efficiency stuff)
\par \hich\af2\dbch\af31505\loch\f2     debug("\hich\af2\dbch\af31505\loch\f2 %f: Node %s removes neighbor tuple: nb_addr = %s\\n",
\par \hich\af2\dbch\af31505\loch\f2           now,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(nb_addr));
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_link_tuple(tuple);
\par 
\par \hich\af2\dbch\af31505\loch\f2     OLSR_nb_tuple* nb_tuple = state_.find_nb_tuple(nb_addr);
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_nb_tuple(\hich\af2\dbch\af31505\loch\f2 nb_tuple);
\par \hich\af2\dbch\af31505\loch\f2     delete nb_tuple;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief  This function is invoked when a link tuple is updated. Its aim is to
\par \hich\af2\dbch\af31505\loch\f2 ///     also update the corresponding neighbor tuple if it is needed.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param tuple the link tuple which has been updated.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::updated_link_tuple(OLSR_link_tuple* tuple, uint8_t willingness)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par 
\par \hich\af2\dbch\af31505\loch\f2     // Each time a link tuple changes, the associated neighbor tuple must be recomputed
\par \hich\af2\dbch\af31505\loch\f2     OLSR_nb_tuple* nb_tuple = find_or_add_nb(tuple, willing\hich\af2\dbch\af31505\loch\f2 ness);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (nb_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (use_mac() && tuple->lost_time() >= now)
\par \hich\af2\dbch\af31505\loch\f2             nb_tuple->getStatus() = OLSR_STATUS_NOT_SYM;
\par \hich\af2\dbch\af31505\loch\f2         else if (tuple->sym_time() >= now)
\par \hich\af2\dbch\af31505\loch\f2             nb_tuple->getStatus() = OLSR_STATUS_SYM;
\par \hich\af2\dbch\af31505\loch\f2         els\hich\af2\dbch\af31505\loch\f2 e
\par \hich\af2\dbch\af31505\loch\f2             nb_tuple->getStatus() = OLSR_STATUS_NOT_SYM;
\par 
\par \hich\af2\dbch\af31505\loch\f2         debug("%f: Node %s has updated link tuple: nb_addr = %s status = %s\\n", now, getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2                 getNodeId(tuple->nb_iface_addr()), ((nb_tuple->getStatus() == OLSR_STATUS\hich\af2\dbch\af31505\loch\f2 _SYM) ? "sym" : "not_sym"));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par \hich\af2\dbch\af31505\loch\f2 // Auxiliary method
\par \hich\af2\dbch\af31505\loch\f2 // add NB based in the link tuple information if the Nb doen't exist
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR_nb_tuple* OLSR::find_or_add_nb(OLSR_link_tuple* tuple, uint8_t willingness)
\par \{
\par \hich\af2\dbch\af31505\loch\f2   \hich\af2\dbch\af31505\loch\f2   OLSR_nb_tuple* nb_tuple = state_.find_nb_tuple(get_main_addr(tuple->nb_iface_addr()));
\par \hich\af2\dbch\af31505\loch\f2     if (nb_tuple == NULL)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         double now = CURRENT_TIME;
\par \hich\af2\dbch\af31505\loch\f2         state_.erase_nb_tuple(tuple->nb_iface_addr());
\par \hich\af2\dbch\af31505\loch\f2         // Creates associated neighbor tuple
\par \hich\af2\dbch\af31505\loch\f2         nb_tuple = new OLSR_nb_tuple;
\par \hich\af2\dbch\af31505\loch\f2         nb_tuple->nb_main_addr() = get_main_addr(tuple->nb_iface_addr());
\par \hich\af2\dbch\af31505\loch\f2         nb_tuple->willingness() = willingness;
\par \hich\af2\dbch\af31505\loch\f2         if (tuple->sym_time() >= now)
\par \hich\af2\dbch\af31505\loch\f2             nb_tuple->getStatus() = OLSR_STATUS_SYM;
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2   else
\par \hich\af2\dbch\af31505\loch\f2             nb_tuple->getStatus() = OLSR_STATUS_NOT_SYM;
\par \hich\af2\dbch\af31505\loch\f2         add_nb_tuple(nb_tuple);
\par \hich\af2\dbch\af31505\loch\f2         nb_tuple = state_.find_nb_tuple(get_main_addr(tuple->nb_iface_addr()));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return nb_tuple;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Adds a neighbor tuple to the Neighb\hich\af2\dbch\af31505\loch\f2 or Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param tuple the neighbor tuple to be added.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::add_nb_tuple(OLSR_nb_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s adds neighbor tuple: nb_addr = %s status = %s\\n",
\par \hich\af2\dbch\af31505\loch\f2           CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->nb_main_addr()),
\par \hich\af2\dbch\af31505\loch\f2           ((tuple->getStatus() == OLSR_STATUS_SYM) ? "sym" : "not_sym"));
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_nb_tuple(tuple->nb_main_addr());
\par \hich\af2\dbch\af31505\loch\f2     state_.insert_nb_tuple(tuple);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes a neighbor tuple from the N\hich\af2\dbch\af31505\loch\f2 eighbor Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param tuple the neighbor tuple to be removed.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::rm_nb_tuple(OLSR_nb_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s removes neighbor tuple: nb_addr = %s status = %s\\n",
\par \hich\af2\dbch\af31505\loch\f2           CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2      \hich\af2\dbch\af31505\loch\f2      getNodeId(tuple->nb_main_addr()),
\par \hich\af2\dbch\af31505\loch\f2           ((tuple->getStatus() == OLSR_STATUS_SYM) ? "sym" : "not_sym"));
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_nb_tuple(tuple);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Adds a 2-hop neighbor tuple to the 2-hop Neighbor Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\p\hich\af2\dbch\af31505\loch\f2 aram tuple the 2-hop neighbor tuple to be added.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::add_nb2hop_tuple(OLSR_nb2hop_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s adds 2-hop neighbor tuple: nb_addr = %s nb2hop_addr = %s\\n",
\par \hich\af2\dbch\af31505\loch\f2           CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2        \hich\af2\dbch\af31505\loch\f2    getNodeId(tuple->nb_main_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->nb2hop_addr()));
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.insert_nb2hop_tuple(tuple);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes a 2-hop neighbor tuple from the 2-hop Neighbor Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param tuple the 2-hop neighbor tuple to be remov\hich\af2\dbch\af31505\loch\f2 ed.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::rm_nb2hop_tuple(OLSR_nb2hop_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s removes 2-hop neighbor tuple: nb_addr = %s nb2hop_addr = %s\\n",
\par \hich\af2\dbch\af31505\loch\f2           CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->nb_main_addr()),
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2     getNodeId(tuple->nb2hop_addr()));
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_nb2hop_tuple(tuple);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Adds an MPR selector tuple to the MPR Selector Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// Advertised Neighbor Sequence Number (ANSN) is also updated.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 param tuple the MPR selector tuple to be added.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::add_mprsel_tuple(OLSR_mprsel_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s adds MPR selector tuple: nb_addr = %s\\n",
\par \hich\af2\dbch\af31505\loch\f2           CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->\hich\af2\dbch\af31505\loch\f2 main_addr()));
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.insert_mprsel_tuple(tuple);
\par \hich\af2\dbch\af31505\loch\f2     ansn_ = (ansn_ + 1)%(OLSR_MAX_SEQ_NUM + 1);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes an MPR selector tuple from the MPR Selector Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// Advertised Neighbor Sequence Number (ANSN) is also updated.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\p\hich\af2\dbch\af31505\loch\f2 aram tuple the MPR selector tuple to be removed.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::rm_mprsel_tuple(OLSR_mprsel_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s removes MPR selector tuple: nb_addr = %s\\n",
\par \hich\af2\dbch\af31505\loch\f2           CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->main_addr()));
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_mprsel_tuple(tuple);
\par \hich\af2\dbch\af31505\loch\f2     ansn_ = (ansn_ + 1)%(OLSR_MAX_SEQ_NUM + 1);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Adds a topology tuple to the Topology Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param tuple the topology tuple to be added.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR\hich\af2\dbch\af31505\loch\f2 ::add_topology_tuple(OLSR_topology_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s adds topology tuple: dest_addr = %s last_addr = %s seq = %d\\n",
\par \hich\af2\dbch\af31505\loch\f2           CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->dest_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(t\hich\af2\dbch\af31505\loch\f2 uple->last_addr()),
\par \hich\af2\dbch\af31505\loch\f2           tuple->seq());
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.insert_topology_tuple(tuple);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes a topology tuple from the Topology Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param tuple the topology tuple to be removed.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::rm_topology_tuple(OLSR_topology_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s removes topology tuple: dest_addr = %s last_addr = %s seq = %d\\n",
\par \hich\af2\dbch\af31505\loch\f2           CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->dest_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNo\hich\af2\dbch\af31505\loch\f2 deId(tuple->last_addr()),
\par \hich\af2\dbch\af31505\loch\f2           tuple->seq());
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_topology_tuple(tuple);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Adds an interface association tuple to the Interface Association Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param tuple the interface association tuple to be added.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 O\hich\af2\dbch\af31505\loch\f2 LSR::add_ifaceassoc_tuple(OLSR_iface_assoc_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s adds iface association tuple: main_addr = %s iface_addr = %s\\n",
\par \hich\af2\dbch\af31505\loch\f2           CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->main_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->iface_addr()));
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.insert_ifaceassoc_tuple(tuple);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Removes an interface association tuple from the Interface Association Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param tuple the interface association tuple to be removed.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 void
\par \hich\af2\dbch\af31505\loch\f2 OLSR::rm_ifaceassoc_tuple(OLSR_iface_assoc_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     debug("%f: Node %s removes iface association tuple: main_addr = %s iface_addr = %s\\n",
\par \hich\af2\dbch\af31505\loch\f2           CURRENT_TIME,
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(ra_addr()),
\par \hich\af2\dbch\af31505\loch\f2           getNodeId(tuple->main_addr()),
\par \hich\af2\dbch\af31505\loch\f2         \hich\af2\dbch\af31505\loch\f2   getNodeId(tuple->iface_addr()));
\par 
\par \hich\af2\dbch\af31505\loch\f2     state_.erase_ifaceassoc_tuple(tuple);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Gets the main address associated with a given interface address.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param iface_addr the interface address.
\par \hich\af2\dbch\af31505\loch\f2 /// \\return the corresponding main address.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 const nsaddr_t &
\par \hich\af2\dbch\af31505\loch\f2 OLSR::get_main_addr(const nsaddr_t &iface_addr) const
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_iface_assoc_tuple* tuple =
\par \hich\af2\dbch\af31505\loch\f2         state_.find_ifaceassoc_tuple(iface_addr);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2         return tuple->main_addr();
\par \hich\af2\dbch\af31505\loch\f2     return iface_addr;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 brief Determines which sequence number is bigger (as it is defined in RFC 3626).
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param s1 a sequence number.
\par \hich\af2\dbch\af31505\loch\f2 /// \\param s2 a sequence number.
\par \hich\af2\dbch\af31505\loch\f2 /// \\return true if s1 > s2, false in other case.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 bool
\par \hich\af2\dbch\af31505\loch\f2 OLSR::seq_num_bigger_than(uint16_t s1, uint16\hich\af2\dbch\af31505\loch\f2 _t s2)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return (s1 > s2 && s1-s2 <= OLSR_MAX_SEQ_NUM/2)
\par \hich\af2\dbch\af31505\loch\f2            || (s2 > s1 && s2-s1 > OLSR_MAX_SEQ_NUM/2);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief This auxiliary function (defined in RFC 3626) is used for calculating the MPR Set.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 param tuple the neighbor tuple which has the main address of the node we are going to calculate its degree to.
\par \hich\af2\dbch\af31505\loch\f2 /// \\return the degree of the node.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 int
\par \hich\af2\dbch\af31505\loch\f2 OLSR::degree(OLSR_nb_tuple* tuple)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     int degree = 0;
\par \hich\af2\dbch\af31505\loch\f2     for (nb2hopset_t::iterator it = nb2hopse\hich\af2\dbch\af31505\loch\f2 t().begin(); it != nb2hopset().end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_nb2hop_tuple* nb2hop_tuple = *it;
\par \hich\af2\dbch\af31505\loch\f2         if (nb2hop_tuple->nb_main_addr() == tuple->nb_main_addr())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             //OLSR_nb_tuple* nb_tuple =
\par \hich\af2\dbch\af31505\loch\f2             //    state_.find_nb_tuple(nb2\hich\af2\dbch\af31505\loch\f2 hop_tuple->nb_main_addr());
\par \hich\af2\dbch\af31505\loch\f2             OLSR_nb_tuple* nb_tuple = state_.find_nb_tuple(nb2hop_tuple->nb2hop_addr());
\par \hich\af2\dbch\af31505\loch\f2             if (nb_tuple == NULL)
\par \hich\af2\dbch\af31505\loch\f2                 degree++;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return degree;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 brief Converts a decimal number of seconds to the mantissa/exponent format.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param seconds decimal number of seconds we want to convert.
\par \hich\af2\dbch\af31505\loch\f2 /// \\return the number of seconds in mantissa/exponent format.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 uint8_t
\par \hich\af2\dbch\af31505\loch\f2 OLSR::seconds_to_emf(double seconds)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     // This implementation has been taken from unik-olsrd-0.4.5 (mantissa.c),
\par \hich\af2\dbch\af31505\loch\f2     // licensed under the GNU Public License (GPL)
\par 
\par \hich\af2\dbch\af31505\loch\f2     int a, b = 0;
\par \hich\af2\dbch\af31505\loch\f2     while (seconds/OLSR_C >= pow((double)2, (double)b))
\par \hich\af2\dbch\af31505\loch\f2         b++;
\par \hich\af2\dbch\af31505\loch\f2     b--;
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (b < 0)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2      \hich\af2\dbch\af31505\loch\f2    a = 1;
\par \hich\af2\dbch\af31505\loch\f2         b = 0;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else if (b > 15)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         a = 15;
\par \hich\af2\dbch\af31505\loch\f2         b = 15;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         a = (int)(16*((double)seconds/(OLSR_C*(double)pow((double)2, b))-1));
\par \hich\af2\dbch\af31505\loch\f2         while (a >= 16)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             a -= 16;
\par \hich\af2\dbch\af31505\loch\f2             b++;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     return (uint8_t)(a*16+b);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Converts a number of seconds in the mantissa/exponent format to a decimal number.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param olsr_format number of seconds in mantissa/exponent format.
\par \hich\af2\dbch\af31505\loch\f2 /// \\return the de\hich\af2\dbch\af31505\loch\f2 cimal number of seconds.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 double
\par \hich\af2\dbch\af31505\loch\f2 OLSR::emf_to_seconds(uint8_t olsr_format)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     // This implementation has been taken from unik-olsrd-0.4.5 (mantissa.c),
\par \hich\af2\dbch\af31505\loch\f2     // licensed under the GNU Public License (GPL)
\par \hich\af2\dbch\af31505\loch\f2     int a = olsr_format >> 4;
\par \hich\af2\dbch\af31505\loch\f2     int b = olsr_\hich\af2\dbch\af31505\loch\f2 format - a*16;
\par \hich\af2\dbch\af31505\loch\f2     return (double)(OLSR_C*(1+(double)a/16)*(double)pow((double)2, b));
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\brief Returns the identifier of a node given the address of the attached OLSR agent.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 /// \\param addr the address of the OLSR routing agent.
\par \hich\af2\dbch\af31505\loch\f2 /// \\\hich\af2\dbch\af31505\loch\f2 return the identifier of the node.
\par \hich\af2\dbch\af31505\loch\f2 ///
\par \hich\af2\dbch\af31505\loch\f2 int
\par \hich\af2\dbch\af31505\loch\f2 OLSR::node_id(const nsaddr_t &addr)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return addr.getIPv4().getInt();
\par \hich\af2\dbch\af31505\loch\f2     /*
\par \hich\af2\dbch\af31505\loch\f2         // Preventing a bad use for this function
\par \hich\af2\dbch\af31505\loch\f2             if ((uint32_t)addr == IP_BROADCAST)
\par \hich\af2\dbch\af31505\loch\f2             return addr;
\par \hich\af2\dbch\af31505\loch\f2         /\hich\af2\dbch\af31505\loch\f2 / Getting node id
\par \hich\af2\dbch\af31505\loch\f2         Node* node = Node::get_node_by_address(addr);
\par \hich\af2\dbch\af31505\loch\f2         assert(node != NULL);
\par \hich\af2\dbch\af31505\loch\f2         return node->nodeid();
\par \hich\af2\dbch\af31505\loch\f2     */
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 const char * OLSR::getNodeId(const nsaddr_t &addr)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return addr.str().c_str();
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 // Interfaces with other I\hich\af2\dbch\af31505\loch\f2 net
\par \hich\af2\dbch\af31505\loch\f2 void OLSR:: processLinkBreak(const cObject *details)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (use_mac())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (dynamic_cast<IPv4Datagram *>(const_cast<cObject*>(details)))
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             IPv4Datagram * dgram = const_cast<IPv4Data\hich\af2\dbch\af31505\loch\f2 gram *>(check_and_cast<const IPv4Datagram *>(details));
\par \hich\af2\dbch\af31505\loch\f2             mac_failed(dgram);
\par \hich\af2\dbch\af31505\loch\f2             return;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void OLSR::finish()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     /*
\par \hich\af2\dbch\af31505\loch\f2     rtable_.clear();
\par \hich\af2\dbch\af31505\loch\f2     msgs_.clear();
\par \hich\af2\dbch\af31505\loch\f2     delete state_ptr;
\par \hich\af2\dbch\af31505\loch\f2     state_ptr=NULL;
\par \hich\af2\dbch\af31505\loch\f2     cancelAndDelete\hich\af2\dbch\af31505\loch\f2 (&hello_timer_);
\par \hich\af2\dbch\af31505\loch\f2     cancelAndDelete(&tc_timer_);
\par \hich\af2\dbch\af31505\loch\f2     cancelAndDelete(&mid_timer_);
\par 
\par \hich\af2\dbch\af31505\loch\f2     helloTimer= NULL;   ///< Timer for sending HELLO messages.
\par \hich\af2\dbch\af31505\loch\f2     tcTimer= NULL;  ///< Timer for sending TC messages.
\par \hich\af2\dbch\af31505\loch\f2     midTimer = NULL;    ///< Timer for sending MID m\hich\af2\dbch\af31505\loch\f2 essages.
\par \hich\af2\dbch\af31505\loch\f2     */
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 OLSR::~OLSR()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     rtable_.clear();
\par \hich\af2\dbch\af31505\loch\f2     msgs_.clear();
\par \hich\af2\dbch\af31505\loch\f2     if (state_ptr)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete state_ptr;
\par \hich\af2\dbch\af31505\loch\f2         state_ptr = NULL;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     /*
\par \hich\af2\dbch\af31505\loch\f2         mprset().clear();
\par \hich\af2\dbch\af31505\loch\f2         mprselset().clear();
\par \hich\af2\dbch\af31505\loch\f2         linkset().clear();
\par \hich\af2\dbch\af31505\loch\f2         nbset().clear();
\par \hich\af2\dbch\af31505\loch\f2         nb2hopset().clear();
\par \hich\af2\dbch\af31505\loch\f2         topologyset().clear();
\par \hich\af2\dbch\af31505\loch\f2         dupset().clear();
\par \hich\af2\dbch\af31505\loch\f2         ifaceassocset().clear();
\par \hich\af2\dbch\af31505\loch\f2     */
\par \hich\af2\dbch\af31505\loch\f2     /*
\par \hich\af2\dbch\af31505\loch\f2         if (&hello_timer_!=NULL)
\par \hich\af2\dbch\af31505\loch\f2             cancelAndDelete(&hello_timer_);
\par \hich\af2\dbch\af31505\loch\f2         if (&tc_timer\hich\af2\dbch\af31505\loch\f2 _!=NULL)
\par \hich\af2\dbch\af31505\loch\f2             cancelAndDelete(&tc_timer_);
\par \hich\af2\dbch\af31505\loch\f2         if (&mid_timer_!=NULL)
\par \hich\af2\dbch\af31505\loch\f2             cancelAndDelete(&mid_timer_);
\par \hich\af2\dbch\af31505\loch\f2     */
\par \hich\af2\dbch\af31505\loch\f2     if (timerMessage)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         cancelAndDelete(timerMessage);
\par \hich\af2\dbch\af31505\loch\f2         timerMessage = NULL;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     while (timerQueuePtr && timerQueuePtr->size()>0)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_Timer * timer = timerQueuePtr->begin()->second;
\par \hich\af2\dbch\af31505\loch\f2         timerQueuePtr->erase(timerQueuePtr->begin());
\par \hich\af2\dbch\af31505\loch\f2         timer->setTuple(NULL);
\par \hich\af2\dbch\af31505\loch\f2         if (helloTimer==timer)
\par \hich\af2\dbch\af31505\loch\f2             helloTim\hich\af2\dbch\af31505\loch\f2 er = NULL;
\par \hich\af2\dbch\af31505\loch\f2         else if (tcTimer==timer)
\par \hich\af2\dbch\af31505\loch\f2             tcTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2         else if (midTimer==timer)
\par \hich\af2\dbch\af31505\loch\f2             midTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2         delete timer;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (helloTimer)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete helloTimer;
\par \hich\af2\dbch\af31505\loch\f2         helloTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     if\hich\af2\dbch\af31505\loch\f2  (tcTimer)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete tcTimer;
\par \hich\af2\dbch\af31505\loch\f2         tcTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     if (midTimer)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete midTimer;
\par \hich\af2\dbch\af31505\loch\f2         midTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (timerQueuePtr)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete timerQueuePtr;
\par \hich\af2\dbch\af31505\loch\f2         timerQueuePtr = NULL;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 uint32_t OLSR::getRoute(const ManetAddress &dest, std::vector<ManetAddress> &add)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     add.clear();
\par \hich\af2\dbch\af31505\loch\f2     OLSR_rt_entry* rt_entry = rtable_.lookup(dest);
\par \hich\af2\dbch\af31505\loch\f2     ManetAddress apAddr;
\par \hich\af2\dbch\af31505\loch\f2     if (!rt_entry)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (getAp(dest, apAddr))
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2           \hich\af2\dbch\af31505\loch\f2   OLSR_rt_entry* rt_entry = rtable_.lookup(apAddr);
\par \hich\af2\dbch\af31505\loch\f2             if (!rt_entry)
\par \hich\af2\dbch\af31505\loch\f2                 return 0;
\par \hich\af2\dbch\af31505\loch\f2             for (int i = 0; i < (int) rt_entry->route.size(); i++)
\par \hich\af2\dbch\af31505\loch\f2                 add.push_back(rt_entry->route[i]);
\par \hich\af2\dbch\af31505\loch\f2             a\hich\af2\dbch\af31505\loch\f2 dd.push_back(apAddr);
\par \hich\af2\dbch\af31505\loch\f2             OLSR_rt_entry* rt_entry_aux = rtable_.find_send_entry(rt_entry);
\par \hich\af2\dbch\af31505\loch\f2             if (rt_entry_aux->next_addr() != add[0])
\par \hich\af2\dbch\af31505\loch\f2                 opp_error("OLSR Data base error");
\par \hich\af2\dbch\af31505\loch\f2             return rt_entry->dist();
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2   return 0;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     for (int i=0; i<(int)rt_entry->route.size(); i++)
\par \hich\af2\dbch\af31505\loch\f2         add.push_back(rt_entry->route[i]);
\par \hich\af2\dbch\af31505\loch\f2     add.push_back(dest);
\par \hich\af2\dbch\af31505\loch\f2     OLSR_rt_entry* rt_entry_aux = rtable_.find_send_entry(rt_entry);
\par \hich\af2\dbch\af31505\loch\f2     if (rt_entry_aux->next_addr() != add[0])
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2        opp_error("OLSR Data base error");
\par \hich\af2\dbch\af31505\loch\f2     return rt_entry->dist();
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool OLSR::getNextHop(const ManetAddress &dest, ManetAddress &add, int &iface, double &cost)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_rt_entry* rt_entry = rtable_.lookup(dest);
\par \hich\af2\dbch\af31505\loch\f2     if (!rt_entry)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         M\hich\af2\dbch\af31505\loch\f2 anetAddress apAddr;
\par \hich\af2\dbch\af31505\loch\f2         if (getAp(dest, apAddr))
\par \hich\af2\dbch\af31505\loch\f2         \{
\par 
\par \hich\af2\dbch\af31505\loch\f2             OLSR_rt_entry* rt_entry = rtable_.lookup(apAddr);
\par \hich\af2\dbch\af31505\loch\f2             if (!rt_entry)
\par \hich\af2\dbch\af31505\loch\f2                 return false;
\par \hich\af2\dbch\af31505\loch\f2             if (rt_entry->route.size())
\par \hich\af2\dbch\af31505\loch\f2                 add = rt_entry->route[0];
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2                 add = rt_entry->next_addr();
\par \hich\af2\dbch\af31505\loch\f2             OLSR_rt_entry* rt_entry_aux = rtable_.find_send_entry(rt_entry);
\par \hich\af2\dbch\af31505\loch\f2             if (rt_entry_aux->next_addr() != add)
\par \hich\af2\dbch\af31505\loch\f2                 opp_error\hich\af2\dbch\af31505\loch\f2 ("OLSR Data base error");
\par 
\par \hich\af2\dbch\af31505\loch\f2             InterfaceEntry * ie = getInterfaceWlanByAddress(rt_entry->iface_addr());
\par \hich\af2\dbch\af31505\loch\f2             iface = ie->getInterfaceId();
\par \hich\af2\dbch\af31505\loch\f2             cost = rt_entry->dist();
\par \hich\af2\dbch\af31505\loch\f2             return true;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         return false;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2    if (rt_entry->route.size())
\par \hich\af2\dbch\af31505\loch\f2         add = rt_entry->route[0];
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         add = rt_entry->next_addr();
\par \hich\af2\dbch\af31505\loch\f2     OLSR_rt_entry* rt_entry_aux = rtable_.find_send_entry(rt_entry);
\par \hich\af2\dbch\af31505\loch\f2     if (rt_entry_aux->next_addr() != add)
\par \hich\af2\dbch\af31505\loch\f2         opp_error("OLSR Data base \hich\af2\dbch\af31505\loch\f2 error");
\par 
\par \hich\af2\dbch\af31505\loch\f2     InterfaceEntry * ie = getInterfaceWlanByAddress(rt_entry->iface_addr());
\par \hich\af2\dbch\af31505\loch\f2     iface = ie->getInterfaceId();
\par \hich\af2\dbch\af31505\loch\f2     cost = rt_entry->dist();
\par \hich\af2\dbch\af31505\loch\f2     return true;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool OLSR::isProactive()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return true;
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool OLSR::isOurType(cPacket * msg)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     OLSR_pkt * pkt = dynamic_cast<OLSR_pkt  *>(msg);
\par \hich\af2\dbch\af31505\loch\f2     if (pkt)
\par \hich\af2\dbch\af31505\loch\f2         return true;
\par \hich\af2\dbch\af31505\loch\f2     return false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool OLSR::getDestAddress(cPacket *msg, ManetAddress &dest)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void OLSR::scheduleNextEvent()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     TimerQueue::iterator e = tim\hich\af2\dbch\af31505\loch\f2 erQueuePtr->begin();
\par \hich\af2\dbch\af31505\loch\f2     if (timerMessage->isScheduled())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (e->first < timerMessage->getArrivalTime())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             cancelEvent(timerMessage);
\par \hich\af2\dbch\af31505\loch\f2             scheduleAt(e->first, timerMessage);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else if (e->first>timerMessage->getArrivalTime())
\par \hich\af2\dbch\af31505\loch\f2             error("OLSR timer Queue problem");
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         scheduleAt(e->first, timerMessage);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 // Group methods, allow the anycast procedure
\par \hich\af2\dbch\af31505\loch\f2 int OLSR::getRouteGroup(const \hich\af2\dbch\af31505\loch\f2 AddressGroup &gr, std::vector<ManetAddress> &add)
\par \{
\par 
\par \hich\af2\dbch\af31505\loch\f2     int distance = 1000;
\par \hich\af2\dbch\af31505\loch\f2     add.clear();
\par \hich\af2\dbch\af31505\loch\f2     for (AddressGroupConstIterator it = gr.begin(); it!=gr.end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         ManetAddress dest = *it;
\par \hich\af2\dbch\af31505\loch\f2         OLSR_rt_entry* rt_entry = rtable_.lookup(d\hich\af2\dbch\af31505\loch\f2 est);
\par \hich\af2\dbch\af31505\loch\f2         if (!rt_entry)
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         if (distance<(int)rt_entry->dist() || (distance==(int)rt_entry->dist() && intrand(1)))
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         distance = rt_entry->dist();
\par \hich\af2\dbch\af31505\loch\f2         add.clear();
\par \hich\af2\dbch\af31505\loch\f2         for (int i=0; i<(int)rt_entry->route.size(); i++)
\par \hich\af2\dbch\af31505\loch\f2             add.push_back(rt_entry->route[i]);
\par \hich\af2\dbch\af31505\loch\f2         add.push_back(dest);
\par 
\par \hich\af2\dbch\af31505\loch\f2         add[rt_entry->route.size()] = dest;
\par \hich\af2\dbch\af31505\loch\f2         OLSR_rt_entry* rt_entry_aux = rtable_.find_send_entry(rt_entry);
\par \hich\af2\dbch\af31505\loch\f2     \hich\af2\dbch\af31505\loch\f2     if (rt_entry_aux->next_addr() != add[0])
\par \hich\af2\dbch\af31505\loch\f2             opp_error("OLSR Data base error");
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     if (distance==1000)
\par \hich\af2\dbch\af31505\loch\f2         return 0;
\par \hich\af2\dbch\af31505\loch\f2     return distance;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool OLSR::getNextHopGroup(const AddressGroup &gr, ManetAddress &add, int &iface, ManetAddre\hich\af2\dbch\af31505\loch\f2 ss &gw)
\par \{
\par 
\par \hich\af2\dbch\af31505\loch\f2     int distance = 1000;
\par \hich\af2\dbch\af31505\loch\f2     for (AddressGroupConstIterator it = gr.begin(); it!=gr.end(); it++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         ManetAddress dest = *it;
\par \hich\af2\dbch\af31505\loch\f2         OLSR_rt_entry* rt_entry = rtable_.lookup(dest);
\par \hich\af2\dbch\af31505\loch\f2         if (!rt_entry)
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         if (distance<(int)rt_entry->dist() || (distance==(int)rt_entry->dist() && intrand(1)))
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         distance = rt_entry->dist();
\par \hich\af2\dbch\af31505\loch\f2         if (rt_entry->route.size())
\par \hich\af2\dbch\af31505\loch\f2             add = rt_entry->route[0];
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2             add\hich\af2\dbch\af31505\loch\f2  = rt_entry->next_addr();
\par \hich\af2\dbch\af31505\loch\f2         OLSR_rt_entry* rt_entry_aux = rtable_.find_send_entry(rt_entry);
\par \hich\af2\dbch\af31505\loch\f2         if (rt_entry_aux->next_addr() != add)
\par \hich\af2\dbch\af31505\loch\f2             opp_error("OLSR Data base error");
\par \hich\af2\dbch\af31505\loch\f2         InterfaceEntry * ie = getInterfaceWlanByAddress(rt_entry\hich\af2\dbch\af31505\loch\f2 ->iface_addr());
\par \hich\af2\dbch\af31505\loch\f2         iface = ie->getInterfaceId();
\par \hich\af2\dbch\af31505\loch\f2         gw = dest;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     if (distance==1000)
\par \hich\af2\dbch\af31505\loch\f2         return false;
\par \hich\af2\dbch\af31505\loch\f2     return true;
\par \}
\par 
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 int  OLSR::getRouteGroup(const ManetAddress& dest, std::vector<ManetAddress> &add, ManetAddress& gateway, \hich\af2\dbch\af31505\loch\f2 bool &isGroup, int group)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     AddressGroup gr;
\par \hich\af2\dbch\af31505\loch\f2     int distance = 0;
\par \hich\af2\dbch\af31505\loch\f2     if (findInAddressGroup(dest, group))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         getAddressGroup(gr, group);
\par \hich\af2\dbch\af31505\loch\f2         distance = getRouteGroup(gr, add);
\par \hich\af2\dbch\af31505\loch\f2         if (distance == 0)
\par \hich\af2\dbch\af31505\loch\f2             return 0;
\par \hich\af2\dbch\af31505\loch\f2         gateway = add.back();
\par \hich\af2\dbch\af31505\loch\f2         isGroup = true;
\par 
\par \hich\af2\dbch\af31505\loch\f2      \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         distance = getRoute(dest, add);
\par \hich\af2\dbch\af31505\loch\f2         isGroup = false;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return distance;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool OLSR::getNextHopGroup(const ManetAddress& dest, ManetAddress &next, int &iface,\hich\af2\dbch\af31505\loch\f2  ManetAddress& gw, bool &isGroup, int group)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     AddressGroup gr;
\par \hich\af2\dbch\af31505\loch\f2     bool find = false;
\par \hich\af2\dbch\af31505\loch\f2     if (findInAddressGroup(dest, group))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         getAddressGroup(gr, group);
\par \hich\af2\dbch\af31505\loch\f2         find = getNextHopGroup(gr, next, iface, gw);
\par \hich\af2\dbch\af31505\loch\f2         isGroup = true;
\par \hich\af2\dbch\af31505\loch\f2      \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         double cost;
\par \hich\af2\dbch\af31505\loch\f2         find = getNextHop(dest, next, iface, cost);
\par \hich\af2\dbch\af31505\loch\f2         isGroup = false;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return find;
\par \}
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 ManetAddress OLSR::getIfaceAddressFromIndex(int index)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     InterfaceEntry * entry = getInterfaceEntry(index);
\par \hich\af2\dbch\af31505\loch\f2     if (this->isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2         return ManetAddress(entry->getMacAddress());
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         return ManetAddress(entry->ipv4Data()->getIPAddress());
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void OLSR::computeDistributionPath(const nsaddr_t &initNode)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     std::vector<nsaddr_t> route;
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2    mprset_t mpr = state_.mprset();
\par \hich\af2\dbch\af31505\loch\f2     nsaddr_t actualNode= initNode;
\par \hich\af2\dbch\af31505\loch\f2     while(!mpr.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         // search the minimum
\par \hich\af2\dbch\af31505\loch\f2         GlobalRtable::iterator it = globalRtable.find(actualNode);
\par \hich\af2\dbch\af31505\loch\f2         if (it==globalRtable.end())
\par \hich\af2\dbch\af31505\loch\f2             return;
\par \hich\af2\dbch\af31505\loch\f2         OLSR_rtable *val = it->second;
\par \hich\af2\dbch\af31505\loch\f2         mprset_t::iterator itMin = mpr.end();
\par \hich\af2\dbch\af31505\loch\f2         int hops = 1000;
\par \hich\af2\dbch\af31505\loch\f2         OLSR_rt_entry* segmentRoute = NULL;
\par \hich\af2\dbch\af31505\loch\f2         for (mprset_t::iterator it2 = mpr.begin();it2 != mpr.end();++it2)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par 
\par \hich\af2\dbch\af31505\loch\f2             if (*\hich\af2\dbch\af31505\loch\f2 it2 == actualNode)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 continue;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 OLSR_rt_entry*  entry = val->lookup(*it2);
\par \hich\af2\dbch\af31505\loch\f2                 if (entry == NULL)
\par \hich\af2\dbch\af31505\loch\f2                     return;
\par \hich\af2\dbch\af31505\loch\f2                 if (hops > (in\hich\af2\dbch\af31505\loch\f2 t)entry->dist())
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     hops = entry->dist();
\par \hich\af2\dbch\af31505\loch\f2                     itMin = it2;
\par \hich\af2\dbch\af31505\loch\f2                     segmentRoute = entry;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         //
\par \hich\af2\dbch\af31505\loch\f2         actualNode = *itMin;
\par \hich\af2\dbch\af31505\loch\f2         mpr.erase(itMin);
\par \hich\af2\dbch\af31505\loch\f2         if (segmentRoute)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (segmentRoute->dist() > 1 && segmentRoute->route.empty())
\par \hich\af2\dbch\af31505\loch\f2                 opp_error("error in entry route");
\par \hich\af2\dbch\af31505\loch\f2             for (unsigned int i = 0; i< segmentRoute->route.size(); i+\hich\af2\dbch\af31505\loch\f2 +)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 route.push_back(segmentRoute->route[i]);
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         route.push_back(actualNode);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     distributionPath[initNode] = route;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void OLSR::getDistributionPath(const ManetAddress &addr,std::vector<Mane\hich\af2\dbch\af31505\loch\f2 tAddress> &path)
\par \{
\par 
\par \hich\af2\dbch\af31505\loch\f2     DistributionPath::iterator it;
\par \hich\af2\dbch\af31505\loch\f2     path.clear();
\par \hich\af2\dbch\af31505\loch\f2     it = distributionPath.find(addr);
\par \hich\af2\dbch\af31505\loch\f2     if (it != distributionPath.end())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (it->second.empty())
\par \hich\af2\dbch\af31505\loch\f2             opp_error("error in distribution route");
\par \hich\af2\dbch\af31505\loch\f2         path = \hich\af2\dbch\af31505\loch\f2 it->second;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool
\par \hich\af2\dbch\af31505\loch\f2 OLSR::isNodeCandidate(const nsaddr_t &src_addr)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     double now = CURRENT_TIME;
\par 
\par \hich\af2\dbch\af31505\loch\f2     // If the sender interface address is not in the symmetric
\par \hich\af2\dbch\af31505\loch\f2     // 1-hop neighborhood the message must not be forwarded
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     OLSR_link_tuple* link_tuple = state_.find_sym_link_tuple(src_addr, now);
\par \hich\af2\dbch\af31505\loch\f2     if (link_tuple == NULL)
\par \hich\af2\dbch\af31505\loch\f2         return false;
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     OLSR_mprsel_tuple* mprsel_tuple = state_.find_mprsel_tuple(get_main_addr(src_addr));
\par \hich\af2\dbch\af31505\loch\f2     if (mprsel_tuple != NULL)
\par \hich\af2\dbch\af31505\loch\f2         \hich\af2\dbch\af31505\loch\f2 return true;
\par \hich\af2\dbch\af31505\loch\f2     return false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool OLSR::handleNodeStart(IDoneCallback *doneCallback)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     hello_timer_.resched(hello_ival());
\par \hich\af2\dbch\af31505\loch\f2     tc_timer_.resched(hello_ival());
\par \hich\af2\dbch\af31505\loch\f2     mid_timer_.resched(hello_ival());
\par \hich\af2\dbch\af31505\loch\f2     scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2     return true;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool OLSR::handleNodeShutdown(IDoneCallback *doneCallback)
\par \{
\par 
\par \hich\af2\dbch\af31505\loch\f2     rtable_.clear();
\par \hich\af2\dbch\af31505\loch\f2     msgs_.clear();
\par \hich\af2\dbch\af31505\loch\f2     if (timerMessage)
\par \hich\af2\dbch\af31505\loch\f2          cancelEvent(timerMessage);
\par 
\par \hich\af2\dbch\af31505\loch\f2     while (timerQueuePtr && timerQueuePtr->size()>0)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_Timer * timer = timerQu\hich\af2\dbch\af31505\loch\f2 euePtr->begin()->second;
\par \hich\af2\dbch\af31505\loch\f2         timerQueuePtr->erase(timerQueuePtr->begin());
\par \hich\af2\dbch\af31505\loch\f2         if (helloTimer==timer)
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         else if (tcTimer==timer)
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         else if (midTimer==timer)
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         delet\hich\af2\dbch\af31505\loch\f2 e timer;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     return true;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void OLSR::handleNodeCrash()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     rtable_.clear();
\par \hich\af2\dbch\af31505\loch\f2     msgs_.clear();
\par \hich\af2\dbch\af31505\loch\f2     if (timerMessage)
\par \hich\af2\dbch\af31505\loch\f2          cancelEvent(timerMessage);
\par 
\par \hich\af2\dbch\af31505\loch\f2     while (timerQueuePtr && timerQueuePtr->size()>0)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         OLSR_Timer * timer = timerQueuePtr->begin()->second;
\par \hich\af2\dbch\af31505\loch\f2         timerQueuePtr->erase(timerQueuePtr->begin());
\par \hich\af2\dbch\af31505\loch\f2         if (helloTimer==timer)
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         else if (tcTimer==timer)
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         else if (midTimer==timer)
\par \hich\af2\dbch\af31505\loch\f2             continue;
\par \hich\af2\dbch\af31505\loch\f2         delete timer;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid10751145 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b03041400060008000000210030dd4329a8060000a41b0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87
615b8116d8a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad
79482a9c0498f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b
5d8a314d3c94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab
999fb7b4717509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9
699640f6719e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd586
8b37a088d1e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d6
0cf03ac1a5193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f
9e7ef3f2d117d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be
15c308d3f28acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a9979
3849c26ae66252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d
32a423279a668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2a
f074481847bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86
e877f0034e16bafb0e258ebb4faf06b769e888340b103d331115bebc4eb813bf83291b63624a0d1475a756c734f9bbc2cd28546ecbe1e20a3794ca175f3fae90
fb6d2dd99bb07b55e5ccf68942bd0877b23c77b908e8db5f9db7f024d9239010f35bd4bbe2fcae387bfff9e2bc289f2fbe24cfaa301468dd8bd846dbb4ddf1c2
ae7b4c191ba8292337a469bc25ec3d411f06f53a73e224c5292c8de0516732307070a1c0660d125c7d44553488700a4d7bddd3444299910e254ab984c3a219ae
a4adf1d0f82b7bd46cea4388ad1c12ab5d1ed8e1153d9c9f350a3246aad01c6873462b9ac05999ad5cc988826eafc3acae853a33b7ba11cd1445875ba1b236b1
399483c90bd560b0b0263435085a21b0f22a9cf9356b38ec6046026d77eba3dc2dc60b17e92219e180643ed27acffba86e9c94c7ca9c225a0f1b0cfae0788ad5
4adc5a9aec1b703b8b93caec1a0bd8e5de7b132fe5113cf312503b998e2c2927274bd051db6b35979b1ef271daf6c6704e86c73805af4bdd476216c26593af84
0dfb5393d964f9cc9bad5c313709ea70f561ed3ea7b053075221d51696910d0d339585004b34272bff7213cc7a510a5454a3b349b1b206c1f0af490176745d4b
c663e2abb2b34b23da76f6352ba57ca2881844c1111ab189d8c7e07e1daaa04f40255c77988aa05fe06e4e5bdb4cb9c5394bbaf28d98c1d971ccd20867e556a7
689ec9166e0a522183792b8907ba55ca6e943bbf2a26e52f48957218ffcf54d1fb09dc3eac04da033e5c0d0b8c74a6b43d2e54c4a10aa511f5fb021a07533b20
5ae07e17a621a8e082dafc17e450ffb739676998b48643a4daa7211214f623150942f6a02c99e83b85583ddbbb2c4996113211551257a656ec1139246ca86be0
aadedb3d1441a89b6a929501833b197fee7b9641a3503739e57c732a59b1f7da1cf8a73b1f9bcca0945b874d4393dbbf10b1680f66bbaa5d6f96e77b6f59113d
316bb31a795600b3d256d0cad2fe354538e7566b2bd69cc6cbcd5c38f0e2bcc63058344429dc2121fd07f63f2a7c66bf76e80d75c8f7a1b622f878a18941d840
545fb28d07d205d20e8ea071b283369834296bdaac75d256cb37eb0bee740bbe278cad253b8bbfcf69eca23973d939b97891c6ce2cecd8da8e2d343578f6648a
c2d0383fc818c798cf64e52f597c740f1cbd05df0c264c49134cf09d4a60e8a107260f20f92d47b374e32f000000ffff0300504b030414000600080000002100
0dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f7
8277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89
d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd500
1996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0f
bfff0000001c0200001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6
a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a
0000001c00000000000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d00140006000800000021
0030dd4329a8060000a41b00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d001400060008
00000021000dd1909fb60000001b0100002700000000000000000000000000b20900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000ad0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e5000000000000000000000000404d
714356c4d801feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}