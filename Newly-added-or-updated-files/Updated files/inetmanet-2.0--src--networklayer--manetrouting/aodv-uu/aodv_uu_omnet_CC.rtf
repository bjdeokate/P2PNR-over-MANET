{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f34\fbidi \froman\fcharset1\fprq2{\*\panose 02040503050406030204}Cambria Math;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f39\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f40\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f42\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f43\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f44\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f45\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f46\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f47\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f59\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f60\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f62\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f63\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f64\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f65\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f66\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f67\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31573\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\fhiminor\f31574\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green176\blue80;}{\*\defchp \fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 
\ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused 
Normal Table;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid12063457\rsid14578477}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\operator LENOVO}{\creatim\yr2022\mo9\dy9\hr19\min28}
{\revtim\yr2022\mo9\dy9\hr19\min31}{\version2}{\edmins3}{\nofpages42}{\nofwords9255}{\nofchars52755}{\nofcharsws61887}{\vern49169}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}
\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\rsidroot14578477 \nouicompat \fet0{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 
\fs22\lang1033\langfe1033\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid12063457 \hich\af2\dbch\af31505\loch\f2 /*****************************************************************************

\par \hich\af2\dbch\af31505\loch\f2  *
\par \hich\af2\dbch\af31505\loch\f2  * Copyright (C) 2002 Uppsala University.
\par \hich\af2\dbch\af31505\loch\f2  * Copyright (C) 2006 Malaga University.
\par \hich\af2\dbch\af31505\loch\f2  * This program is free software; you can redistribute it and/or modify
\par \hich\af2\dbch\af31505\loch\f2  * it under the terms of the GNU General Public License as published by
\par \hich\af2\dbch\af31505\loch\f2  * the Free Software Foundation; either version 2 of the License, or
\par \hich\af2\dbch\af31505\loch\f2  * (at your option) any later version.
\par \hich\af2\dbch\af31505\loch\f2  *
\par \hich\af2\dbch\af31505\loch\f2  * This program is distributed in the hope that it will be useful,
\par \hich\af2\dbch\af31505\loch\f2  * but\hich\af2\dbch\af31505\loch\f2  WITHOUT ANY WARRANTY; without even the implied warranty of
\par \hich\af2\dbch\af31505\loch\f2  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\par \hich\af2\dbch\af31505\loch\f2  * GNU General Public License for more details.
\par \hich\af2\dbch\af31505\loch\f2  *
\par \hich\af2\dbch\af31505\loch\f2  * You should have received a copy of the GNU General Public License
\par \hich\af2\dbch\af31505\loch\f2  * along wi\hich\af2\dbch\af31505\loch\f2 th this program; if not, write to the Free Software
\par \hich\af2\dbch\af31505\loch\f2  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
\par \hich\af2\dbch\af31505\loch\f2  *
\par \hich\af2\dbch\af31505\loch\f2 \hich\f2  * Authors: Bj\'ef\'bf\'bd\loch\f2 n Wiberg <bjorn.wiberg@home.se>
\par \hich\af2\dbch\af31505\loch\f2 \hich\f2  *          Erik Nordstr\'ef\'bf\'bd\loch\f2  <erik.nordstrom@it.uu.se>
\par \hich\af2\dbch\af31505\loch\f2  * Authors: Alfonso A\hich\af2\dbch\af31505\loch\f2 riza Quintana.<aarizaq@uma.ea>
\par \hich\af2\dbch\af31505\loch\f2  *
\par \hich\af2\dbch\af31505\loch\f2  *****************************************************************************/
\par 
\par \hich\af2\dbch\af31505\loch\f2 #include <string.h>
\par \hich\af2\dbch\af31505\loch\f2 #include <assert.h>
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #include "UDPPacket.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPv4ControlInfo.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPv6ControlInfo.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "ICMPMessage_m.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "ICMPAccess.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "NotifierConsts.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPv4Datagram.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPv4InterfaceData.h"
\par 
\par \hich\af2\dbch\af31505\loch\f2 #include "ProtocolMap.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPv4Address.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPvXAddress.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "ControlManetRouting_m.h"
\par \hich\af2\dbch\af31505\loch\f2 #include \hich\af2\dbch\af31505\loch\f2 "Ieee802Ctrl_m.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "aodv_uu_omnet.h"
\par 
\par \hich\af2\dbch\af31505\loch\f2 const int UDP_HEADER_BYTES = 8;
\par \hich\af2\dbch\af31505\loch\f2 typedef std::vector<IPv4Address> IPAddressVector;
\par 
\par \hich\af2\dbch\af31505\loch\f2 Define_Module(AODVUU);
\par 
\par \hich\af2\dbch\af31505\loch\f2 /* Constructor for the AODVUU routing agent */
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool AODVUU::log_file_fd_init=false;
\par \hich\af2\dbch\af31505\loch\f2 int AODVUU::log_fi\hich\af2\dbch\af31505\loch\f2 le_fd = -1;
\par 
\par \hich\af2\dbch\af31505\loch\f2 #ifdef AODV_GLOBAL_STATISTISTIC
\par \hich\af2\dbch\af31505\loch\f2 bool AODVUU::iswrite = false;
\par \hich\af2\dbch\af31505\loch\f2 int AODVUU::totalSend=0;
\par \hich\af2\dbch\af31505\loch\f2 int AODVUU::totalRreqSend=0;
\par \hich\af2\dbch\af31505\loch\f2 int AODVUU::totalRreqRec=0;
\par \hich\af2\dbch\af31505\loch\f2 int AODVUU::totalRrepSend=0;
\par \hich\af2\dbch\af31505\loch\f2 int AODVUU::totalRrepRec=0;
\par \hich\af2\dbch\af31505\loch\f2 int AODVUU::totalRrepAckSend=0;
\par \hich\af2\dbch\af31505\loch\f2 int AODVUU::totalRrepAckRec=0;
\par \hich\af2\dbch\af31505\loch\f2 int AODVUU::totalRerrSend=0;
\par \hich\af2\dbch\af31505\loch\f2 int AODVUU::totalRerrRec=0;
\par \hich\af2\dbch\af31505\loch\f2 int AODVUU::totalLocalRep =0;
\par \hich\af2\dbch\af31505\loch\f2 #endif
\par \hich\af2\dbch\af31505\loch\f2 std::map<ManetAddress,u_int32_t *> AODVUU::mapSeqNum;
\par 
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS initialize(int stage)
\par \{
\par \hich\af2\dbch\af31505\loch\f2      /*
\par \hich\af2\dbch\af31505\loch\f2        Enable usage of some of\hich\af2\dbch\af31505\loch\f2  the configuration variables from Tcl.
\par 
\par \hich\af2\dbch\af31505\loch\f2        Note: Do NOT change the values of these variables in the constructor
\par \hich\af2\dbch\af31505\loch\f2        after binding them! The desired default values should be set in
\par \hich\af2\dbch\af31505\loch\f2        ~ns/tcl/lib/ns-default.tcl instead.
\par \hich\af2\dbch\af31505\loch\f2      */
\par \hich\af2\dbch\af31505\loch\f2     if (stage==4)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par 
\par \hich\af2\dbch\af31505\loch\f2         RERR_UDEST_SIZE = 4+getAddressSize();
\par \hich\af2\dbch\af31505\loch\f2         RERR_SIZE = 8+getAddressSize();
\par \hich\af2\dbch\af31505\loch\f2         RREP_SIZE = (getAddressSize()*2)+12;
\par \hich\af2\dbch\af31505\loch\f2         RREQ_SIZE = 16+(getAddressSize()*2);
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #ifndef AODV_GLOBAL_STATISTISTIC
\par \hich\af2\dbch\af31505\loch\f2         iswrite = false;
\par \hich\af2\dbch\af31505\loch\f2         totalSend=0;
\par \hich\af2\dbch\af31505\loch\f2         totalRreqSend=0;
\par \hich\af2\dbch\af31505\loch\f2         totalRreqRec=0;
\par \hich\af2\dbch\af31505\loch\f2         totalRrepSend=0;
\par \hich\af2\dbch\af31505\loch\f2         totalRrepRec=0;
\par \hich\af2\dbch\af31505\loch\f2         totalRrepAckSend=0;
\par \hich\af2\dbch\af31505\loch\f2         totalRrepAckRec=0;
\par \hich\af2\dbch\af31505\loch\f2         totalRerrSend=0;
\par \hich\af2\dbch\af31505\loch\f2         totalRerrRec=0;
\par \hich\af2\dbch\af31505\loch\f2         totalLocalRep=0;
\par \hich\af2\dbch\af31505\loch\f2 #endif
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2        log_to_file = 0;
\par \hich\af2\dbch\af31505\loch\f2         hello_jittering = 0;
\par \hich\af2\dbch\af31505\loch\f2         optimized_hellos = 0;
\par \hich\af2\dbch\af31505\loch\f2         expanding_ring_search = 0;
\par \hich\af2\dbch\af31505\loch\f2         local_repair = 0;
\par \hich\af2\dbch\af31505\loch\f2         debug=0;
\par \hich\af2\dbch\af31505\loch\f2         rreq_gratuitous =0;
\par 
\par \hich\af2\dbch\af31505\loch\f2         //sendMessageEvent = new cMessage();
\par 
\par \hich\af2\dbch\af31505\loch\f2         if ((bool)pa\hich\af2\dbch\af31505\loch\f2 r("log_to_file"))
\par \hich\af2\dbch\af31505\loch\f2             log_to_file = 1;
\par 
\par \hich\af2\dbch\af31505\loch\f2         if ((bool) par("hello_jittering"))
\par \hich\af2\dbch\af31505\loch\f2             hello_jittering = 1;
\par 
\par \hich\af2\dbch\af31505\loch\f2         if ((bool)par("optimized_hellos"))
\par \hich\af2\dbch\af31505\loch\f2             optimized_hellos  = 1;
\par 
\par \hich\af2\dbch\af31505\loch\f2         if ((bool)par("expanding_ring_search"))
\par \hich\af2\dbch\af31505\loch\f2             expanding_ring_search = 1;
\par 
\par \hich\af2\dbch\af31505\loch\f2         if ((bool) par("local_repair"))
\par \hich\af2\dbch\af31505\loch\f2             local_repair = 1;
\par 
\par \hich\af2\dbch\af31505\loch\f2         if ((bool)par("rreq_gratuitous"))
\par \hich\af2\dbch\af31505\loch\f2             rreq_gratuitous = 1;
\par 
\par \hich\af2\dbch\af31505\loch\f2         if ((bool)par("debug"))
\par \hich\af2\dbch\af31505\loch\f2             debug = 1;
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (h\hich\af2\dbch\af31505\loch\f2 asPar("RreqDelayInReception"))
\par \hich\af2\dbch\af31505\loch\f2             storeRreq = par(("RreqDelayInReception")).boolValue();
\par \hich\af2\dbch\af31505\loch\f2         checkRrep = false;
\par 
\par \hich\af2\dbch\af31505\loch\f2         useIndex = par("UseIndex");
\par \hich\af2\dbch\af31505\loch\f2         unidir_hack = (int) par("unidir_hack");
\par 
\par \hich\af2\dbch\af31505\loch\f2         receive_n_hellos    = (int) par("rece\hich\af2\dbch\af31505\loch\f2 ive_n_hellos");
\par \hich\af2\dbch\af31505\loch\f2         wait_on_reboot = (int) par ("wait_on_reboot");
\par \hich\af2\dbch\af31505\loch\f2         rt_log_interval = (int) par("rt_log_interval"); // Note: in milliseconds!
\par \hich\af2\dbch\af31505\loch\f2         ratelimit = (int) par("ratelimit");
\par \hich\af2\dbch\af31505\loch\f2         llfeedback = 0;
\par \hich\af2\dbch\af31505\loch\f2         if (par("llfeedback"))
\par \hich\af2\dbch\af31505\loch\f2             llfeedback = 1;
\par \hich\af2\dbch\af31505\loch\f2         internet_gw_mode = (int) par("internet_gw_mode");
\par \hich\af2\dbch\af31505\loch\f2         gateWayAddress = new IPv4Address(par("internet_gw_address").stringValue());
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (llfeedback)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             active_route_timeout = ACTIVE_ROUTE_TIM\hich\af2\dbch\af31505\loch\f2 EOUT_LLF;
\par \hich\af2\dbch\af31505\loch\f2             ttl_start = TTL_START_LLF;
\par \hich\af2\dbch\af31505\loch\f2             delete_period =  DELETE_PERIOD_LLF;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             active_route_timeout = (int) par("active_timeout");// ACTIVE_ROUTE_TIMEOUT_HELLO;
\par \hich\af2\dbch\af31505\loch\f2             ttl_start = TTL_STAR\hich\af2\dbch\af31505\loch\f2 T_HELLO;
\par \hich\af2\dbch\af31505\loch\f2             delete_period = DELETE_PERIOD_HELLO;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (hasPar("avoidDupRREP") && llfeedback)
\par \hich\af2\dbch\af31505\loch\f2             checkRrep = par("avoidDupRREP").boolValue();
\par 
\par \hich\af2\dbch\af31505\loch\f2         /* Initialize common manet routing protocol structures */
\par \hich\af2\dbch\af31505\loch\f2         regis\hich\af2\dbch\af31505\loch\f2 terRoutingModule();
\par \hich\af2\dbch\af31505\loch\f2         if (llfeedback)
\par \hich\af2\dbch\af31505\loch\f2             linkLayerFeeback();
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (hasPar("fullPromis"))
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (par("fullPromis").boolValue())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 linkFullPromiscuous();
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         /* From main.c */
\par \hich\af2\dbch\af31505\loch\f2         progname = strdup("AODV-UU");
\par \hich\af2\dbch\af31505\loch\f2         /* From debug.c */
\par \hich\af2\dbch\af31505\loch\f2         /* Note: log_nmsgs was never used anywhere */
\par \hich\af2\dbch\af31505\loch\f2         log_nmsgs = 0;
\par \hich\af2\dbch\af31505\loch\f2         log_rt_fd = -1;
\par \hich\af2\dbch\af31505\loch\f2 #ifndef  _WIN32
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (debug && !log_file_fd_init)
\par \hich\af2\dbch\af31505\loch\f2        \hich\af2\dbch\af31505\loch\f2  \{
\par \hich\af2\dbch\af31505\loch\f2             log_file_fd = -1;
\par \hich\af2\dbch\af31505\loch\f2             openlog("aodv-uu ",0,LOG_USER);
\par \hich\af2\dbch\af31505\loch\f2             log_init();
\par \hich\af2\dbch\af31505\loch\f2             log_file_fd_init=true;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2 #else
\par \hich\af2\dbch\af31505\loch\f2         debug = 0;
\par \hich\af2\dbch\af31505\loch\f2 #endif
\par \hich\af2\dbch\af31505\loch\f2         /* Set host parameters */
\par \hich\af2\dbch\af31505\loch\f2         memset(&this_host, 0, sizeof(struct \hich\af2\dbch\af31505\loch\f2 host_info));
\par \hich\af2\dbch\af31505\loch\f2         memset(dev_indices, 0, sizeof(unsigned int) * MAX_NR_INTERFACES);
\par \hich\af2\dbch\af31505\loch\f2         this_host.seqno = 1;
\par \hich\af2\dbch\af31505\loch\f2         this_host.rreq_id = 0;
\par \hich\af2\dbch\af31505\loch\f2         this_host.nif = 1;
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2         for (int i = 0; i < MAX_NR_INTERFACES; i++)
\par \hich\af2\dbch\af31505\loch\f2             DEV_NR(i).enabled=0;
\par 
\par \hich\af2\dbch\af31505\loch\f2         for (int i = 0; i <getNumInterfaces(); i++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             DEV_NR(i).ifindex = i;
\par \hich\af2\dbch\af31505\loch\f2             dev_indices[i] = i;
\par \hich\af2\dbch\af31505\loch\f2             strcpy(DEV_NR(i).ifname, getInterfaceEntry(i)->getName());
\par \hich\af2\dbch\af31505\loch\f2             if (!isInM\hich\af2\dbch\af31505\loch\f2 acLayer())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 DEV_NR(i).netmask.s_addr =
\par \hich\af2\dbch\af31505\loch\f2                     ManetAddress(getInterfaceEntry(i)->ipv4Data()->getIPAddress().getNetworkMask());
\par \hich\af2\dbch\af31505\loch\f2                 DEV_NR(i).ipaddr.s_addr =
\par \hich\af2\dbch\af31505\loch\f2                         ManetAddress(getInter\hich\af2\dbch\af31505\loch\f2 faceEntry(i)->ipv4Data()->getIPAddress());
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 DEV_NR(i).netmask.s_addr = ManetAddress(MACAddress::BROADCAST_ADDRESS);
\par \hich\af2\dbch\af31505\loch\f2                 DEV_NR(i).ipaddr.s_addr = ManetAddress(getInterfaceEntry(i)->get\hich\af2\dbch\af31505\loch\f2 MacAddress());
\par 
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             if (getInterfaceEntry(i)->isLoopback())
\par \hich\af2\dbch\af31505\loch\f2                 continue;
\par \hich\af2\dbch\af31505\loch\f2             if (isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 mapSeqNum[DEV_NR(i).ipaddr.s_addr] = &this_host.seqno;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         /* Set network interface parameters */
\par \hich\af2\dbch\af31505\loch\f2         for (int i=0; i < getNumWlanInterfaces(); i++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             DEV_NR(getWlanInterfaceIndex(i)).enabled = 1;
\par \hich\af2\dbch\af31505\loch\f2             DEV_NR(getWlanInterfaceIndex(i)).sock = -1;
\par \hich\af2\dbch\af31505\loch\f2             DEV_NR(getWlanInte\hich\af2\dbch\af31505\loch\f2 rfaceIndex(i)).broadcast.s_addr = ManetAddress(IPv4Address(AODV_BROADCAST));
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         NS_DEV_NR = getWlanInterfaceIndexByAddress();
\par \hich\af2\dbch\af31505\loch\f2         NS_IFINDEX = getWlanInterfaceIndexByAddress();
\par \hich\af2\dbch\af31505\loch\f2 #ifndef AODV_USE_STL
\par \hich\af2\dbch\af31505\loch\f2         list_t *lista_ptr;
\par \hich\af2\dbch\af31505\loch\f2         lis\hich\af2\dbch\af31505\loch\f2 ta_ptr=&rreq_records;
\par \hich\af2\dbch\af31505\loch\f2         INIT_LIST_HEAD(&rreq_records);
\par \hich\af2\dbch\af31505\loch\f2         lista_ptr=&rreq_blacklist;
\par \hich\af2\dbch\af31505\loch\f2         INIT_LIST_HEAD(&rreq_blacklist);
\par \hich\af2\dbch\af31505\loch\f2         lista_ptr=&seekhead;
\par \hich\af2\dbch\af31505\loch\f2         INIT_LIST_HEAD(&seekhead);
\par 
\par \hich\af2\dbch\af31505\loch\f2         lista_ptr=&TQ;
\par \hich\af2\dbch\af31505\loch\f2         INIT_LIST_HEAD(&TQ);
\par \hich\af2\dbch\af31505\loch\f2 #e\hich\af2\dbch\af31505\loch\f2 ndif
\par \hich\af2\dbch\af31505\loch\f2         /* Initialize data structures */
\par \hich\af2\dbch\af31505\loch\f2         worb_timer.data = NULL;
\par \hich\af2\dbch\af31505\loch\f2         worb_timer.used = 0;
\par \hich\af2\dbch\af31505\loch\f2         hello_timer.data = NULL;
\par \hich\af2\dbch\af31505\loch\f2         hello_timer.used = 0;
\par \hich\af2\dbch\af31505\loch\f2         rt_log_timer.data = NULL;
\par \hich\af2\dbch\af31505\loch\f2         rt_log_timer.used = 0;
\par \hich\af2\dbch\af31505\loch\f2         isRoot = par("isRoot");
\par \hich\af2\dbch\af31505\loch\f2         costStatic = par("costStatic");
\par \hich\af2\dbch\af31505\loch\f2         costMobile = par("costMobile");
\par \hich\af2\dbch\af31505\loch\f2         useHover = par("useHover");
\par \hich\af2\dbch\af31505\loch\f2         proactive_rreq_timeout= par("proactiveRreqTimeout").longValue();
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (isRoot)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2     \hich\af2\dbch\af31505\loch\f2         timer_init(&proactive_rreq_timer,&NS_CLASS rreq_proactive, NULL);
\par \hich\af2\dbch\af31505\loch\f2             timer_set_timeout(&proactive_rreq_timer, par("startRreqProactive").longValue());
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         propagateProactive = par("propagateProactive");
\par \hich\af2\dbch\af31505\loch\f2         strcpy(nodeNam\hich\af2\dbch\af31505\loch\f2 e,getParentModule()->getParentModule()->getFullName());
\par \hich\af2\dbch\af31505\loch\f2         aodv_socket_init();
\par \hich\af2\dbch\af31505\loch\f2         rt_table_init();
\par \hich\af2\dbch\af31505\loch\f2         packet_queue_init();
\par \hich\af2\dbch\af31505\loch\f2         startAODVUUAgent();
\par 
\par \hich\af2\dbch\af31505\loch\f2         is_init=true;
\par \hich\af2\dbch\af31505\loch\f2         // Initialize the timer
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         EV << "Aodv active"<< "\\n";
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 /* Destructor for the AODV-UU routing agent */
\par \hich\af2\dbch\af31505\loch\f2 NS_CLASS ~AODVUU()
\par \{
\par \hich\af2\dbch\af31505\loch\f2 #ifdef AODV_USE_STL_RT
\par \hich\af2\dbch\af31505\loch\f2     while (!aodvRtTableMap.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         free (aodvRtTableMap.begin()->second);
\par \hich\af2\dbch\af31505\loch\f2         aodvRtTableMap.erase(ao\hich\af2\dbch\af31505\loch\f2 dvRtTableMap.begin());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2 #else
\par \hich\af2\dbch\af31505\loch\f2     list_t *tmp = NULL, *pos = NULL;
\par \hich\af2\dbch\af31505\loch\f2     for (int i = 0; i < RT_TABLESIZE; i++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         list_foreach_safe(pos, tmp, &rt_tbl.tbl[i])
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             rt_table_t *rt = (rt_table_t *) pos;
\par \hich\af2\dbch\af31505\loch\f2             list_detach(\hich\af2\dbch\af31505\loch\f2 &rt->l);
\par \hich\af2\dbch\af31505\loch\f2             precursor_list_destroy(rt);
\par \hich\af2\dbch\af31505\loch\f2             free(rt);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2 #endif
\par \hich\af2\dbch\af31505\loch\f2 #ifndef AODV_USE_STL
\par \hich\af2\dbch\af31505\loch\f2     while (!list_empty(&rreq_records))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         pos = list_first(&rreq_records);
\par \hich\af2\dbch\af31505\loch\f2         list_detach(pos);
\par \hich\af2\dbch\af31505\loch\f2         if (pos) free(pos);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     while (!list_empty(&rreq_blacklist))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         pos = list_first(&rreq_blacklist);
\par \hich\af2\dbch\af31505\loch\f2         list_detach(pos);
\par \hich\af2\dbch\af31505\loch\f2         if (pos) free(pos);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     while (!list_empty(&seekhead))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         pos = list_first(&seekhead);
\par \hich\af2\dbch\af31505\loch\f2         list_detach(\hich\af2\dbch\af31505\loch\f2 pos);
\par \hich\af2\dbch\af31505\loch\f2         if (pos) free(pos);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2 #else
\par \hich\af2\dbch\af31505\loch\f2     while (!rreq_records.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         free (rreq_records.back());
\par \hich\af2\dbch\af31505\loch\f2         rreq_records.pop_back();
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     while (!rreq_blacklist.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         free (rreq_blacklist.begin()->second);
\par \hich\af2\dbch\af31505\loch\f2         rreq_blacklist.erase(rreq_blacklist.begin());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     while (!seekhead.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete (seekhead.begin()->second);
\par \hich\af2\dbch\af31505\loch\f2         seekhead.erase(seekhead.begin());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2 #endif
\par \hich\af2\dbch\af31505\loch\f2     packet_queue_destroy();
\par \hich\af2\dbch\af31505\loch\f2     cancelAndDelete(sendMessageEv\hich\af2\dbch\af31505\loch\f2 ent);
\par \hich\af2\dbch\af31505\loch\f2     log_cleanup();
\par \hich\af2\dbch\af31505\loch\f2     delete gateWayAddress;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 /*
\par \hich\af2\dbch\af31505\loch\f2   Moves pending packets with a certain next hop from the interface
\par \hich\af2\dbch\af31505\loch\f2   queue to the packet buffer or simply drops it.
\par \hich\af2\dbch\af31505\loch\f2 */
\par 
\par \hich\af2\dbch\af31505\loch\f2 /* Called for packets whose delivery fails at the link layer */
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS \hich\af2\dbch\af31505\loch\f2 packetFailed(IPv4Datagram *dgram)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     rt_table_t *rt_next_hop, *rt;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr dest_addr, src_addr, next_hop;
\par 
\par \hich\af2\dbch\af31505\loch\f2     src_addr.s_addr = ManetAddress(dgram->getSrcAddress());
\par \hich\af2\dbch\af31505\loch\f2     dest_addr.s_addr = ManetAddress(dgram->getDestAddress());
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "Got failure callback");
\par \hich\af2\dbch\af31505\loch\f2     /* We don't care about link failures for broadcast or non-data packets */
\par \hich\af2\dbch\af31505\loch\f2     if (dgram->getDestAddress().getInt() == IP_BROADCAST ||
\par \hich\af2\dbch\af31505\loch\f2             dgram->getDestAddress().getInt() == AODV_BROADCAST)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         DEBUG(LOG_DEBUG, 0, "Ignoring callback");
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "LINK FAILURE for next_hop=%s dest=%s ",ip_to_str(next_hop), ip_to_str(dest_addr));
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (seek_list_find(dest_addr))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2   \hich\af2\dbch\af31505\loch\f2       DEBUG(LOG_DEBUG, 0, "Ongoing route discovery, buffering packet...");
\par \hich\af2\dbch\af31505\loch\f2         packet_queue_add((IPv4Datagram *)dgram->dup(), dest_addr);
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     rt = rt_table_find(dest_addr);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!rt\hich\af2\dbch\af31505\loch\f2  || rt->state == INVALID)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     next_hop.s_addr = rt->next_hop.s_addr;
\par \hich\af2\dbch\af31505\loch\f2     rt_next_hop = rt_table_find(next_hop);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!rt_next_hop || rt_next_hop->state == INVALID)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent\hich\af2\dbch\af31505\loch\f2 ();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     /* Do local repair? */
\par \hich\af2\dbch\af31505\loch\f2     if (local_repair && rt->hcnt <= MAX_REPAIR_TTL)
\par \hich\af2\dbch\af31505\loch\f2         /* && ch->num_forwards() > rt->hcnt */
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         /* Buffer the current packet */
\par \hich\af2\dbch\af31505\loch\f2         packet_queue_add((IPv4Datagram *) dgram->dup(), d\hich\af2\dbch\af31505\loch\f2 est_addr);
\par 
\par \hich\af2\dbch\af31505\loch\f2         // In omnet++ it's not possible to access to the mac queue
\par \hich\af2\dbch\af31505\loch\f2         //  /* Buffer pending packets from interface queue */
\par \hich\af2\dbch\af31505\loch\f2         //  interfaceQueue((nsaddr_t) next_hop.s_addr, IFQ_BUFFER);
\par \hich\af2\dbch\af31505\loch\f2         //  /* Mark the route to be repaired */
\par \hich\af2\dbch\af31505\loch\f2         rt_next_hop->flags |= RT_REPAIR;
\par \hich\af2\dbch\af31505\loch\f2         neighbor_link_break(rt_next_hop);
\par \hich\af2\dbch\af31505\loch\f2         rreq_local_repair(rt, src_addr, NULL);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         /* No local repair - just force timeout of link and drop packets */
\par \hich\af2\dbch\af31505\loch\f2         neighbor_link_break(rt_next_hop);
\par \hich\af2\dbch\af31505\loch\f2 // In omnet++ it's not possible to access to the mac queue
\par \hich\af2\dbch\af31505\loch\f2 //  interfaceQueue((nsaddr_t) next_hop.s_addr, IFQ_DROP);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     scheduleNextEvent();
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 /* }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid14578477 \hich\af2\dbch\af31505\loch\f2 The route request or reply messages }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid12063457 \hich\af2\dbch\af31505\loch\f2 
whose delivery fails at the link layer}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid14578477 \hich\af2\dbch\af31505\loch\f2  are handled}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid12063457 \hich\af2\dbch\af31505\loch\f2  *\hich\af2\dbch\af31505\loch\f2 /
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid14578477 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid12063457 \hich\af2\dbch\af31505\loch\f2 void NS_CLASS packetFailedMac(Ieee80211DataFrame *dgram)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     rt_table_t *rt_next_hop, *rt;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr dest_addr, src_addr, next_hop;
\par \hich\af2\dbch\af31505\loch\f2     if (dgram->getReceiverAddress().isBroadcast())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2   \hich\af2\dbch\af31505\loch\f2   }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid12063457 \hich\af2\dbch\af31505\loch\f2 src_addr.s_addr = ManetAddress(dgram->getAddress3());
\par \hich\af2\dbch\af31505\loch\f2     dest_addr.s_addr = ManetAddress(dgram->getAddress4());
\par \hich\af2\dbch\af31505\loch\f2     if (seek_list_find(dest_addr))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         DEBUG(LOG_DEBUG, 0, "Ongoing route discovery, buffering packet...");
\par \hich\af2\dbch\af31505\loch\f2         p\hich\af2\dbch\af31505\loch\f2 acket_queue_add(dgram->dup(), dest_addr);
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     next_hop.s_addr = ManetAddress(dgram->getReceiverAddress());
\par \hich\af2\dbch\af31505\loch\f2     if (isStaticNode() && getCollaborativeProtocol())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         ManetAddress next;
\par \hich\af2\dbch\af31505\loch\f2         in\hich\af2\dbch\af31505\loch\f2 t iface;
\par \hich\af2\dbch\af31505\loch\f2         double cost;
\par \hich\af2\dbch\af31505\loch\f2         if (getCollaborativeProtocol()->getNextHop(next_hop.s_addr, next, iface, cost))
\par \hich\af2\dbch\af31505\loch\f2             if(next == next_hop.s_addr)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2                 return; // both nodes are stati\hich\af2\dbch\af31505\loch\f2 c, do nothing
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid12063457 \hich\af2\dbch\af31505\loch\f2     rt = rt_table_find(dest_addr);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!rt || rt->state == INVALID)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     next_hop.s_addr = rt->next_hop.s_addr;
\par \hich\af2\dbch\af31505\loch\f2     rt_next_hop = rt_table_find(next_hop);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!rt_next_hop || rt_next_hop->state == INVALID)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     /* Do local repair? */
\par \hich\af2\dbch\af31505\loch\f2     if (local_repair && rt->hcnt <= MAX_REPAIR_TTL)
\par \hich\af2\dbch\af31505\loch\f2         /* && ch->num_forwards() > rt->hcnt */
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         /* \hich\af2\dbch\af31505\loch\f2 Buffer the current packet */
\par \hich\af2\dbch\af31505\loch\f2         packet_queue_add(dgram->dup(), dest_addr);
\par 
\par \hich\af2\dbch\af31505\loch\f2         // In omnet++ it's not possible to access to the mac queue
\par \hich\af2\dbch\af31505\loch\f2         //  /* Buffer pending packets from interface queue */
\par \hich\af2\dbch\af31505\loch\f2         //  interfaceQueue((nsaddr_t) next_hop\hich\af2\dbch\af31505\loch\f2 .s_addr, IFQ_BUFFER);
\par \hich\af2\dbch\af31505\loch\f2         //  /* Mark the route to be repaired */
\par \hich\af2\dbch\af31505\loch\f2         rt_next_hop->flags |= RT_REPAIR;
\par \hich\af2\dbch\af31505\loch\f2         neighbor_link_break(rt_next_hop);
\par \hich\af2\dbch\af31505\loch\f2         rreq_local_repair(rt, src_addr, NULL);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         /* No local repair - just f\hich\af2\dbch\af31505\loch\f2 orce timeout of link and drop packets */
\par \hich\af2\dbch\af31505\loch\f2         neighbor_link_break(rt_next_hop);
\par \hich\af2\dbch\af31505\loch\f2 // In omnet++ it's not possible to access to the mac queue
\par \hich\af2\dbch\af31505\loch\f2 //  interfaceQueue((nsaddr_t) next_hop.s_addr, IFQ_DROP);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     scheduleNextEvent();
\par \}
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 /* Entry-level packet reception */
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS handleMessage (cMessage *msg)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     AODV_msg *aodvMsg=NULL;
\par \hich\af2\dbch\af31505\loch\f2     IPv4Datagram * ipDgram=NULL;
\par \hich\af2\dbch\af31505\loch\f2     UDPPacket * udpPacket=NULL;
\par 
\par \hich\af2\dbch\af31505\loch\f2     cMessage *msg_aux;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr src_addr;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr dest_addr;
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!isNodeOperational())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete msg;
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (is_init==false)
\par \hich\af2\dbch\af31505\loch\f2         opp_error ("Aodv has not been initialized ");
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (msg->isSelfMessage() && dynamic_cast<AODV_msg*> (msg))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         DelayInfo * delayInfo = check_and_cast<DelayInfo *> (msg->removeControlInfo());
\par \hich\af2\dbch\af31505\loch\f2         RREP * rrep = dynamic_cast<RREP *> (msg);
\par \hich\af2\dbch\af31505\loch\f2         if (rrep)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (isThisRrepPrevSent(msg))
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 delete msg;
\par \hich\af2\dbch\af31505\loch\f2        \hich\af2\dbch\af31505\loch\f2          msg = NULL;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         if (msg)
\par \hich\af2\dbch\af31505\loch\f2             aodv_socket_send((AODV_msg *) msg, delayInfo->dst , delayInfo->len, delayInfo->ttl, delayInfo->dev,0);
\par \hich\af2\dbch\af31505\loch\f2         delete delayInfo;
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else if (msg->isSelfMessage\hich\af2\dbch\af31505\loch\f2 () && dynamic_cast<RREQProcessed*> (msg))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         RREQProcessed* rreqList = dynamic_cast<RREQProcessed*> (msg);
\par \hich\af2\dbch\af31505\loch\f2         if (rreqList)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             while (!rreqList->infoList.empty())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 cPacket *pkt = rreqList->inf\hich\af2\dbch\af31505\loch\f2 oList.front().pkt;
\par \hich\af2\dbch\af31505\loch\f2                 rreqList->infoList.pop_front();
\par \hich\af2\dbch\af31505\loch\f2                 recvAODVUUPacket(pkt);
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         // delete rreqList from the list
\par \hich\af2\dbch\af31505\loch\f2         for (std::map<PacketDestOrigin,RREQProcessed*>::iterator it = rreqProc.begin(); it != rreqProc.end(); ++it)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (it->second == rreqList)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 rreqProc.erase(it);
\par \hich\af2\dbch\af31505\loch\f2                 break;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2      \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         delete msg;
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (msg==sendMessageEvent)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         // timer event
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     /* Handle packet depending on type */
\par \hich\af2\dbch\af31505\loch\f2     if (dynamic_cast<Co\hich\af2\dbch\af31505\loch\f2 ntrolManetRouting *>(msg))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         ControlManetRouting * control =  check_and_cast <ControlManetRouting *> (msg);
\par \hich\af2\dbch\af31505\loch\f2         if (control->getOptionCode()== MANET_ROUTE_NOROUTE)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 if (control->getDestAddress().isBroadcast())
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     delete control;
\par \hich\af2\dbch\af31505\loch\f2                     return;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                 cMessage* msgAux = control->decapsulate();
\par 
\par \hich\af2\dbch\af31505\loch\f2                 if (msgAux)
\par \hich\af2\dbch\af31505\loch\f2        \hich\af2\dbch\af31505\loch\f2              processMacPacket(PK(msgAux), control->getDestAddress(), control->getSrcAddress(), NS_IFINDEX);
\par \hich\af2\dbch\af31505\loch\f2                 else
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     if (!addressIsForUs(control->getSrcAddress()))
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par \hich\af2\dbch\af31505\loch\f2                     \hich\af2\dbch\af31505\loch\f2     struct in_addr dest_addr;
\par \hich\af2\dbch\af31505\loch\f2                         dest_addr.s_addr = control->getDestAddress();
\par \hich\af2\dbch\af31505\loch\f2                         rt_table_t * fwd_rt = rt_table_find(dest_addr);
\par 
\par \hich\af2\dbch\af31505\loch\f2                         RERR *rerr;
\par \hich\af2\dbch\af31505\loch\f2                         DEBUG(LOG_DEBUG, 0,
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2                              "No route, src=%s dest=%s prev_hop=%s - DROPPING!",
\par \hich\af2\dbch\af31505\loch\f2                                 ip_to_str(src_addr), ip_to_str(dest_addr));
\par \hich\af2\dbch\af31505\loch\f2                         if (fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2                         \{
\par \hich\af2\dbch\af31505\loch\f2                             rerr = re\hich\af2\dbch\af31505\loch\f2 rr_create(0, fwd_rt->dest_addr,fwd_rt->dest_seqno);
\par \hich\af2\dbch\af31505\loch\f2                             rt_table_update_timeout(fwd_rt, DELETE_PERIOD);
\par \hich\af2\dbch\af31505\loch\f2                         \}
\par \hich\af2\dbch\af31505\loch\f2                         else
\par \hich\af2\dbch\af31505\loch\f2                             rerr = rerr_create(0, dest_addr, 0);
\par \hich\af2\dbch\af31505\loch\f2                         struct in_addr src_addr;
\par \hich\af2\dbch\af31505\loch\f2                         src_addr.s_addr = control->getSrcAddress();
\par \hich\af2\dbch\af31505\loch\f2                         rt_table_t * rev_rt = rt_table_find(src_addr);
\par 
\par \hich\af2\dbch\af31505\loch\f2                         struct in_addr rerr_dest;
\par 
\par \hich\af2\dbch\af31505\loch\f2                 \hich\af2\dbch\af31505\loch\f2         if (rev_rt && rev_rt->state == VALID)
\par \hich\af2\dbch\af31505\loch\f2                             rerr_dest = rev_rt->next_hop;
\par \hich\af2\dbch\af31505\loch\f2                         else
\par \hich\af2\dbch\af31505\loch\f2                             rerr_dest.s_addr = ManetAddress(IPv4Address(AODV_BROADCAST));
\par 
\par \hich\af2\dbch\af31505\loch\f2                         aodv_soc\hich\af2\dbch\af31505\loch\f2 ket_send((AODV_msg *) rerr, rerr_dest,RERR_CALC_SIZE(rerr), 1, &DEV_IFINDEX(NS_IFINDEX));
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 ipDgram = (IPv4Datagram*) control->decapsulate();
\par \hich\af2\dbch\af31505\loch\f2                \hich\af2\dbch\af31505\loch\f2  cPolymorphic * ctrl = ipDgram->removeControlInfo();
\par \hich\af2\dbch\af31505\loch\f2                 unsigned int ifindex = NS_IFINDEX;  /* Always use ns interface */
\par \hich\af2\dbch\af31505\loch\f2                 if (ctrl)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     if (dynamic_cast<Ieee802Ctrl*> (ctrl))
\par \hich\af2\dbch\af31505\loch\f2                   \hich\af2\dbch\af31505\loch\f2   \{
\par \hich\af2\dbch\af31505\loch\f2                         Ieee802Ctrl *ieeectrl = dynamic_cast<Ieee802Ctrl*> (ctrl);
\par \hich\af2\dbch\af31505\loch\f2                         ManetAddress address(ieeectrl->getDest());
\par \hich\af2\dbch\af31505\loch\f2                         int index = getWlanInterfaceIndexByAddress(address);
\par \hich\af2\dbch\af31505\loch\f2                         i\hich\af2\dbch\af31505\loch\f2 f (index!=-1)
\par \hich\af2\dbch\af31505\loch\f2                             ifindex = index;
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                     delete ctrl;
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                 EV << "Aodv rec datagram  " << ipDgram->getName() << " with dest=" << ipDgram->getDestAddress().str() << "\\\hich\af2\dbch\af31505\loch\f2 n";
\par \hich\af2\dbch\af31505\loch\f2                 processPacket(ipDgram,ifindex);   // Data path
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else if (control->getOptionCode()== MANET_ROUTE_UPDATE)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             DEBUG(LOG_DEBUG, 0, "forwarding packers, actualize time outs");
\par \hich\af2\dbch\af31505\loch\f2             src\hich\af2\dbch\af31505\loch\f2 _addr.s_addr = control->getSrcAddress();
\par \hich\af2\dbch\af31505\loch\f2             dest_addr.s_addr = control->getDestAddress();
\par \hich\af2\dbch\af31505\loch\f2             rt_table_t * fwd_rt = rt_table_find(dest_addr);
\par \hich\af2\dbch\af31505\loch\f2             rt_table_t * rev_rt = rt_table_find(src_addr);
\par \hich\af2\dbch\af31505\loch\f2             rt_table_update_route_time\hich\af2\dbch\af31505\loch\f2 outs(fwd_rt, rev_rt);
\par \hich\af2\dbch\af31505\loch\f2             /* When forwarding data, make sure we are sending HELLO messages */
\par \hich\af2\dbch\af31505\loch\f2             gettimeofday(&this_host.fwd_time, NULL);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         delete msg;
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else if (dynamic\hich\af2\dbch\af31505\loch\f2 _cast<UDPPacket *>(msg) || dynamic_cast<AODV_msg  *>(msg))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         udpPacket = NULL;
\par \hich\af2\dbch\af31505\loch\f2         if (!isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             udpPacket = check_and_cast<UDPPacket*>(msg);
\par \hich\af2\dbch\af31505\loch\f2             if (udpPacket->getDestinationPort()!= 654)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 delete  msg;
\par \hich\af2\dbch\af31505\loch\f2                 scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2                 return;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             msg_aux  = udpPacket->decapsulate();
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2             msg_aux = msg;
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (dynamic_cast<AODV_msg  *>(msg_aux))
\par \hich\af2\dbch\af31505\loch\f2     \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2             aodvMsg = check_and_cast  <AODV_msg *>(msg_aux);
\par \hich\af2\dbch\af31505\loch\f2             if (!isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 IPv4ControlInfo *controlInfo = check_and_cast<IPv4ControlInfo*>(udpPacket->removeControlInfo());
\par \hich\af2\dbch\af31505\loch\f2                 src_addr.s_ad\hich\af2\dbch\af31505\loch\f2 dr = ManetAddress(controlInfo->getSrcAddr());
\par \hich\af2\dbch\af31505\loch\f2                 aodvMsg->setControlInfo(controlInfo);
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 Ieee802Ctrl *controlInfo = check_and_cast<Ieee802Ctrl*>(aodvMsg->getControlInfo());
\par \hich\af2\dbch\af31505\loch\f2            \hich\af2\dbch\af31505\loch\f2      src_addr.s_addr = ManetAddress(controlInfo->getSrc());
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (udpPacket)
\par \hich\af2\dbch\af31505\loch\f2                 delete udpPacket;
\par \hich\af2\dbch\af31505\loch\f2             delete msg_aux;
\par \hich\af2\dbch\af31505\loch\f2             scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2             return;
\par 
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (udpPacket)
\par \hich\af2\dbch\af31505\loch\f2             delete udpPacket;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete msg;
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     /* Detect routing loops */
\par \hich\af2\dbch\af31505\loch\f2     if (isLocalAddress(src_addr.s_addr))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete aodvMsg\hich\af2\dbch\af31505\loch\f2 ;
\par \hich\af2\dbch\af31505\loch\f2         aodvMsg=NULL;
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     if (storeRreq)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         RREQInfo rreqInfo;
\par \hich\af2\dbch\af31505\loch\f2         PacketDestOrigin orgDest;
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (getDestAddressRreq(aodvMsg,orgDest,rreqInfo))
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             rreqInfo.pkt = aodvMsg;
\par \hich\af2\dbch\af31505\loch\f2             std::map<PacketDestOrigin,RREQProcessed*>::iterator it = rreqProc.find(orgDest);
\par \hich\af2\dbch\af31505\loch\f2             if (it == rreqProc.end())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 RREQProcessed* proc = new RREQProcessed;
\par \hich\af2\dbch\af31505\loch\f2                 pr\hich\af2\dbch\af31505\loch\f2 oc->destOrigin = orgDest;
\par \hich\af2\dbch\af31505\loch\f2                 proc->infoList.push_back(rreqInfo);
\par \hich\af2\dbch\af31505\loch\f2                 rreqProc.insert(std::make_pair(orgDest,proc));
\par \hich\af2\dbch\af31505\loch\f2                 scheduleAt(simTime()+par("rreqWait").doubleValue(),proc);
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2           \hich\af2\dbch\af31505\loch\f2   \{
\par \hich\af2\dbch\af31505\loch\f2                 // store the packet in function if the cost and seq num
\par \hich\af2\dbch\af31505\loch\f2                 RREQProcessed* proc = it->second;
\par \hich\af2\dbch\af31505\loch\f2                 std::deque<RREQInfo>::iterator it2;
\par \hich\af2\dbch\af31505\loch\f2                 for (it2 = proc->infoList.begin(); it2 != proc->infoList.end()\hich\af2\dbch\af31505\loch\f2 ; ++it2)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     if (((*it2).origin_seqno < rreqInfo.origin_seqno) || ((*it2).origin_seqno == rreqInfo.origin_seqno && (*it2).cost > rreqInfo.cost))
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par \hich\af2\dbch\af31505\loch\f2                         it2 = proc->infoList.insert(it2\hich\af2\dbch\af31505\loch\f2 ,rreqInfo);
\par \hich\af2\dbch\af31505\loch\f2                         break;
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2                 if (it2 == proc->infoList.end())
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     proc->infoList.push_back(rreqInfo);
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             return;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     recvAODVUUPacket(aodvMsg);
\par \hich\af2\dbch\af31505\loch\f2     scheduleNextEvent();
\par \}
\par \hich\af2\dbch\af31505\loch\f2 /*
\par \hich\af2\dbch\af31505\loch\f2       case PT_ENCAPSULATED:
\par \hich\af2\dbch\af31505\loch\f2     // Decapsulate...
\par \hich\af2\dbch\af31505\loch\f2     if (internet_gw_mode) \{
\par \hich\af2\dbch\af31505\loch\f2         rt_table_t *rev_rt, *next_hop_rt;
\par \hich\af2\dbch\af31505\loch\f2          rev_rt = rt_table_find(saddr);
\par 
\par \hich\af2\dbch\af31505\loch\f2          if (rev_rt && rev_rt->state == VALID) \{
\par \hich\af2\dbch\af31505\loch\f2          rt_table_update_timeout(rev_rt, ACTIVE_ROUTE_TIMEOUT);
\par 
\par \hich\af2\dbch\af31505\loch\f2          next_hop_rt = rt_table_find(rev_rt->next_hop);
\par 
\par \hich\af2\dbch\af31505\loch\f2          if (next_hop_rt && next_hop_rt->state == VALID &&
\par \hich\af2\dbch\af31505\loch\f2              rev_rt && n\hich\af2\dbch\af31505\loch\f2 ext_hop_rt->dest_addr.s_addr != rev_rt->dest_addr.s_addr)
\par \hich\af2\dbch\af31505\loch\f2              rt_table_update_timeout(next_hop_rt, ACTIVE_ROUTE_TIMEOUT);
\par \hich\af2\dbch\af31505\loch\f2          \}
\par \hich\af2\dbch\af31505\loch\f2          p = pkt_decapsulate(p);
\par 
\par \hich\af2\dbch\af31505\loch\f2          target_->recv(p, (Handler *)0);
\par \hich\af2\dbch\af31505\loch\f2          break;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     processPacket(p);   // Data path
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2 */
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 /* Starts the AODV-UU routing agent */
\par \hich\af2\dbch\af31505\loch\f2 int NS_CLASS startAODVUUAgent()
\par \{
\par 
\par \hich\af2\dbch\af31505\loch\f2     /* Set up the wait-on-reboot timer */
\par \hich\af2\dbch\af31505\loch\f2     if (wait_on_reboot)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         timer_init(&worb_timer, &NS_CLASS wait_on_reboot_time\hich\af2\dbch\af31505\loch\f2 out, &wait_on_reboot);
\par \hich\af2\dbch\af31505\loch\f2         timer_set_timeout(&worb_timer, DELETE_PERIOD);
\par \hich\af2\dbch\af31505\loch\f2         DEBUG(LOG_NOTICE, 0, "In wait on reboot for %d milliseconds.",DELETE_PERIOD);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     /* Schedule the first HELLO */
\par \hich\af2\dbch\af31505\loch\f2     if (!llfeedback && !optimized_hellos)
\par \hich\af2\dbch\af31505\loch\f2         h\hich\af2\dbch\af31505\loch\f2 ello_start();
\par 
\par \hich\af2\dbch\af31505\loch\f2     /* Initialize routing table logging */
\par \hich\af2\dbch\af31505\loch\f2     if (rt_log_interval)
\par \hich\af2\dbch\af31505\loch\f2         log_rt_table_init();
\par 
\par \hich\af2\dbch\af31505\loch\f2     /* Initialization complete */
\par \hich\af2\dbch\af31505\loch\f2     initialized = 1;
\par 
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "Routing agent with IP = %s  started.",
\par \hich\af2\dbch\af31505\loch\f2           ip_to_str(DEV_NR(NS_DEV_NR).ipaddr));
\par 
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "Settings:");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "unidir_hack %s", unidir_hack ? "ON" : "OFF");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "rreq_gratuitous %s", rreq_gratuitous ? "ON" : "OFF");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG\hich\af2\dbch\af31505\loch\f2 , 0, "expanding_ring_search %s", expanding_ring_search ? "ON" : "OFF");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "local_repair %s", local_repair ? "ON" : "OFF");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "receive_n_hellos %s", receive_n_hellos ? "ON" : "OFF");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "hello\hich\af2\dbch\af31505\loch\f2 _jittering %s", hello_jittering ? "ON" : "OFF");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "wait_on_reboot %s", wait_on_reboot ? "ON" : "OFF");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "optimized_hellos %s", optimized_hellos ? "ON" : "OFF");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "ratelimit %s", ratelimit\hich\af2\dbch\af31505\loch\f2  ? "ON" : "OFF");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "llfeedback %s", llfeedback ? "ON" : "OFF");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "internet_gw_mode %s", internet_gw_mode ? "ON" : "OFF");
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "ACTIVE_ROUTE_TIMEOUT=%d", ACTIVE_ROUTE_TIMEOUT);
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_\hich\af2\dbch\af31505\loch\f2 DEBUG, 0, "TTL_START=%d", TTL_START);
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "DELETE_PERIOD=%d", DELETE_PERIOD);
\par 
\par \hich\af2\dbch\af31505\loch\f2     /* Schedule the first timeout */
\par \hich\af2\dbch\af31505\loch\f2     scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2     return 0;
\par 
\par \}
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 // for use with gateway in the future
\par \hich\af2\dbch\af31505\loch\f2 IPv4Datagram * NS_CLASS pkt_encapsulate(IPv4Datagram *p, IPv4Address gateway)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     IPv4Datagram *datagram = new IPv4Datagram(p->getName());
\par \hich\af2\dbch\af31505\loch\f2     datagram->setByteLength(IP_HEADER_BYTES);
\par \hich\af2\dbch\af31505\loch\f2     datagram->encapsulate(p);
\par 
\par \hich\af2\dbch\af31505\loch\f2     // set source and destination addr\hich\af2\dbch\af31505\loch\f2 ess
\par \hich\af2\dbch\af31505\loch\f2     datagram->setDestAddress(gateway);
\par 
\par \hich\af2\dbch\af31505\loch\f2     IPv4Address src = p->getSrcAddress();
\par 
\par \hich\af2\dbch\af31505\loch\f2     // when source address was given, use it; otherwise it'll get the address
\par \hich\af2\dbch\af31505\loch\f2     // of the outgoing interface after routing
\par \hich\af2\dbch\af31505\loch\f2     // set other fields
\par \hich\af2\dbch\af31505\loch\f2     datagram->setTyp\hich\af2\dbch\af31505\loch\f2 eOfService(p->getTypeOfService());
\par \hich\af2\dbch\af31505\loch\f2     datagram->setIdentification(p->getIdentification());
\par \hich\af2\dbch\af31505\loch\f2     datagram->setMoreFragments(false);
\par \hich\af2\dbch\af31505\loch\f2     datagram->setDontFragment (p->getDontFragment());
\par \hich\af2\dbch\af31505\loch\f2     datagram->setFragmentOffset(0);
\par \hich\af2\dbch\af31505\loch\f2     datagram->setTimeToLive(
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2   p->getTimeToLive() > 0 ?
\par \hich\af2\dbch\af31505\loch\f2         p->getTimeToLive() :
\par \hich\af2\dbch\af31505\loch\f2         0);
\par 
\par \hich\af2\dbch\af31505\loch\f2     datagram->setTransportProtocol(IP_PROT_IP);
\par \hich\af2\dbch\af31505\loch\f2     return datagram;
\par \}
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 IPv4Datagram *NS_CLASS pkt_decapsulate(IPv4Datagram *p)
\par \{
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (p->getTransportProtocol() == IP_PROT_IP)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         IPv4Datagram *datagram = check_and_cast  <IPv4Datagram *>(p->decapsulate());
\par \hich\af2\dbch\af31505\loch\f2         datagram->setTimeToLive(p->getTimeToLive());
\par \hich\af2\dbch\af31505\loch\f2         delete p;
\par \hich\af2\dbch\af31505\loch\f2         return datagram;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return NULL;
\par \}
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 /*
\par \hich\af2\dbch\af31505\loch\f2   Reschedules the timer queue timer to go o\hich\af2\dbch\af31505\loch\f2 ff at the time of the
\par \hich\af2\dbch\af31505\loch\f2   earliest event (so that the timer queue will be investigated then).
\par \hich\af2\dbch\af31505\loch\f2   Should be called whenever something might have changed the timer queue.
\par \hich\af2\dbch\af31505\loch\f2 */
\par \hich\af2\dbch\af31505\loch\f2 #ifdef AODV_USE_STL
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS scheduleNextEvent()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     simtime_t timer;
\par \hich\af2\dbch\af31505\loch\f2     simtime_t timeout = timer_age_queue();
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!aodvTimerMap.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         timer = aodvTimerMap.begin()->first;
\par \hich\af2\dbch\af31505\loch\f2         if (sendMessageEvent->isScheduled())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (timer < sendMessageEvent->getArrivalTime())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2                cancelEvent(sendMessageEvent);
\par \hich\af2\dbch\af31505\loch\f2                 scheduleAt(timer, sendMessageEvent);
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             scheduleAt(timer, sendMessageEvent);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par \hich\af2\dbch\af31505\loch\f2 #else
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS scheduleNextEvent()
\par \{
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2    struct timeval *timeout;
\par \hich\af2\dbch\af31505\loch\f2     double delay;
\par \hich\af2\dbch\af31505\loch\f2     simtime_t timer;
\par \hich\af2\dbch\af31505\loch\f2     timeout = timer_age_queue();
\par \hich\af2\dbch\af31505\loch\f2     if (timeout)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delay  = (double)(((double)timeout->tv_usec/(double)1000000.0) +(double)timeout->tv_sec);
\par \hich\af2\dbch\af31505\loch\f2         timer = simTime()+delay;
\par \hich\af2\dbch\af31505\loch\f2         if (sendMessageEvent->isScheduled())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (timer < sendMessageEvent->getArrivalTime())
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 cancelEvent(sendMessageEvent);
\par \hich\af2\dbch\af31505\loch\f2                 scheduleAt(timer, sendMessageEvent);
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2      else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             scheduleAt(timer, sendMessageEvent);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par \hich\af2\dbch\af31505\loch\f2 #endif
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 /*
\par \hich\af2\dbch\af31505\loch\f2   Replacement for if_indextoname(), used in routing table logging.
\par \hich\af2\dbch\af31505\loch\f2 */
\par \hich\af2\dbch\af31505\loch\f2 const char *NS_CLASS if_indextoname(int ifindex, char *ifname)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     InterfaceEntry *   ie;
\par \hich\af2\dbch\af31505\loch\f2     assert(ifindex >= 0);
\par \hich\af2\dbch\af31505\loch\f2     ie = getInterfaceEntry(ifindex);
\par \hich\af2\dbch\af31505\loch\f2     return ie->getName();
\par \}
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS recvAODVUUPacket(cMessage * msg)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr src, dst;
\par \hich\af2\dbch\af31505\loch\f2     int ttl;
\par \hich\af2\dbch\af31505\loch\f2     int interfaceId;
\par 
\par \hich\af2\dbch\af31505\loch\f2     AODV_msg *aodv_msg\hich\af2\dbch\af31505\loch\f2  = check_and_cast<AODV_msg *> (msg);
\par \hich\af2\dbch\af31505\loch\f2     int len = aodv_msg->getByteLength();
\par \hich\af2\dbch\af31505\loch\f2     int ifIndex = NS_IFINDEX;
\par 
\par \hich\af2\dbch\af31505\loch\f2     ttl =  aodv_msg->ttl-1;
\par \hich\af2\dbch\af31505\loch\f2     if (!isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         IPv4ControlInfo *ctrl = check_and_cast<IPv4ControlInfo *>(msg->getControlInfo())\hich\af2\dbch\af31505\loch\f2 ;
\par \hich\af2\dbch\af31505\loch\f2         IPvXAddress srcAddr = ctrl->getSrcAddr();
\par \hich\af2\dbch\af31505\loch\f2         IPvXAddress destAddr = ctrl->getDestAddr();
\par 
\par \hich\af2\dbch\af31505\loch\f2         src.s_addr = ManetAddress(srcAddr);
\par \hich\af2\dbch\af31505\loch\f2         dst.s_addr =  ManetAddress(destAddr);
\par \hich\af2\dbch\af31505\loch\f2         interfaceId = ctrl->getInterfaceId();
\par 
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         Ieee802Ctrl *ctrl = check_and_cast<Ieee802Ctrl *>(msg->getControlInfo());
\par \hich\af2\dbch\af31505\loch\f2         src.s_addr = ManetAddress(ctrl->getSrc());
\par \hich\af2\dbch\af31505\loch\f2         dst.s_addr =  ManetAddress(ctrl->getDest());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     InterfaceEntry *   ie;
\par \hich\af2\dbch\af31505\loch\f2     if (!isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         for (int i = 0; i < getNumWlanInterfaces(); i++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             ie = getWlanInterfaceEntry(i);
\par 
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 // IPv4InterfaceData *ipv4data = ie->ipv4Data();
\par \hich\af2\dbch\af31505\loch\f2                 if (interfaceId == ie->getInterfaceId())
\par \hich\af2\dbch\af31505\loch\f2        \hich\af2\dbch\af31505\loch\f2              ifIndex = getWlanInterfaceIndex(i);
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     aodv_socket_process_packet(aodv_msg, len, src, dst, ttl, ifIndex);
\par \hich\af2\dbch\af31505\loch\f2     delete   aodv_msg;
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS proc\hich\af2\dbch\af31505\loch\f2 essMacPacket(cPacket * p, const ManetAddress &dest, const ManetAddress &src, int ifindex)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr dest_addr, src_addr;
\par \hich\af2\dbch\af31505\loch\f2     bool isLocal = false;
\par \hich\af2\dbch\af31505\loch\f2     struct ip_data *ipd = NULL;
\par \hich\af2\dbch\af31505\loch\f2     u_int8_t rreq_flags = 0;
\par 
\par \hich\af2\dbch\af31505\loch\f2     dest_addr.s_addr = dest;
\par \hich\af2\dbch\af31505\loch\f2     src\hich\af2\dbch\af31505\loch\f2 _addr.s_addr = src;
\par \hich\af2\dbch\af31505\loch\f2     rt_table_t *fwd_rt, *rev_rt;
\par 
\par \hich\af2\dbch\af31505\loch\f2     //InterfaceEntry *   ie = getInterfaceEntry(ifindex);
\par \hich\af2\dbch\af31505\loch\f2     isLocal = isLocalAddress(src);
\par 
\par \hich\af2\dbch\af31505\loch\f2     rev_rt = rt_table_find(src_addr);
\par \hich\af2\dbch\af31505\loch\f2     fwd_rt = rt_table_find(dest_addr);
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     rt_table_update_route_tim\hich\af2\dbch\af31505\loch\f2 eouts(fwd_rt, rev_rt);
\par 
\par \hich\af2\dbch\af31505\loch\f2     /* OK, the timeouts have been updated. Now see if either: 1. The
\par \hich\af2\dbch\af31505\loch\f2        packet is for this node -> ACCEPT. 2. The packet is not for this
\par \hich\af2\dbch\af31505\loch\f2        node -> Send RERR (someone want's this node to forward packets
\par \hich\af2\dbch\af31505\loch\f2        although there\hich\af2\dbch\af31505\loch\f2  is no route) or Send RREQ. */
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!fwd_rt || fwd_rt->state == INVALID ||
\par \hich\af2\dbch\af31505\loch\f2             (fwd_rt->hcnt == 1 && (fwd_rt->flags & RT_UNIDIR)))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         // If I am the originating node, then a route discovery
\par \hich\af2\dbch\af31505\loch\f2         // must be performed
\par \hich\af2\dbch\af31505\loch\f2         if (isLocal || (fwd_rt && (fwd_rt->flags & RT_REPAIR)))
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (p->getControlInfo())
\par \hich\af2\dbch\af31505\loch\f2                 delete p->removeControlInfo();
\par \hich\af2\dbch\af31505\loch\f2             packet_queue_add(p, dest_addr);
\par \hich\af2\dbch\af31505\loch\f2             if (fwd_rt && (fwd_rt->flags & RT_REPAIR))
\par \hich\af2\dbch\af31505\loch\f2                 rreq_local_repair(fwd_rt, src_addr, ipd);
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 if (par("targetOnlyRreq").boolValue())
\par \hich\af2\dbch\af31505\loch\f2                     rreq_flags |= RREQ_DEST_ONLY;
\par \hich\af2\dbch\af31505\loch\f2                 rreq_route_discovery(dest_addr, rreq_flags, i\hich\af2\dbch\af31505\loch\f2 pd);
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         // Else we must send a RERR message to the source if
\par \hich\af2\dbch\af31505\loch\f2         // the route has been previously used
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par 
\par \hich\af2\dbch\af31505\loch\f2             RERR *rerr;
\par \hich\af2\dbch\af31505\loch\f2             DEBUG(LOG_DEBUG, 0,
\par \hich\af2\dbch\af31505\loch\f2                     "No route, src=%s de\hich\af2\dbch\af31505\loch\f2 st=%s prev_hop=%s - DROPPING!",
\par \hich\af2\dbch\af31505\loch\f2                     ip_to_str(src_addr), ip_to_str(dest_addr));
\par \hich\af2\dbch\af31505\loch\f2             if (fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 rerr = rerr_create(0, fwd_rt->dest_addr,fwd_rt->dest_seqno);
\par \hich\af2\dbch\af31505\loch\f2                 rt_table_update_timeout(fwd_rt, DELETE_PERIOD);
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2                 rerr = rerr_create(0, dest_addr, 0);
\par \hich\af2\dbch\af31505\loch\f2             DEBUG(LOG_DEBUG, 0, "Sending RERR to prev hop %s for unknown dest %s",
\par \hich\af2\dbch\af31505\loch\f2                     ip_to\hich\af2\dbch\af31505\loch\f2 _str(src_addr), ip_to_str(dest_addr));
\par 
\par \hich\af2\dbch\af31505\loch\f2                 /* Unicast the RERR to the source of the data transmission
\par \hich\af2\dbch\af31505\loch\f2                  * if possible, otherwise we broadcast it. */
\par \hich\af2\dbch\af31505\loch\f2             struct in_addr rerr_dest;
\par \hich\af2\dbch\af31505\loch\f2             if (rev_rt && rev_rt->state =\hich\af2\dbch\af31505\loch\f2 = VALID)
\par \hich\af2\dbch\af31505\loch\f2                 rerr_dest = rev_rt->next_hop;
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2                 rerr_dest.s_addr = ManetAddress(IPv4Address(AODV_BROADCAST));
\par \hich\af2\dbch\af31505\loch\f2             aodv_socket_send((AODV_msg *) rerr, rerr_dest,RERR_CALC_SIZE(rerr),
\par \hich\af2\dbch\af31505\loch\f2                     1, &DE\hich\af2\dbch\af31505\loch\f2 V_IFINDEX(ifindex));
\par \hich\af2\dbch\af31505\loch\f2             if (wait_on_reboot)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 DEBUG(LOG_DEBUG, 0, "Wait on reboot timer reset.");
\par \hich\af2\dbch\af31505\loch\f2                 timer_set_timeout(&worb_timer, DELETE_PERIOD);
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             //drop (p);
\par \hich\af2\dbch\af31505\loch\f2             sendICMP\hich\af2\dbch\af31505\loch\f2 (p);
\par \hich\af2\dbch\af31505\loch\f2             /* DEBUG(LOG_DEBUG, 0, "Dropping pkt uid=%d", ch->uid()); */
\par \hich\af2\dbch\af31505\loch\f2             //  icmpAccess.get()->sendErrorMessage(p, ICMP_DESTINATION_UNREACHABLE, 0);
\par \hich\af2\dbch\af31505\loch\f2             return;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         scheduleNextEvent();
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         /* DEBUG(LOG_DEBUG, 0, "Sending pkt uid=%d", ch->uid()); */
\par \hich\af2\dbch\af31505\loch\f2         if (p->getControlInfo())
\par \hich\af2\dbch\af31505\loch\f2             delete p->removeControlInfo();
\par \hich\af2\dbch\af31505\loch\f2         if (isInMacLayer())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             Ieee802Ctrl *ctrl = new Ieee802Ctrl();
\par \hich\af2\dbch\af31505\loch\f2             ctrl-\hich\af2\dbch\af31505\loch\f2 >setDest(fwd_rt->next_hop.s_addr.getMAC());
\par \hich\af2\dbch\af31505\loch\f2             //TODO ctrl->setEtherType(...);
\par \hich\af2\dbch\af31505\loch\f2             p->setControlInfo(ctrl);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         send(p, "to_ip");
\par \hich\af2\dbch\af31505\loch\f2         /* When forwarding data, make sure we are sending HELLO messages */
\par \hich\af2\dbch\af31505\loch\f2         //gettimeo\hich\af2\dbch\af31505\loch\f2 fday(&this_host.fwd_time, NULL);
\par \hich\af2\dbch\af31505\loch\f2         if (!llfeedback && optimized_hellos)
\par \hich\af2\dbch\af31505\loch\f2             hello_start();
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS processPacket(IPv4Datagram * p,unsigned int ifindex)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     rt_table_t *fwd_rt, *rev_rt;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr dest_addr, \hich\af2\dbch\af31505\loch\f2 src_addr;
\par \hich\af2\dbch\af31505\loch\f2     u_int8_t rreq_flags = 0;
\par \hich\af2\dbch\af31505\loch\f2     struct ip_data *ipd = NULL;
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     fwd_rt = NULL;      /* For broadcast we provide no next hop */
\par \hich\af2\dbch\af31505\loch\f2     ipd = NULL;         /* No ICMP messaging */
\par 
\par \hich\af2\dbch\af31505\loch\f2     bool isLocal=true;
\par 
\par \hich\af2\dbch\af31505\loch\f2     src_addr.s_addr = ManetAddress(p->getSr\hich\af2\dbch\af31505\loch\f2 cAddress());
\par \hich\af2\dbch\af31505\loch\f2     dest_addr.s_addr = ManetAddress(p->getDestAddress());
\par 
\par \hich\af2\dbch\af31505\loch\f2     InterfaceEntry *   ie;
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!p->getSrcAddress().isUnspecified())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         isLocal = isLocalAddress(ManetAddress(p->getSrcAddress()));
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     ie = getInterfaceEntry (if\hich\af2\dbch\af31505\loch\f2 index);
\par \hich\af2\dbch\af31505\loch\f2     if (p->getTransportProtocol()==IP_PROT_TCP)
\par \hich\af2\dbch\af31505\loch\f2         rreq_flags |= RREQ_GRATUITOUS;
\par 
\par \hich\af2\dbch\af31505\loch\f2     /* If this is a TCP packet and we don't have a route, we should
\par \hich\af2\dbch\af31505\loch\f2        set the gratuituos flag in the RREQ. */
\par \hich\af2\dbch\af31505\loch\f2     bool isMcast = ie->ipv4Data()->isMemberOf\hich\af2\dbch\af31505\loch\f2 MulticastGroup(dest_addr.s_addr.getIPv4());
\par 
\par \hich\af2\dbch\af31505\loch\f2     /* If the packet is not interesting we just let it go through... */
\par \hich\af2\dbch\af31505\loch\f2     if (isMcast || dest_addr.s_addr == ManetAddress(IPv4Address(AODV_BROADCAST)))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         send(p,"to_ip");
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     /* Find the entry of the neighboring node and the destination  (if any). */
\par \hich\af2\dbch\af31505\loch\f2     rev_rt = rt_table_find(src_addr);
\par \hich\af2\dbch\af31505\loch\f2     fwd_rt = rt_table_find(dest_addr);
\par 
\par \hich\af2\dbch\af31505\loch\f2 #ifdef CONFIG_GATEWAY
\par \hich\af2\dbch\af31505\loch\f2     /* Check if we have a route and it is an Internet destination (Should be
\par \hich\af2\dbch\af31505\loch\f2      * encapsulated and routed through the gateway). */
\par \hich\af2\dbch\af31505\loch\f2     if (fwd_rt && (fwd_rt->state == VALID) &&
\par \hich\af2\dbch\af31505\loch\f2             (fwd_rt->flags & RT_INET_DEST))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         /* The destination should be relayed through the IG */
\par 
\par \hich\af2\dbch\af31505\loch\f2         rt_table_update_timeout(fwd_rt,\hich\af2\dbch\af31505\loch\f2  ACTIVE_ROUTE_TIMEOUT);
\par 
\par \hich\af2\dbch\af31505\loch\f2         p = pkt_encapsulate(p, *gateWayAddress);
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (p == NULL)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             DEBUG(LOG_ERR, 0, "IP Encapsulation failed!");
\par \hich\af2\dbch\af31505\loch\f2             return;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         /* Update pointers to headers */
\par \hich\af2\dbch\af31505\loch\f2         dest_addr.s_addr = gateWayAddress->getInt();
\par \hich\af2\dbch\af31505\loch\f2         fwd_rt = rt_table_find(dest_addr);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2 #endif /* CONFIG_GATEWAY */
\par 
\par \hich\af2\dbch\af31505\loch\f2     /* UPDATE TIMERS on active forward and reverse routes...  */
\par \hich\af2\dbch\af31505\loch\f2     rt_table_update_route_timeouts(fwd_rt, rev_rt);
\par 
\par \hich\af2\dbch\af31505\loch\f2     /* \hich\af2\dbch\af31505\loch\f2 OK, the timeouts have been updated. Now see if either: 1. The
\par \hich\af2\dbch\af31505\loch\f2        packet is for this node -> ACCEPT. 2. The packet is not for this
\par \hich\af2\dbch\af31505\loch\f2        node -> Send RERR (someone want's this node to forward packets
\par \hich\af2\dbch\af31505\loch\f2        although there is no route) or Send RREQ. */
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!fwd_rt || fwd_rt->state == INVALID ||
\par \hich\af2\dbch\af31505\loch\f2             (fwd_rt->hcnt == 1 && (fwd_rt->flags & RT_UNIDIR)))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par 
\par \hich\af2\dbch\af31505\loch\f2         /* Check if the route is marked for repair or is INVALID. In
\par \hich\af2\dbch\af31505\loch\f2          * that case, do a route discovery. */
\par \hich\af2\dbch\af31505\loch\f2         struct in_add\hich\af2\dbch\af31505\loch\f2 r rerr_dest;
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (isLocal)
\par \hich\af2\dbch\af31505\loch\f2             goto route_discovery;
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rt && (fwd_rt->flags & RT_REPAIR))
\par \hich\af2\dbch\af31505\loch\f2             goto route_discovery;
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2         RERR *rerr;
\par \hich\af2\dbch\af31505\loch\f2         DEBUG(LOG_DEBUG, 0,
\par \hich\af2\dbch\af31505\loch\f2               "No route, src=%s dest=%s prev_hop=%s - DROPPING!",
\par \hich\af2\dbch\af31505\loch\f2               ip_to_str(src_addr), ip_to_str(dest_addr));
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             rerr = rerr_create(0, fwd_rt->dest_addr,fwd_rt->dest_seqno);
\par \hich\af2\dbch\af31505\loch\f2             rt_table_update_t\hich\af2\dbch\af31505\loch\f2 imeout(fwd_rt, DELETE_PERIOD);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2             rerr = rerr_create(0, dest_addr, 0);
\par \hich\af2\dbch\af31505\loch\f2         DEBUG(LOG_DEBUG, 0, "Sending RERR to prev hop %s for unknown dest %s",
\par \hich\af2\dbch\af31505\loch\f2               ip_to_str(src_addr), ip_to_str(dest_addr));
\par 
\par \hich\af2\dbch\af31505\loch\f2         /* Unic\hich\af2\dbch\af31505\loch\f2 ast the RERR to the source of the data transmission
\par \hich\af2\dbch\af31505\loch\f2          * if possible, otherwise we broadcast it. */
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (rev_rt && rev_rt->state == VALID)
\par \hich\af2\dbch\af31505\loch\f2             rerr_dest = rev_rt->next_hop;
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2             rerr_dest.s_addr = ManetAddress(IPv4\hich\af2\dbch\af31505\loch\f2 Address(AODV_BROADCAST));
\par 
\par \hich\af2\dbch\af31505\loch\f2         aodv_socket_send((AODV_msg *) rerr, rerr_dest,RERR_CALC_SIZE(rerr),
\par \hich\af2\dbch\af31505\loch\f2                          1, &DEV_IFINDEX(ifindex));
\par \hich\af2\dbch\af31505\loch\f2         if (wait_on_reboot)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             DEBUG(LOG_DEBUG, 0, "Wait on reboot timer reset.");
\par \hich\af2\dbch\af31505\loch\f2             timer_set_timeout(&worb_timer, DELETE_PERIOD);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         //drop (p);
\par \hich\af2\dbch\af31505\loch\f2         sendICMP(p);
\par \hich\af2\dbch\af31505\loch\f2         /* DEBUG(LOG_DEBUG, 0, "Dropping pkt uid=%d", ch->uid()); */
\par \hich\af2\dbch\af31505\loch\f2         //  icmpAccess.get()->sendErrorMessage(p, ICMP_D\hich\af2\dbch\af31505\loch\f2 ESTINATION_UNREACHABLE, 0);
\par \hich\af2\dbch\af31505\loch\f2         return;
\par 
\par \hich\af2\dbch\af31505\loch\f2 route_discovery:
\par \hich\af2\dbch\af31505\loch\f2         /* Buffer packets... Packets are queued by the ip_queue.o
\par \hich\af2\dbch\af31505\loch\f2            module already. We only need to save the handle id, and
\par \hich\af2\dbch\af31505\loch\f2            return the proper verdict when we know what to do.\hich\af2\dbch\af31505\loch\f2 .. */
\par 
\par \hich\af2\dbch\af31505\loch\f2         packet_queue_add(p, dest_addr);
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rt && (fwd_rt->flags & RT_REPAIR))
\par \hich\af2\dbch\af31505\loch\f2             rreq_local_repair(fwd_rt, src_addr, ipd);
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (par("targetOnlyRreq").boolValue())
\par \hich\af2\dbch\af31505\loch\f2                 rreq_flags |=\hich\af2\dbch\af31505\loch\f2  RREQ_DEST_ONLY;
\par \hich\af2\dbch\af31505\loch\f2             rreq_route_discovery(dest_addr, rreq_flags, ipd);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         return;
\par 
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         /* DEBUG(LOG_DEBUG, 0, "Sending pkt uid=%d", ch->uid()); */
\par \hich\af2\dbch\af31505\loch\f2         send(p,"to_ip");
\par \hich\af2\dbch\af31505\loch\f2         /* When forwarding data, make sure we are sending HELLO messages */
\par \hich\af2\dbch\af31505\loch\f2         gettimeofday(&this_host.fwd_time, NULL);
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (!llfeedback && optimized_hellos)
\par \hich\af2\dbch\af31505\loch\f2             hello_start();
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 struct dev_info NS_CLASS dev_ifindex (int ifinde\hich\af2\dbch\af31505\loch\f2 x)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     int index = ifindex2devindex(ifindex);
\par \hich\af2\dbch\af31505\loch\f2     return  (this_host.devs[index]);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 struct dev_info NS_CLASS dev_nr(int n)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return (this_host.devs[n]);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 int NS_CLASS ifindex2devindex(unsigned int ifindex)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     int i;
\par \hich\af2\dbch\af31505\loch\f2     for (i = 0; i < this_ho\hich\af2\dbch\af31505\loch\f2 st.nif; i++)
\par \hich\af2\dbch\af31505\loch\f2         if (dev_indices[i] == ifindex)
\par \hich\af2\dbch\af31505\loch\f2             return i;
\par \hich\af2\dbch\af31505\loch\f2     return -1;
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS processLinkBreak(const cPolymorphic *details)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     IPv4Datagram  *dgram=NULL;
\par \hich\af2\dbch\af31505\loch\f2     if (llfeedback)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (dynamic_cast<IPv4Datagram *>(const_cast<cPolymorphic*> (details)))
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             dgram = const_cast<IPv4Datagram *>(check_and_cast<const IPv4Datagram *>(details));
\par \hich\af2\dbch\af31505\loch\f2             packetFailed(dgram);
\par \hich\af2\dbch\af31505\loch\f2             return;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         e\hich\af2\dbch\af31505\loch\f2 lse if (dynamic_cast<Ieee80211DataFrame *>(const_cast<cPolymorphic*> (details)))
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             Ieee80211DataFrame *frame = dynamic_cast<Ieee80211DataFrame *>(const_cast<cPolymorphic*>(details));
\par \hich\af2\dbch\af31505\loch\f2             packetFailedMac(frame);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS processFullPromiscuous(const cObject *details)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (dynamic_cast<Ieee80211TwoAddressFrame *>(const_cast<cPolymorphic*> (details)))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         Ie\hich\af2\dbch\af31505\loch\f2 ee80211TwoAddressFrame *frame = dynamic_cast<Ieee80211TwoAddressFrame *>(const_cast<cObject*>(details));
\par \hich\af2\dbch\af31505\loch\f2         ManetAddress sender(frame->getTransmitterAddress());
\par \hich\af2\dbch\af31505\loch\f2         struct in_addr destination;
\par \hich\af2\dbch\af31505\loch\f2         int iface;
\par \hich\af2\dbch\af31505\loch\f2         double cost;
\par \hich\af2\dbch\af31505\loch\f2         destin\hich\af2\dbch\af31505\loch\f2 ation.s_addr = sender;
\par \hich\af2\dbch\af31505\loch\f2         rt_table_t * fwd_rt = rt_table_find(destination);
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2             fwd_rt->pending = false;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS processPromiscuous(const cObject *details)
\par \{
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (dynamic_cast<Ieee80211DataFrame *>(const_\hich\af2\dbch\af31505\loch\f2 cast<cPolymorphic*> (details)))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         Ieee80211DataFrame *frame = dynamic_cast<Ieee80211DataFrame *>(const_cast<cObject*>(details));
\par \hich\af2\dbch\af31505\loch\f2         cPacket * pktAux = frame->getEncapsulatedPacket();
\par \hich\af2\dbch\af31505\loch\f2         if (!isInMacLayer() && pktAux != NULL)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             /*
\par \hich\af2\dbch\af31505\loch\f2             if (dynamic_cast<IPv4Datagram *>(pktAux))
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 cPacket * pktAux1 = pktAux->getEncapsulatedPacket(); // Transport
\par \hich\af2\dbch\af31505\loch\f2                 if (pktAux1)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     cPacket * pktAux2 = pktAux->getEncapsulatedPacket(); // protocol
\par \hich\af2\dbch\af31505\loch\f2                     if (pktAux2 && dynamic_cast<RREP *> (pktAux2))
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par 
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2             */
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2   \hich\af2\dbch\af31505\loch\f2       else if (isInMacLayer() && dynamic_cast<Ieee80211MeshFrame *>(frame))
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             Ieee80211MeshFrame *meshFrame = dynamic_cast<Ieee80211MeshFrame *>(frame);
\par \hich\af2\dbch\af31505\loch\f2             if (meshFrame->getSubType() == ROUTING)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 c\hich\af2\dbch\af31505\loch\f2 Packet * pktAux2 = meshFrame->getEncapsulatedPacket(); // protocol
\par \hich\af2\dbch\af31505\loch\f2                 if (pktAux2 && dynamic_cast<RREP *> (pktAux2) && checkRrep)
\par \hich\af2\dbch\af31505\loch\f2                 \{
\par \hich\af2\dbch\af31505\loch\f2                     RREP* rrep = dynamic_cast<RREP *> (pktAux2);
\par \hich\af2\dbch\af31505\loch\f2                     PacketDest\hich\af2\dbch\af31505\loch\f2 Origin destOrigin(rrep->dest_addr,rrep->orig_addr);
\par \hich\af2\dbch\af31505\loch\f2                     std::map<PacketDestOrigin,RREPProcessed>::iterator it = rrepProc.find(destOrigin);
\par \hich\af2\dbch\af31505\loch\f2                     if (it == rrepProc.end())
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par \hich\af2\dbch\af31505\loch\f2                         // new
\par \hich\af2\dbch\af31505\loch\f2   \hich\af2\dbch\af31505\loch\f2                       RREPProcessed rproc;
\par \hich\af2\dbch\af31505\loch\f2                         rproc.cost = rrep->cost;
\par \hich\af2\dbch\af31505\loch\f2                         rproc.dest_seqno = rrep->dest_seqno;
\par \hich\af2\dbch\af31505\loch\f2                         rproc.hcnt = rrep->hcnt;
\par \hich\af2\dbch\af31505\loch\f2                         rproc.hopfix = rrep->hopfix;
\par \hich\af2\dbch\af31505\loch\f2                         rproc.totalHops = rrep->totalHops;
\par \hich\af2\dbch\af31505\loch\f2                         rproc.next = ManetAddress(meshFrame->getReceiverAddress());
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                     else if (it->second.dest_seqno < rrep->dest_seqno)
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par \hich\af2\dbch\af31505\loch\f2                         // actualize
\par \hich\af2\dbch\af31505\loch\f2                         it->second.cost = rrep->cost;
\par \hich\af2\dbch\af31505\loch\f2                         it->second.dest_seqno = rrep->dest_seqno;
\par \hich\af2\dbch\af31505\loch\f2                         it->second.hcnt = rrep->hcnt;
\par \hich\af2\dbch\af31505\loch\f2                         it->second.hopfix =\hich\af2\dbch\af31505\loch\f2  rrep->hopfix;
\par \hich\af2\dbch\af31505\loch\f2                         it->second.next = ManetAddress(meshFrame->getReceiverAddress());
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                     else if (it->second.dest_seqno == rrep->dest_seqno)
\par \hich\af2\dbch\af31505\loch\f2                     \{
\par \hich\af2\dbch\af31505\loch\f2                         // equal seq\hich\af2\dbch\af31505\loch\f2  num check
\par \hich\af2\dbch\af31505\loch\f2                         if (it->second.hcnt > rrep->hcnt)
\par \hich\af2\dbch\af31505\loch\f2                         \{
\par \hich\af2\dbch\af31505\loch\f2                             it->second.cost = rrep->cost;
\par \hich\af2\dbch\af31505\loch\f2                             it->second.dest_seqno = rrep->dest_seqno;
\par \hich\af2\dbch\af31505\loch\f2                             it->s\hich\af2\dbch\af31505\loch\f2 econd.hcnt = rrep->hcnt;
\par \hich\af2\dbch\af31505\loch\f2                             it->second.hopfix = rrep->hopfix;
\par \hich\af2\dbch\af31505\loch\f2                             it->second.next = ManetAddress(meshFrame->getReceiverAddress());
\par \hich\af2\dbch\af31505\loch\f2                         \}
\par \hich\af2\dbch\af31505\loch\f2                     \}
\par \hich\af2\dbch\af31505\loch\f2                 \}
\par \hich\af2\dbch\af31505\loch\f2           \hich\af2\dbch\af31505\loch\f2   \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS finish()
\par \{
\par 
\par \hich\af2\dbch\af31505\loch\f2     simtime_t t = simTime();
\par \hich\af2\dbch\af31505\loch\f2     if (t==0)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     if (iswrite)
\par \hich\af2\dbch\af31505\loch\f2         return;
\par \hich\af2\dbch\af31505\loch\f2     iswrite=true;
\par \hich\af2\dbch\af31505\loch\f2     recordScalar("simulated time", t);
\par \hich\af2\dbch\af31505\loch\f2     recordScalar("Aodv totalSend ", totalSend);
\par \hich\af2\dbch\af31505\loch\f2     recordScalar("rreq send", totalRreqSend);
\par \hich\af2\dbch\af31505\loch\f2     recordScalar("rreq rec", totalRreqRec);
\par \hich\af2\dbch\af31505\loch\f2     recordScalar("rrep send", totalRrepSend);
\par \hich\af2\dbch\af31505\loch\f2     recordScalar("rrep rec", totalRrepRec);
\par \hich\af2\dbch\af31505\loch\f2     recordScalar("rrep ack send", totalRrepAckSend);
\par \hich\af2\dbch\af31505\loch\f2     recordScalar("rrep \hich\af2\dbch\af31505\loch\f2 ack rec", totalRrepAckRec);
\par \hich\af2\dbch\af31505\loch\f2     recordScalar("rerr send", totalRerrSend);
\par \hich\af2\dbch\af31505\loch\f2     recordScalar("rerr rec", totalRerrRec);
\par \hich\af2\dbch\af31505\loch\f2     recordScalar("total repair",totalLocalRep);
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 uint32_t NS_CLASS getRoute(const ManetAddress &dest,std::vector<ManetAddress> &add)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return 0;
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool  NS_CLASS getNextHop(const ManetAddress &dest,ManetAddress &add, int &iface,double &cost)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr destAddr;
\par \hich\af2\dbch\af31505\loch\f2     destAddr.s_addr = dest;
\par \hich\af2\dbch\af31505\loch\f2     ManetAddress apAddr;
\par \hich\af2\dbch\af31505\loch\f2     rt_table_t * fwd_rt = this->rt_table_find(destAddr);
\par \hich\af2\dbch\af31505\loch\f2   \hich\af2\dbch\af31505\loch\f2   if (fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rt->state != VALID)
\par \hich\af2\dbch\af31505\loch\f2             return false;
\par \hich\af2\dbch\af31505\loch\f2         add = fwd_rt->next_hop.s_addr;
\par \hich\af2\dbch\af31505\loch\f2         InterfaceEntry * ie = getInterfaceEntry (fwd_rt->ifindex);
\par \hich\af2\dbch\af31505\loch\f2         iface = ie->getInterfaceId();
\par \hich\af2\dbch\af31505\loch\f2         cost = fwd_rt->hcnt;
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2        return true;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else if (getAp(dest,apAddr))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         destAddr.s_addr = apAddr;
\par \hich\af2\dbch\af31505\loch\f2         fwd_rt = this->rt_table_find(destAddr);
\par \hich\af2\dbch\af31505\loch\f2         if (!fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2             return false;
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rt->state != VALID)
\par \hich\af2\dbch\af31505\loch\f2             return false;
\par \hich\af2\dbch\af31505\loch\f2         add = fwd_rt->next_hop.s_addr;
\par \hich\af2\dbch\af31505\loch\f2         InterfaceEntry * ie = getInterfaceEntry (fwd_rt->ifindex);
\par \hich\af2\dbch\af31505\loch\f2         iface = ie->getInterfaceId();
\par \hich\af2\dbch\af31505\loch\f2         cost = fwd_rt->hcnt;
\par \hich\af2\dbch\af31505\loch\f2         return true;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool NS_CLASS isProactive()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     r\hich\af2\dbch\af31505\loch\f2 eturn false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS setRefreshRoute(const ManetAddress &destination, const ManetAddress & nextHop,bool isReverse)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr dest_addr, next_hop;
\par \hich\af2\dbch\af31505\loch\f2     dest_addr.s_addr = destination;
\par \hich\af2\dbch\af31505\loch\f2     next_hop.s_addr = nextHop;
\par \hich\af2\dbch\af31505\loch\f2     rt_table_t * route \hich\af2\dbch\af31505\loch\f2  = rt_table_find(dest_addr);
\par 
\par \hich\af2\dbch\af31505\loch\f2     ManetAddress apAddr;
\par \hich\af2\dbch\af31505\loch\f2     bool gratuitus = false;
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (getAp(destination,apAddr))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         dest_addr.s_addr = apAddr;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     if (getAp(nextHop,apAddr))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         next_hop.s_addr = apAddr;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     if(par ("checkNextHop").boolValue())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (nextHop.isUnspecified())
\par \hich\af2\dbch\af31505\loch\f2            return;
\par \hich\af2\dbch\af31505\loch\f2         if (!isReverse)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (route &&(route->next_hop.s_addr==nextHop))
\par \hich\af2\dbch\af31505\loch\f2                  rt_table_update_route_timeouts(route, NULL)\hich\af2\dbch\af31505\loch\f2 ;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (isReverse && !route && gratuitus)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             // Gratuitous Return Path
\par \hich\af2\dbch\af31505\loch\f2             struct in_addr node_addr;
\par \hich\af2\dbch\af31505\loch\f2             struct in_addr  ip_src;
\par \hich\af2\dbch\af31505\loch\f2             node_addr.s_addr = destination;
\par \hich\af2\dbch\af31505\loch\f2             ip_src.s_addr = ne\hich\af2\dbch\af31505\loch\f2 xtHop;
\par \hich\af2\dbch\af31505\loch\f2             rt_table_insert(node_addr, ip_src,0,0, ACTIVE_ROUTE_TIMEOUT, VALID, 0,NS_DEV_NR,0xFFFFFFF,100);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else if (route && (route->next_hop.s_addr == nextHop))
\par \hich\af2\dbch\af31505\loch\f2             rt_table_update_route_timeouts(NULL, route);
\par 
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (!isReverse)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (route)
\par \hich\af2\dbch\af31505\loch\f2                  rt_table_update_route_timeouts(route, NULL);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (isReverse && !route && !nextHop.isUnspecified())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             // Gratuitous Return Path
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2            struct in_addr node_addr;
\par \hich\af2\dbch\af31505\loch\f2             struct in_addr  ip_src;
\par \hich\af2\dbch\af31505\loch\f2             node_addr.s_addr = destination;
\par \hich\af2\dbch\af31505\loch\f2             ip_src.s_addr = nextHop;
\par \hich\af2\dbch\af31505\loch\f2             rt_table_insert(node_addr, ip_src,0,0, ACTIVE_ROUTE_TIMEOUT, VALID, 0,NS_DEV_NR,0xFFFFFFF,\hich\af2\dbch\af31505\loch\f2 100);
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else if (route)
\par \hich\af2\dbch\af31505\loch\f2             rt_table_update_route_timeouts(NULL, route);
\par 
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     Enter_Method_Silent();
\par \hich\af2\dbch\af31505\loch\f2     scheduleNextEvent();
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool NS_CLASS isOurType(cPacket * msg)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     AODV_msg *re = dynamic_cast <AODV_msg *>(msg);
\par \hich\af2\dbch\af31505\loch\f2     if (re)
\par \hich\af2\dbch\af31505\loch\f2         return true;
\par \hich\af2\dbch\af31505\loch\f2     return false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool NS_CLASS getDestAddress(cPacket *msg,ManetAddress &dest)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     RREQ *rreq = dynamic_cast <RREQ *>(msg);
\par \hich\af2\dbch\af31505\loch\f2     if (!rreq)
\par \hich\af2\dbch\af31505\loch\f2         return false;
\par \hich\af2\dbch\af31505\loch\f2     dest = rreq->dest_addr;
\par \hich\af2\dbch\af31505\loch\f2     return true;
\par 
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool AO\hich\af2\dbch\af31505\loch\f2 DVUU::getDestAddressRreq(cPacket *msg,PacketDestOrigin &orgDest,RREQInfo &rreqInfo)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     RREQ *rreq = dynamic_cast <RREQ *>(msg);
\par \hich\af2\dbch\af31505\loch\f2     if (!rreq)
\par \hich\af2\dbch\af31505\loch\f2         return false;
\par \hich\af2\dbch\af31505\loch\f2     orgDest.setDests(rreq->dest_addr);
\par \hich\af2\dbch\af31505\loch\f2     orgDest.setOrigin(rreq->orig_addr);
\par \hich\af2\dbch\af31505\loch\f2     rreqI\hich\af2\dbch\af31505\loch\f2 nfo.origin_seqno = rreq->orig_seqno;
\par \hich\af2\dbch\af31505\loch\f2     rreqInfo.dest_seqno = rreq->dest_seqno;
\par \hich\af2\dbch\af31505\loch\f2     rreqInfo.hcnt = rreq->hcnt;
\par \hich\af2\dbch\af31505\loch\f2     rreqInfo.cost = rreq->cost;
\par \hich\af2\dbch\af31505\loch\f2     rreqInfo.hopfix = rreq->hopfix;
\par \hich\af2\dbch\af31505\loch\f2     return true;
\par \}
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #ifdef AODV_USE_STL_RT
\par \hich\af2\dbch\af31505\loch\f2 bool  NS_CLASS setRoute(const ManetAddress &dest,const ManetAddress &add, const int &ifaceIndex,const int &hops,const ManetAddress &mask)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     Enter_Method_Silent();
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr destAddr;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr nextAddr;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr rerr_dest;
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2    destAddr.s_addr = dest;
\par \hich\af2\dbch\af31505\loch\f2     nextAddr.s_addr = add;
\par \hich\af2\dbch\af31505\loch\f2     bool status=true;
\par \hich\af2\dbch\af31505\loch\f2     bool delEntry = add.isUnspecified();
\par 
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "setRoute %s next hop %s",ip_to_str(destAddr),ip_to_str(nextAddr));
\par 
\par \hich\af2\dbch\af31505\loch\f2     rt_table_t * fwd_rt = rt_table_find(destA\hich\af2\dbch\af31505\loch\f2 ddr);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (delEntry)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             RERR* rerr = rerr_create(0, destAddr, 0);
\par \hich\af2\dbch\af31505\loch\f2             DEBUG(LOG_DEBUG, 0, "setRoute Sending for unknown dest %s", ip_to_str(destAddr));
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid12063457 \hich\af2\dbch\af31505\loch\f2 /* Unicast the RERR to the }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid14578477 \hich\af2\dbch\af31505\loch\f2 source of the data transmission }{\rtlch\fcs1 \af2 
\ltrch\fcs0 \f2\cf17\insrsid12063457 \hich\af2\dbch\af31505\loch\f2 if possible, otherwise we broadcast it. */
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid14578477 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid12063457 \hich\af2\dbch\af31505\loch\f2             rerr_dest.s_addr = ManetAddress(IPv4Address(AODV_BROADCAST));
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid12063457 
\par \hich\af2\dbch\af31505\loch\f2             aodv_socket_send((AODV_msg *) rerr, rerr_dest,RERR_C\hich\af2\dbch\af31505\loch\f2 ALC_SIZE(rerr),
\par \hich\af2\dbch\af31505\loch\f2                              1, &DEV_IFINDEX(NS_IFINDEX));
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         ManetAddress dest = fwd_rt->dest_addr.s_addr;
\par \hich\af2\dbch\af31505\loch\f2         AodvRtTableMap::iterator it = aodvRtTableMap.find(dest);
\par \hich\af2\dbch\af31505\loch\f2         if (it != aodvRtTableMap.end())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2   \hich\af2\dbch\af31505\loch\f2           if (it->second != fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2                 opp_error("AODV routing table error");
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         aodvRtTableMap.erase(it);
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rt->state == VALID || fwd_rt->state == IMMORTAL)
\par \hich\af2\dbch\af31505\loch\f2             rt_tbl.num_active--;
\par \hich\af2\dbch\af31505\loch\f2         timer_remove(&f\hich\af2\dbch\af31505\loch\f2 wd_rt->rt_timer);
\par \hich\af2\dbch\af31505\loch\f2         timer_remove(&fwd_rt->hello_timer);
\par \hich\af2\dbch\af31505\loch\f2         timer_remove(&fwd_rt->ack_timer);
\par \hich\af2\dbch\af31505\loch\f2         rt_tbl.num_entries = aodvRtTableMap.size();
\par \hich\af2\dbch\af31505\loch\f2         free (fwd_rt);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         DEBUG(LOG_DEBUG, 0, "No route entry to delete");
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (ifaceIndex>=getNumInterfaces())
\par \hich\af2\dbch\af31505\loch\f2         status = false;
\par \hich\af2\dbch\af31505\loch\f2     ManetRoutingBase::setRoute(dest,add,ifaceIndex,hops,mask);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!delEntry && ifaceIndex<getNumInterfaces())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         fwd_rt = modifyAODVTables(destAddr,nextAddr,hops,(uint32_t) SI\hich\af2\dbch\af31505\loch\f2 MTIME_DBL(simTime()), 0xFFFF,IMMORTAL,0, ifaceIndex);
\par \hich\af2\dbch\af31505\loch\f2         status = (fwd_rt!=NULL);
\par 
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     return status;
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool  NS_CLASS setRoute(const ManetAddress &dest,const ManetAddress &add, const char  *ifaceName,const int &hops,const ManetAddress &mask)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     Enter_Method_Silent();
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr destAddr;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr nextAddr;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr rerr_dest;
\par \hich\af2\dbch\af31505\loch\f2     destAddr.s_addr = dest;
\par \hich\af2\dbch\af31505\loch\f2     nextAddr.s_addr = add;
\par \hich\af2\dbch\af31505\loch\f2     bool status=true;
\par \hich\af2\dbch\af31505\loch\f2     int index;
\par \hich\af2\dbch\af31505\loch\f2     bool delEntry = add.isUnspecified();
\par 
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "setRoute %s next hop %s",ip_to_str(destAddr),ip_to_str(nextAddr));
\par \hich\af2\dbch\af31505\loch\f2     rt_table_t * fwd_rt = rt_table_find(destAddr);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (delEntry)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             RERR* rerr = rerr_create(0, destAddr, 0);
\par \hich\af2\dbch\af31505\loch\f2     \hich\af2\dbch\af31505\loch\f2         DEBUG(LOG_DEBUG, 0, "setRoute Sending for unknown dest %s", ip_to_str(destAddr));
\par 
\par \hich\af2\dbch\af31505\loch\f2             /* Unicast the RERR to the source of the data transmission
\par \hich\af2\dbch\af31505\loch\f2              * if possible, otherwise we broadcast it. */
\par \hich\af2\dbch\af31505\loch\f2             rerr_dest.s_addr = Manet\hich\af2\dbch\af31505\loch\f2 Address(IPv4Address(AODV_BROADCAST));
\par 
\par \hich\af2\dbch\af31505\loch\f2             aodv_socket_send((AODV_msg *) rerr, rerr_dest,RERR_CALC_SIZE(rerr),
\par \hich\af2\dbch\af31505\loch\f2                              1, &DEV_IFINDEX(NS_IFINDEX));
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         ManetAddress dest = fwd_rt->dest_addr.s_addr;
\par \hich\af2\dbch\af31505\loch\f2         AodvRt\hich\af2\dbch\af31505\loch\f2 TableMap::iterator it = aodvRtTableMap.find(dest);
\par \hich\af2\dbch\af31505\loch\f2         if (it != aodvRtTableMap.end())
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (it->second != fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2                 opp_error("AODV routing table error");
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         aodvRtTableMap.erase(it);
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rt\hich\af2\dbch\af31505\loch\f2 ->state == VALID || fwd_rt->state == IMMORTAL)
\par \hich\af2\dbch\af31505\loch\f2             rt_tbl.num_active--;
\par \hich\af2\dbch\af31505\loch\f2         timer_remove(&fwd_rt->rt_timer);
\par \hich\af2\dbch\af31505\loch\f2         timer_remove(&fwd_rt->hello_timer);
\par \hich\af2\dbch\af31505\loch\f2         timer_remove(&fwd_rt->ack_timer);
\par \hich\af2\dbch\af31505\loch\f2         rt_tbl.num_entries = aodvRtTableMap.size();
\par \hich\af2\dbch\af31505\loch\f2         free (fwd_rt);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         DEBUG(LOG_DEBUG, 0, "No route entry to delete");
\par 
\par \hich\af2\dbch\af31505\loch\f2     for (index = 0; index <getNumInterfaces(); index++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (strcmp(ifaceName, getInterfaceEntr\hich\af2\dbch\af31505\loch\f2 y(index)->getName())==0) break;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     if (index>=getNumInterfaces())
\par \hich\af2\dbch\af31505\loch\f2         status = false;
\par 
\par \hich\af2\dbch\af31505\loch\f2     ManetRoutingBase::setRoute(dest,add,index,hops,mask);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!delEntry && index<getNumInterfaces())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         fwd_rt = modifyAODVTables(destAddr,nex\hich\af2\dbch\af31505\loch\f2 tAddr,hops,(uint32_t) SIMTIME_DBL(simTime()), 0xFFFF,IMMORTAL,0, index);
\par \hich\af2\dbch\af31505\loch\f2         status = (fwd_rt!=NULL);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     return status;
\par \}
\par \hich\af2\dbch\af31505\loch\f2 #else
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool  NS_CLASS setRoute(const ManetAddress &dest,const ManetAddress &add, const int &ifaceIndex,const int &hops,const ManetAddress &mask)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     Enter_Method_Silent();
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr destAddr;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr nextAddr;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr rerr_dest;
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2    destAddr.s_addr = dest;
\par \hich\af2\dbch\af31505\loch\f2     nextAddr.s_addr = add;
\par \hich\af2\dbch\af31505\loch\f2     bool status=true;
\par \hich\af2\dbch\af31505\loch\f2     bool delEntry = (add == (ManetAddress)0);
\par 
\par \hich\af2\dbch\af31505\loch\f2     DEBUG(LOG_DEBUG, 0, "setRoute %s next hop %s",ip_to_str(destAddr),ip_to_str(nextAddr));
\par 
\par \hich\af2\dbch\af31505\loch\f2     rt_table_t * fwd_rt = rt_table_find(\hich\af2\dbch\af31505\loch\f2 destAddr);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (delEntry)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             RERR* rerr = rerr_create(0, destAddr, 0);
\par \hich\af2\dbch\af31505\loch\f2             DEBUG(LOG_DEBUG, 0, "setRoute Sending for unknown dest %s", ip_to_str(destAddr));
\par 
\par \hich\af2\dbch\af31505\loch\f2             /* Unicast the RERR to the so\hich\af2\dbch\af31505\loch\f2 urce of the data transmission
\par \hich\af2\dbch\af31505\loch\f2              * if possible, otherwise we broadcast it. */
\par \hich\af2\dbch\af31505\loch\f2             rerr_dest.s_addr = AODV_BROADCAST;
\par 
\par \hich\af2\dbch\af31505\loch\f2             aodv_socket_send((AODV_msg *) rerr, rerr_dest,RERR_CALC_SIZE(rerr),
\par \hich\af2\dbch\af31505\loch\f2                              1, &DEV_IFINDEX(NS_IFINDEX));
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         list_detach(&fwd_rt->l);
\par \hich\af2\dbch\af31505\loch\f2         precursor_list_destroy(fwd_rt);
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rt->state == VALID || fwd_rt->state == IMMORTAL)
\par \hich\af2\dbch\af31505\loch\f2             rt_tbl.num_active--;
\par \hich\af2\dbch\af31505\loch\f2         timer_re\hich\af2\dbch\af31505\loch\f2 move(&fwd_rt->rt_timer);
\par \hich\af2\dbch\af31505\loch\f2         timer_remove(&fwd_rt->hello_timer);
\par \hich\af2\dbch\af31505\loch\f2         timer_remove(&fwd_rt->ack_timer);
\par \hich\af2\dbch\af31505\loch\f2         rt_tbl.num_entries--;
\par \hich\af2\dbch\af31505\loch\f2         free (fwd_rt);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         DEBUG(LOG_DEBUG, 0, "No route entry to delete");
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (ifaceIndex>\hich\af2\dbch\af31505\loch\f2 =getNumInterfaces())
\par \hich\af2\dbch\af31505\loch\f2         status = false;
\par \hich\af2\dbch\af31505\loch\f2     ManetRoutingBase::setRoute(dest,add,ifaceIndex,hops,mask);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!delEntry && ifaceIndex<getNumInterfaces())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         fwd_rt = modifyAODVTables(destAddr,nextAddr,hops,(uint32_t) SIMTIME_DBL(simTime()\hich\af2\dbch\af31505\loch\f2 ), 0xFFFF,IMMORTAL,0, ifaceIndex);
\par \hich\af2\dbch\af31505\loch\f2         status = (fwd_rt!=NULL);
\par 
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     return status;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool  NS_CLASS setRoute(const ManetAddress &dest,const ManetAddress &add, const char  *ifaceName,const int &hops,const ManetAddress &mask)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     Enter_Method_Silent();
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr destAddr;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr nextAddr;
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr rerr_dest;
\par \hich\af2\dbch\af31505\loch\f2     destAddr.s_addr = dest;
\par \hich\af2\dbch\af31505\loch\f2     nextAddr.s_addr = add;
\par \hich\af2\dbch\af31505\loch\f2     bool status=true;
\par \hich\af2\dbch\af31505\loch\f2     int index;
\par \hich\af2\dbch\af31505\loch\f2     bool delEntry = (add == (ManetAddress)0);
\par 
\par \hich\af2\dbch\af31505\loch\f2   \hich\af2\dbch\af31505\loch\f2   DEBUG(LOG_DEBUG, 0, "setRoute %s next hop %s",ip_to_str(destAddr),ip_to_str(nextAddr));
\par \hich\af2\dbch\af31505\loch\f2     rt_table_t * fwd_rt = rt_table_find(destAddr);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (delEntry)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             RERR* rerr = rerr_create(0, destAddr, 0);
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2       DEBUG(LOG_DEBUG, 0, "setRoute Sending for unknown dest %s", ip_to_str(destAddr));
\par 
\par \hich\af2\dbch\af31505\loch\f2             /* Unicast the RERR to the source of the data transmission
\par \hich\af2\dbch\af31505\loch\f2              * if possible, otherwise we broadcast it. */
\par \hich\af2\dbch\af31505\loch\f2             rerr_dest.s_addr = AODV_BR\hich\af2\dbch\af31505\loch\f2 OADCAST;
\par 
\par \hich\af2\dbch\af31505\loch\f2             aodv_socket_send((AODV_msg *) rerr, rerr_dest,RERR_CALC_SIZE(rerr),
\par \hich\af2\dbch\af31505\loch\f2                              1, &DEV_IFINDEX(NS_IFINDEX));
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         list_detach(&fwd_rt->l);
\par \hich\af2\dbch\af31505\loch\f2         precursor_list_destroy(fwd_rt);
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rt->state == VALID || fwd_rt->state == IMMORTAL)
\par \hich\af2\dbch\af31505\loch\f2             rt_tbl.num_active--;
\par \hich\af2\dbch\af31505\loch\f2         timer_remove(&fwd_rt->rt_timer);
\par \hich\af2\dbch\af31505\loch\f2         timer_remove(&fwd_rt->hello_timer);
\par \hich\af2\dbch\af31505\loch\f2         timer_remove(&fwd_rt->ack_timer);
\par \hich\af2\dbch\af31505\loch\f2         rt_tbl.num_entries--;
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2        free (fwd_rt);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         DEBUG(LOG_DEBUG, 0, "No route entry to delete");
\par 
\par \hich\af2\dbch\af31505\loch\f2     for (index = 0; index <getNumInterfaces(); index++)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (strcmp(ifaceName, getInterfaceEntry(index)->getName())==0) break;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     if (index>=\hich\af2\dbch\af31505\loch\f2 getNumInterfaces())
\par \hich\af2\dbch\af31505\loch\f2         status = false;
\par 
\par \hich\af2\dbch\af31505\loch\f2     ManetRoutingBase::setRoute(dest,add,index,hops,mask);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (!delEntry && index<getNumInterfaces())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         fwd_rt = modifyAODVTables(destAddr,nextAddr,hops,(uint32_t) SIMTIME_DBL(simTime()), 0xFFFF,\hich\af2\dbch\af31505\loch\f2 IMMORTAL,0, index);
\par \hich\af2\dbch\af31505\loch\f2         status = (fwd_rt!=NULL);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2     return status;
\par \}
\par \hich\af2\dbch\af31505\loch\f2 #endif
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool NS_CLASS isThisRrepPrevSent(cMessage *msg)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (!checkRrep)
\par \hich\af2\dbch\af31505\loch\f2         return false;
\par \hich\af2\dbch\af31505\loch\f2     RREP *rrep = dynamic_cast<RREP *>(msg);
\par \hich\af2\dbch\af31505\loch\f2     if (rrep->hcnt == 0)
\par \hich\af2\dbch\af31505\loch\f2             return false; // this packet had this node like destination, in this case the node must send the packet
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (rrep == NULL)
\par \hich\af2\dbch\af31505\loch\f2          return false; // no information, send
\par 
\par \hich\af2\dbch\af31505\loch\f2     PacketDestOrigin destOrigin(rrep->dest_addr,rrep->orig_addr);
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2  std::map<PacketDestOrigin,RREPProcessed>::iterator it = rrepProc.find(destOrigin);
\par \hich\af2\dbch\af31505\loch\f2     if (it != rrepProc.end()) // only send if the seq num is bigger
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         if (it->second.dest_seqno > rrep->dest_seqno)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             return true;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else if (it->second.dest_seqno == rrep->dest_seqno && it->second.totalHops < rrep->totalHops)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             return true;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return false;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS actualizeTablesWithCollaborative(const ManetAddress &dest)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (!getCollaborativeProtocol())
\par \hich\af2\dbch\af31505\loch\f2         return;
\par 
\par \hich\af2\dbch\af31505\loch\f2     struct in_addr next_hop,destination;
\par \hich\af2\dbch\af31505\loch\f2     int iface;
\par \hich\af2\dbch\af31505\loch\f2     double cost;
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (getCollaborativeProtocol()->getNextHop(dest,next_hop.s_addr,iface,cost))
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         u_int8_t hops = cost;
\par \hich\af2\dbch\af31505\loch\f2         des\hich\af2\dbch\af31505\loch\f2 tination.s_addr = dest;
\par \hich\af2\dbch\af31505\loch\f2         std::map<ManetAddress,u_int32_t *>::iterator it =  mapSeqNum.find(dest);
\par \hich\af2\dbch\af31505\loch\f2         if (it == mapSeqNum.end())
\par \hich\af2\dbch\af31505\loch\f2             opp_error("node not found in mapSeqNum");
\par \hich\af2\dbch\af31505\loch\f2         uint32_t sqnum = *(it->second);
\par \hich\af2\dbch\af31505\loch\f2         uint32_t life \hich\af2\dbch\af31505\loch\f2 = PATH_DISCOVERY_TIME - 2 * hops * NODE_TRAVERSAL_TIME;
\par \hich\af2\dbch\af31505\loch\f2         int ifindex = -1;
\par 
\par \hich\af2\dbch\af31505\loch\f2         rt_table_t * fwd_rt = rt_table_find(destination);
\par 
\par \hich\af2\dbch\af31505\loch\f2         for (int i = 0; i < getNumInterfaces(); i++)
\par \hich\af2\dbch\af31505\loch\f2         \{
\par \hich\af2\dbch\af31505\loch\f2             if (getInterfaceEntry(i)->getInterfaceId() == iface)
\par \hich\af2\dbch\af31505\loch\f2             \{
\par \hich\af2\dbch\af31505\loch\f2                 ifindex = i;
\par \hich\af2\dbch\af31505\loch\f2                 break;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (ifindex == -1)
\par \hich\af2\dbch\af31505\loch\f2             opp_error("interface not found");
\par 
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rt)
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2       fwd_rt = rt_table_update(fwd_rt, next_hop, hops, sqnum, life, VALID, fwd_rt->flags,ifindex, cost, cost+1);
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2             fwd_rt = rt_table_insert(destination, next_hop, hops, sqnum, life, VALID, 0, ifindex, cost, cost+1);
\par 
\par \hich\af2\dbch\af31505\loch\f2         hops = 1\hich\af2\dbch\af31505\loch\f2 ;
\par \hich\af2\dbch\af31505\loch\f2         rt_table_t * fwd_rtAux = rt_table_find(next_hop);
\par \hich\af2\dbch\af31505\loch\f2         it =  mapSeqNum.find(next_hop.s_addr);
\par \hich\af2\dbch\af31505\loch\f2         if (it == mapSeqNum.end())
\par \hich\af2\dbch\af31505\loch\f2             opp_error("node not found in mapSeqNum");
\par \hich\af2\dbch\af31505\loch\f2         sqnum = *(it->second);
\par \hich\af2\dbch\af31505\loch\f2         life = PATH_DISCOVERY\hich\af2\dbch\af31505\loch\f2 _TIME - 2 * (int)hops * NODE_TRAVERSAL_TIME;
\par \hich\af2\dbch\af31505\loch\f2         if (fwd_rtAux)
\par \hich\af2\dbch\af31505\loch\f2             fwd_rtAux = rt_table_update(fwd_rtAux, next_hop, hops, sqnum, life, VALID, fwd_rtAux->flags,ifindex, hops, hops+1);
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2             fwd_rtAux = rt_table_insert(next_ho\hich\af2\dbch\af31505\loch\f2 p, next_hop, hops, sqnum, life, VALID, 0, ifindex, hops, hops+1);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool NS_CLASS handleNodeStart(IDoneCallback *doneCallback)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (isRoot)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         timer_init(&proactive_rreq_timer,&NS_CLASS rreq_proactive, NULL);
\par \hich\af2\dbch\af31505\loch\f2         timer_set_timeout(&proactive_rreq_timer, par("startRreqProactive").longValue());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     propagateProactive = par("propagateProactive");
\par \hich\af2\dbch\af31505\loch\f2     strcpy(nodeName,getParentModule()->getParentModule()->getFullName());
\par \hich\af2\dbch\af31505\loch\f2     aodv_socket_init();
\par \hich\af2\dbch\af31505\loch\f2     rt_tab\hich\af2\dbch\af31505\loch\f2 le_init();
\par \hich\af2\dbch\af31505\loch\f2     packet_queue_init();
\par \hich\af2\dbch\af31505\loch\f2     startAODVUUAgent();
\par \hich\af2\dbch\af31505\loch\f2     return true;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool NS_CLASS handleNodeShutdown(IDoneCallback *doneCallback)
\par \{
\par 
\par \hich\af2\dbch\af31505\loch\f2     while (!aodvRtTableMap.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         free (aodvRtTableMap.begin()->second);
\par \hich\af2\dbch\af31505\loch\f2         aodvRtTableMap\hich\af2\dbch\af31505\loch\f2 .erase(aodvRtTableMap.begin());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     while (!rreq_records.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         free (rreq_records.back());
\par \hich\af2\dbch\af31505\loch\f2         rreq_records.pop_back();
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     while (!rreq_blacklist.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         free (rreq_blacklist.begin()->second);
\par \hich\af2\dbch\af31505\loch\f2         rreq_blacklist.erase(rreq_blacklist.begin());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     while (!seekhead.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete (seekhead.begin()->second);
\par \hich\af2\dbch\af31505\loch\f2         seekhead.erase(seekhead.begin());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     packet_queue_destroy();
\par \hich\af2\dbch\af31505\loch\f2     cancelEvent(sendMessageEvent);
\par \hich\af2\dbch\af31505\loch\f2     l\hich\af2\dbch\af31505\loch\f2 og_cleanup();
\par \hich\af2\dbch\af31505\loch\f2     return true;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void NS_CLASS handleNodeCrash()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     while (!aodvRtTableMap.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         free (aodvRtTableMap.begin()->second);
\par \hich\af2\dbch\af31505\loch\f2         aodvRtTableMap.erase(aodvRtTableMap.begin());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     while (!rreq_records.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         free (rreq_records.back());
\par \hich\af2\dbch\af31505\loch\f2         rreq_records.pop_back();
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     while (!rreq_blacklist.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         free (rreq_blacklist.begin()->second);
\par \hich\af2\dbch\af31505\loch\f2         rreq_blacklist.erase(rreq_blacklist.begin());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par 
\par \hich\af2\dbch\af31505\loch\f2     while (!seekhead.empty())
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         delete (seekhead.begin()->second);
\par \hich\af2\dbch\af31505\loch\f2         seekhead.erase(seekhead.begin());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     packet_queue_destroy();
\par \hich\af2\dbch\af31505\loch\f2     cancelEvent(sendMessageEvent);
\par \hich\af2\dbch\af31505\loch\f2     log_cleanup();
\par \}
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid12063457 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b03041400060008000000210030dd4329a8060000a41b0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87
615b8116d8a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad
79482a9c0498f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b
5d8a314d3c94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab
999fb7b4717509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9
699640f6719e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd586
8b37a088d1e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d6
0cf03ac1a5193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f
9e7ef3f2d117d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be
15c308d3f28acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a9979
3849c26ae66252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d
32a423279a668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2a
f074481847bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86
e877f0034e16bafb0e258ebb4faf06b769e888340b103d331115bebc4eb813bf83291b63624a0d1475a756c734f9bbc2cd28546ecbe1e20a3794ca175f3fae90
fb6d2dd99bb07b55e5ccf68942bd0877b23c77b908e8db5f9db7f024d9239010f35bd4bbe2fcae387bfff9e2bc289f2fbe24cfaa301468dd8bd846dbb4ddf1c2
ae7b4c191ba8292337a469bc25ec3d411f06f53a73e224c5292c8de0516732307070a1c0660d125c7d44553488700a4d7bddd3444299910e254ab984c3a219ae
a4adf1d0f82b7bd46cea4388ad1c12ab5d1ed8e1153d9c9f350a3246aad01c6873462b9ac05999ad5cc988826eafc3acae853a33b7ba11cd1445875ba1b236b1
399483c90bd560b0b0263435085a21b0f22a9cf9356b38ec6046026d77eba3dc2dc60b17e92219e180643ed27acffba86e9c94c7ca9c225a0f1b0cfae0788ad5
4adc5a9aec1b703b8b93caec1a0bd8e5de7b132fe5113cf312503b998e2c2927274bd051db6b35979b1ef271daf6c6704e86c73805af4bdd476216c26593af84
0dfb5393d964f9cc9bad5c313709ea70f561ed3ea7b053075221d51696910d0d339585004b34272bff7213cc7a510a5454a3b349b1b206c1f0af490176745d4b
c663e2abb2b34b23da76f6352ba57ca2881844c1111ab189d8c7e07e1daaa04f40255c77988aa05fe06e4e5bdb4cb9c5394bbaf28d98c1d971ccd20867e556a7
689ec9166e0a522183792b8907ba55ca6e943bbf2a26e52f48957218ffcf54d1fb09dc3eac04da033e5c0d0b8c74a6b43d2e54c4a10aa511f5fb021a07533b20
5ae07e17a621a8e082dafc17e450ffb739676998b48643a4daa7211214f623150942f6a02c99e83b85583ddbbb2c4996113211551257a656ec1139246ca86be0
aadedb3d1441a89b6a929501833b197fee7b9641a3503739e57c732a59b1f7da1cf8a73b1f9bcca0945b874d4393dbbf10b1680f66bbaa5d6f96e77b6f59113d
316bb31a795600b3d256d0cad2fe354538e7566b2bd69cc6cbcd5c38f0e2bcc63058344429dc2121fd07f63f2a7c66bf76e80d75c8f7a1b622f878a18941d840
545fb28d07d205d20e8ea071b283369834296bdaac75d256cb37eb0bee740bbe278cad253b8bbfcf69eca23973d939b97891c6ce2cecd8da8e2d343578f6648a
c2d0383fc818c798cf64e52f597c740f1cbd05df0c264c49134cf09d4a60e8a107260f20f92d47b374e32f000000ffff0300504b030414000600080000002100
0dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f7
8277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89
d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd500
1996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0f
bfff0000001c0200001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6
a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a
0000001c00000000000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d00140006000800000021
0030dd4329a8060000a41b00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d001400060008
00000021000dd1909fb60000001b0100002700000000000000000000000000b20900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000ad0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e50000000000000000000000002044
22b854c4d801feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}