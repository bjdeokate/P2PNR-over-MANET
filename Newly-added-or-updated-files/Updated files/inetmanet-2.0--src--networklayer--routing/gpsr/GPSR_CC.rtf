{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f34\fbidi \froman\fcharset1\fprq2{\*\panose 02040503050406030204}Cambria Math;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f39\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f40\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f42\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f43\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f44\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f45\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f46\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f47\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f59\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f60\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f62\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f63\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f64\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f65\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f66\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f67\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31573\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\fhiminor\f31574\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green176\blue80;}{\*\defchp \fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 
\ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused 
Normal Table;}}{\*\rsidtbl \rsid4022136\rsid5849421}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\operator LENOVO}{\creatim\yr2022\mo9\dy9\hr19\min10}
{\revtim\yr2022\mo9\dy9\hr19\min13}{\version2}{\edmins3}{\nofpages15}{\nofwords3622}{\nofchars20647}{\nofcharsws24221}{\vern49169}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}
\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\rsidroot5849421 \nouicompat \fet0{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 
\fs22\lang1033\langfe1033\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid4022136 \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // Copyright (C) 2004 Andras Varga
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // This program is free software; you can redistribute it and/or
\par \hich\af2\dbch\af31505\loch\f2 // modify it under the terms of the GNU General Public License
\par \hich\af2\dbch\af31505\loch\f2 // as published by the Free Software Foundation; either version 2
\par \hich\af2\dbch\af31505\loch\f2 // of the License, or (at your option) any later version.
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // This program is distributed in the hope that it will be useful,
\par \hich\af2\dbch\af31505\loch\f2 // but WITHOUT ANY WARRANTY; without even the implied warranty of
\par \hich\af2\dbch\af31505\loch\f2 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See t\hich\af2\dbch\af31505\loch\f2 he
\par \hich\af2\dbch\af31505\loch\f2 // GNU General Public License for more details.
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // You should have received a copy of the GNU General Public License
\par \hich\af2\dbch\af31505\loch\f2 // along with this program; if not, write to the Free Software
\par \hich\af2\dbch\af31505\loch\f2 // Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-13\hich\af2\dbch\af31505\loch\f2 07, USA.
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 #include "GPSR.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "InterfaceTableAccess.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPProtocolId_m.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPSocket.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "IPv4ControlInfo.h"
\par \hich\af2\dbch\af31505\loch\f2 #include "NodeOperations.h"
\par 
\par \hich\af2\dbch\af31505\loch\f2 Define_Module(GPSR);
\par 
\par \hich\af2\dbch\af31505\loch\f2 #define GPSR_EV EV << "GPSR at " << getHostName() << " "
\par 
\par \hich\af2\dbch\af31505\loch\f2 // TODO: use some header?
\par \hich\af2\dbch\af31505\loch\f2 static double const NaN = 0.0 / 0.0;
\par 
\par \hich\af2\dbch\af31505\loch\f2 static inline double determinant(double a1, double a2, double b1, double b2) \{
\par \hich\af2\dbch\af31505\loch\f2     return a1 * b2 - a2 * b1;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 static inline bool isNaN(double d) \{ return d != d;\}
\par 
\par \hich\af2\dbch\af31505\loch\f2 // KLUDGE: implement posit\hich\af2\dbch\af31505\loch\f2 ion registry protocol
\par \hich\af2\dbch\af31505\loch\f2 PositionTable GPSR::globalPositionTable;
\par 
\par \hich\af2\dbch\af31505\loch\f2 GPSR::GPSR()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     host = NULL;
\par \hich\af2\dbch\af31505\loch\f2     nodeStatus = NULL;
\par \hich\af2\dbch\af31505\loch\f2     mobility = NULL;
\par \hich\af2\dbch\af31505\loch\f2     interfaceTable = NULL;
\par \hich\af2\dbch\af31505\loch\f2     routingTable = NULL;
\par \hich\af2\dbch\af31505\loch\f2     networkProtocol = NULL;
\par \hich\af2\dbch\af31505\loch\f2     beaconTimer = NULL;
\par \hich\af2\dbch\af31505\loch\f2     purgeNei\hich\af2\dbch\af31505\loch\f2 ghborsTimer = NULL;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 GPSR::~GPSR()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     cancelAndDelete(beaconTimer);
\par \hich\af2\dbch\af31505\loch\f2     cancelAndDelete(purgeNeighborsTimer);
\par \hich\af2\dbch\af31505\loch\f2     nb = NotificationBoardAccess().getIfExists(this);
\par \hich\af2\dbch\af31505\loch\f2     if (nb)
\par \hich\af2\dbch\af31505\loch\f2         nb->unsubscribe(this, NF_LINK_BREAK);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // module interface
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::initialize(int stage)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     cSimpleModule::initialize(stage);
\par 
\par \hich\af2\dbch\af31505\loch\f2     if (stage == 0)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         // GPSR parameters
\par \hich\af2\dbch\af31505\loch\f2         planarizationMode = (GPSRPlanarizationMode)(int)par("planarizationMode");
\par \hich\af2\dbch\af31505\loch\f2         interfaces = par("interfaces");
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2   beaconInterval = par("beaconInterval");
\par \hich\af2\dbch\af31505\loch\f2         maxJitter = par("maxJitter");
\par \hich\af2\dbch\af31505\loch\f2         neighborValidityInterval = par("neighborValidityInterval");
\par \hich\af2\dbch\af31505\loch\f2         // context
\par \hich\af2\dbch\af31505\loch\f2         host = getContainingNode(this);
\par \hich\af2\dbch\af31505\loch\f2         nodeStatus = dynamic_cast<NodeStatus *>(h\hich\af2\dbch\af31505\loch\f2 ost->getSubmodule("status"));
\par \hich\af2\dbch\af31505\loch\f2         interfaceTable = InterfaceTableAccess().get(this);
\par \hich\af2\dbch\af31505\loch\f2         mobility = check_and_cast<IMobility *>(host->getSubmodule("mobility"));
\par \hich\af2\dbch\af31505\loch\f2         routingTable = check_and_cast<IRoutingTable *>(getModuleByPath(par("routingTabl\hich\af2\dbch\af31505\loch\f2 eModule")));
\par \hich\af2\dbch\af31505\loch\f2         networkProtocol = check_and_cast<INetfilter *>(getModuleByPath(par("networkProtocolModule")));
\par \hich\af2\dbch\af31505\loch\f2         // internal
\par \hich\af2\dbch\af31505\loch\f2         beaconTimer = new cMessage("BeaconTimer");
\par \hich\af2\dbch\af31505\loch\f2         purgeNeighborsTimer = new cMessage("PurgeNeighborsTimer");
\par \hich\af2\dbch\af31505\loch\f2         scheduleBeaconTimer();
\par \hich\af2\dbch\af31505\loch\f2         schedulePurgeNeighborsTimer();
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else if (stage == 5)
\par \hich\af2\dbch\af31505\loch\f2     \{
\par \hich\af2\dbch\af31505\loch\f2         IPSocket socket(gate("ipOut"));
\par \hich\af2\dbch\af31505\loch\f2         socket.registerProtocol(IP_PROT_MANET);
\par 
\par \hich\af2\dbch\af31505\loch\f2         globalPositionTable.clear();
\par \hich\af2\dbch\af31505\loch\f2         nb = Notificati\hich\af2\dbch\af31505\loch\f2 onBoardAccess().get();
\par \hich\af2\dbch\af31505\loch\f2         nb->subscribe(this, NF_LINK_BREAK);
\par \hich\af2\dbch\af31505\loch\f2         networkProtocol->registerHook(0, this);
\par \hich\af2\dbch\af31505\loch\f2         if (isNodeUp())
\par \hich\af2\dbch\af31505\loch\f2             configureInterfaces();
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::handleMessage(cMessage * message)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (message->isSelfMes\hich\af2\dbch\af31505\loch\f2 sage())
\par \hich\af2\dbch\af31505\loch\f2         processSelfMessage(message);
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         processMessage(message);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // handling messages
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::processSelfMessage(cMessage * message)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (message == beaconTimer)
\par \hich\af2\dbch\af31505\loch\f2         processBeaconTimer();
\par \hich\af2\dbch\af31505\loch\f2     else if (message == purgeNeighborsTimer)
\par \hich\af2\dbch\af31505\loch\f2         processPurgeNeighborsTimer();
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         throw cRuntimeError("Unknown self message");
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::processMessage(cMessage * message)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (dynamic_cast<UDPPacket *>(message))
\par \hich\af2\dbch\af31505\loch\f2         processU\hich\af2\dbch\af31505\loch\f2 DPPacket((UDPPacket *)message);
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         throw cRuntimeError("Unknown message");
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid5849421 \hich\af2\dbch\af31505\loch\f2 // The timer to send the beacon frame is scheduled. }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid4022136 
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid4022136 \hich\af2\dbch\af31505\loch\f2 void GPSR::scheduleBeaconTimer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSR_EV << "Scheduling beacon timer" << endl;
\par \hich\af2\dbch\af31505\loch\f2     scheduleAt(simTime() + beaconInterval, beaconTimer);
\par \}
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid5849421 \hich\af2\dbch\af31505\loch\f2 // The beacon frame \hich\af2\dbch\af31505\loch\f2 received\hich\af2\dbch\af31505\loch\f2  is processed. 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid4022136 \hich\af2\dbch\af31505\loch\f2 void GPSR::processBeaconTimer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSR_EV << "Processing beacon timer" << endl;
\par \hich\af2\dbch\af31505\loch\f2     IPvXAddress selfAddress = getSelfAddress();
\par \hich\af2\dbch\af31505\loch\f2     if (!selfAddress.isUnspecified()) \{
\par \hich\af2\dbch\af31505\loch\f2         sendBeacon(creat\hich\af2\dbch\af31505\loch\f2 eBeacon(), uniform(0, maxJitter).dbl());
\par \hich\af2\dbch\af31505\loch\f2         // KLUDGE: implement position registry protocol
\par \hich\af2\dbch\af31505\loch\f2         globalPositionTable.setPosition(selfAddress, mobility->getCurrentPosition());
\par \hich\af2\dbch\af31505\loch\f2     \}
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid4022136 \hich\af2\dbch\af31505\loch\f2     scheduleBeaconTimer();
\par \hich\af2\dbch\af31505\loch\f2     schedulePurgeNeighborsTimer();
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // handling purge neighbors timers
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::schedulePurgeNeighborsTimer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSR_EV << "Scheduling purge neighbors timer" << endl;
\par \hich\af2\dbch\af31505\loch\f2     simtime_t nextExpiration = getNextNeighborExpiration();
\par \hich\af2\dbch\af31505\loch\f2     if (nextExpiration == SimTime::getMaxTime()) \{
\par \hich\af2\dbch\af31505\loch\f2    \hich\af2\dbch\af31505\loch\f2      if (purgeNeighborsTimer->isScheduled())
\par \hich\af2\dbch\af31505\loch\f2             cancelEvent(purgeNeighborsTimer);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else \{
\par \hich\af2\dbch\af31505\loch\f2         if (!purgeNeighborsTimer->isScheduled())
\par \hich\af2\dbch\af31505\loch\f2             scheduleAt(nextExpiration, purgeNeighborsTimer);
\par \hich\af2\dbch\af31505\loch\f2         else \{
\par \hich\af2\dbch\af31505\loch\f2             if (purgeNeighborsTimer->getArrivalTime() != nextExpiration) \{
\par \hich\af2\dbch\af31505\loch\f2                 cancelEvent(purgeNeighborsTimer);
\par \hich\af2\dbch\af31505\loch\f2                 scheduleAt(nextExpiration, purgeNeighborsTimer);
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::processPurgeNeighborsT\hich\af2\dbch\af31505\loch\f2 imer()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSR_EV << "Processing purge neighbors timer" << endl;
\par \hich\af2\dbch\af31505\loch\f2     purgeNeighbors();
\par \hich\af2\dbch\af31505\loch\f2     schedulePurgeNeighborsTimer();
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // handling UDP packets
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::sendUDPPacket(UDPPacket * packet, double delay)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     if (delay == 0)
\par \hich\af2\dbch\af31505\loch\f2         send(pac\hich\af2\dbch\af31505\loch\f2 ket, "ipOut");
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         sendDelayed(packet, delay, "ipOut");
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::processUDPPacket(UDPPacket * packet)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     cPacket * encapsulatedPacket = packet->decapsulate();
\par \hich\af2\dbch\af31505\loch\f2     if (dynamic_cast<GPSRBeacon *>(encapsulatedPacket))
\par \hich\af2\dbch\af31505\loch\f2         processBeacon((GPSRBeacon *)encapsulatedPacket);
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         throw cRuntimeError("Unknown UDP packet");
\par \hich\af2\dbch\af31505\loch\f2     delete packet;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // handling beacons
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 GPSRBeacon * GPSR::createBeacon()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSRBeacon * beacon = new GPSRBeacon();
\par \hich\af2\dbch\af31505\loch\f2     beacon\hich\af2\dbch\af31505\loch\f2 ->setAddress(getSelfAddress());
\par \hich\af2\dbch\af31505\loch\f2     beacon->setPosition(mobility->getCurrentPosition());
\par \hich\af2\dbch\af31505\loch\f2     return beacon;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::sendBeacon(GPSRBeacon * beacon, double delay)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSR_EV << "Sending beacon: address = " << beacon->getAddress() << ", position = " << beacon->getPosition() << endl;
\par \hich\af2\dbch\af31505\loch\f2     IPv4ControlInfo * networkProtocolControlInfo = new IPv4ControlInfo();
\par \hich\af2\dbch\af31505\loch\f2     networkProtocolControlInfo->setProtocol(IP_PROT_MANET);
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2    networkProtocolControlInfo->setTimeToLive(255);
\par \hich\af2\dbch\af31505\loch\f2     networkProtocolControlInfo->setDestAddr(IPv4Address::LL_MANET_ROUTERS);
\par \hich\af2\dbch\af31505\loch\f2     networkProtocolControlInfo->setSrcAddr(getSelfAddress().get4());
\par \hich\af2\dbch\af31505\loch\f2     UDPPacket * udpPacket = new UDPPacket(beacon->getName())\hich\af2\dbch\af31505\loch\f2 ;
\par \hich\af2\dbch\af31505\loch\f2     udpPacket->encapsulate(beacon);
\par \hich\af2\dbch\af31505\loch\f2     udpPacket->setSourcePort(GPSR_UDP_PORT);
\par \hich\af2\dbch\af31505\loch\f2     udpPacket->setDestinationPort(GPSR_UDP_PORT);
\par \hich\af2\dbch\af31505\loch\f2     udpPacket->setControlInfo(networkProtocolControlInfo);
\par \hich\af2\dbch\af31505\loch\f2     sendUDPPacket(udpPacket, delay);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::processBeacon\hich\af2\dbch\af31505\loch\f2 (GPSRBeacon * beacon)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSR_EV << "Processing beacon: address = " << beacon->getAddress() << ", position = " << beacon->getPosition() << endl;
\par \hich\af2\dbch\af31505\loch\f2     neighborPositionTable.setPosition(beacon->getAddress(), beacon->getPosition());
\par \hich\af2\dbch\af31505\loch\f2     delete beacon;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // handling packets
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 GPSRPacket * GPSR::createPacket(IPvXAddress destination, cPacket * content)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSRPacket * gpsrPacket = new GPSRPacket(content->getName());
\par \hich\af2\dbch\af31505\loch\f2     gpsrPacket->setRoutingMode(GPSR_GREEDY_ROUTING);
\par \hich\af2\dbch\af31505\loch\f2     // KLUDGE: implement position registry protocol
\par \hich\af2\dbch\af31505\loch\f2     gpsrPacket->setDestinationPosition(getDestinationPosition(destination));
\par \hich\af2\dbch\af31505\loch\f2     gpsrPacket->setBitLength(computePacketBitLength(gpsrPacket));
\par \hich\af2\dbch\af31505\loch\f2     gpsrPacket->encapsulate(content);
\par \hich\af2\dbch\af31505\loch\f2     return gpsrPacket;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 int GPSR::computePacketBitLength(GPSRPacket * packet)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     // routingMode
\par \hich\af2\dbch\af31505\loch\f2     int routingMode = 1;
\par \hich\af2\dbch\af31505\loch\f2     // destinationPosition, perimeterRoutingStartPosition, perimeterRoutingForwardPosition
\par \hich\af2\dbch\af31505\loch\f2     int positions = 8 * 3 * 2 * 4;
\par \hich\af2\dbch\af31505\loch\f2     // currentFaceFirstSend\hich\af2\dbch\af31505\loch\f2 erAddress, currentFaceFirstReceiverAddress, senderAddress
\par \hich\af2\dbch\af31505\loch\f2     int addresses = 8 * 3 * 4;
\par \hich\af2\dbch\af31505\loch\f2     // TODO: address size
\par \hich\af2\dbch\af31505\loch\f2     return routingMode + positions + addresses;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // configuration
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool GPSR::isNodeUp() const
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return !nodeStatus || nodeStatus\hich\af2\dbch\af31505\loch\f2 ->getState() == NodeStatus::UP;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::configureInterfaces()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     // join multicast groups
\par \hich\af2\dbch\af31505\loch\f2     cPatternMatcher interfaceMatcher(interfaces, false, true, false);
\par \hich\af2\dbch\af31505\loch\f2     for (int i = 0; i < interfaceTable->getNumInterfaces(); i++) \{
\par \hich\af2\dbch\af31505\loch\f2         InterfaceEntry * interfaceEntry = interfaceTable->getInterface(i);
\par \hich\af2\dbch\af31505\loch\f2         if (interfaceEntry->isMulticast() && interfaceMatcher.matches(interfaceEntry->getName()))
\par \hich\af2\dbch\af31505\loch\f2             interfaceEntry->joinMulticastGroup(IPv4Address::LL_MANET_ROUTERS);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // position
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 Coord GPSR::intersectSections(Coord & begin1, Coord & end1, Coord & begin2, Coord & end2)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     double x1 = begin1.x;
\par \hich\af2\dbch\af31505\loch\f2     double y1 = begin1.y;
\par \hich\af2\dbch\af31505\loch\f2     double x2 = end1.x;
\par \hich\af2\dbch\af31505\loch\f2     double y2 = end1.y;
\par \hich\af2\dbch\af31505\loch\f2     double x3 = begin2.x;
\par \hich\af2\dbch\af31505\loch\f2     double y3 \hich\af2\dbch\af31505\loch\f2 = begin2.y;
\par \hich\af2\dbch\af31505\loch\f2     double x4 = end2.x;
\par \hich\af2\dbch\af31505\loch\f2     double y4 = end2.y;
\par \hich\af2\dbch\af31505\loch\f2     double a = determinant(x1, y1, x2, y2);
\par \hich\af2\dbch\af31505\loch\f2     double b = determinant(x3, y3, x4, y4);
\par \hich\af2\dbch\af31505\loch\f2     double c = determinant(x1 - x2, y1 - y2, x3 - x4, y3 - y4);
\par \hich\af2\dbch\af31505\loch\f2     double x = determinant(a, x1 - x2, b, x3 - x4) / c;
\par \hich\af2\dbch\af31505\loch\f2     double y = determinant(a, y1 - y2, b, y3 - y4) / c;
\par \hich\af2\dbch\af31505\loch\f2     if (x1 < x && x < x2 && x3 < x && x < x4 && y1 < y && y < y2 && y3 < y && y < y4)
\par \hich\af2\dbch\af31505\loch\f2         return Coord(x, y, 0);
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         return Coo\hich\af2\dbch\af31505\loch\f2 rd(NaN, NaN, NaN);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 Coord GPSR::getDestinationPosition(const IPvXAddress & address) const
\par \{
\par \hich\af2\dbch\af31505\loch\f2     // KLUDGE: implement position registry protocol
\par \hich\af2\dbch\af31505\loch\f2     return globalPositionTable.getPosition(address);
\par \}
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid5849421 \hich\af2\dbch\af31505\loch\f2 // The\hich\af2\dbch\af31505\loch\f2  location co-ordinates of\hich\af2\dbch\af31505\loch\f2  nodes \hich\af2\dbch\af31505\loch\f2 available\hich\af2\dbch\af31505\loch\f2  
\hich\af2\dbch\af31505\loch\f2 in\hich\af2\dbch\af31505\loch\f2  the \hich\af2\dbch\af31505\loch\f2 physical\hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2 vicinity\hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2 // 
\hich\af2\dbch\af31505\loch\f2 are \hich\af2\dbch\af31505\loch\f2 calculated.\hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2  
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\cf17\insrsid4022136 \hich\af2\dbch\af31505\loch\f2 Coord GPSR::getNeighborPosition(const IPvXAddress & ad\hich\af2\dbch\af31505\loch\f2 dress) const
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return neighborPositionTable.getPosition(address);
\par \}
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid4022136 \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // angle
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 double GPSR::getVectorAngle(Coord vector)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     double angle = atan2(-vector.y, vector.x);
\par \hich\af2\dbch\af31505\loch\f2     if (angle < 0)
\par \hich\af2\dbch\af31505\loch\f2         angle += 2 * PI;
\par \hich\af2\dbch\af31505\loch\f2     return angle;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 double GPSR::getDestinationAngle(const IPvXAddress & address)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return getVectorAngle(getDestinationPosition(address) - mobility->getCurrentPosition());
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 double GPSR::getNeighborAngle(const IPvXAddress & address)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return getVectorAngle(getNeighb\hich\af2\dbch\af31505\loch\f2 orPosition(address) - mobility->getCurrentPosition());
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // address
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 std::string GPSR::getHostName() const
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return host->getFullName();
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 IPvXAddress GPSR::getSelfAddress() const
\par \{
\par \hich\af2\dbch\af31505\loch\f2     return routingTable->getRouterId();
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 IPvXAddress GPSR::getSenderNeighborAddress(IPv4Datagram * datagram) const
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSRPacket * packet = check_and_cast<GPSRPacket *>(dynamic_cast<cPacket *>(datagram)->getEncapsulatedPacket());
\par \hich\af2\dbch\af31505\loch\f2     return packet->getSenderAddress().get4();
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // neighbor
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 simtime_t GPSR::getNextNeighborExpiration()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     simtime_t oldestPosition = neighborPositionTable.getOldestPosition();
\par \hich\af2\dbch\af31505\loch\f2     if (oldestPosition == SimTime::getMaxTime())
\par \hich\af2\dbch\af31505\loch\f2         return oldestPosition;
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         return oldestPosition + neighborVal\hich\af2\dbch\af31505\loch\f2 idityInterval;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::purgeNeighbors()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     neighborPositionTable.removeOldPositions(simTime() - neighborValidityInterval);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 std::vector<IPvXAddress> GPSR::getPlanarNeighbors()
\par \{
\par \hich\af2\dbch\af31505\loch\f2     std::vector<IPvXAddress> planarNeighbors;
\par \hich\af2\dbch\af31505\loch\f2     std::vector<IPvXA\hich\af2\dbch\af31505\loch\f2 ddress> neighborAddresses = neighborPositionTable.getAddresses();
\par \hich\af2\dbch\af31505\loch\f2     Coord selfPosition = mobility->getCurrentPosition();
\par \hich\af2\dbch\af31505\loch\f2     for (std::vector<IPvXAddress>::iterator it = neighborAddresses.begin(); it != neighborAddresses.end(); it++) \{
\par \hich\af2\dbch\af31505\loch\f2         const IPvXAddress & neighborAddress = *it;
\par \hich\af2\dbch\af31505\loch\f2         Coord neighborPosition = neighborPositionTable.getPosition(neighborAddress);
\par \hich\af2\dbch\af31505\loch\f2         if (planarizationMode == GPSR_RNG_PLANARIZATION) \{
\par \hich\af2\dbch\af31505\loch\f2             double neighborDistance = (neighborPosition - sel\hich\af2\dbch\af31505\loch\f2 fPosition).length();
\par \hich\af2\dbch\af31505\loch\f2             for (std::vector<IPvXAddress>::iterator jt = neighborAddresses.begin(); jt != neighborAddresses.end(); jt++) \{
\par \hich\af2\dbch\af31505\loch\f2                 const IPvXAddress & witnessAddress = *jt;
\par \hich\af2\dbch\af31505\loch\f2                 Coord witnessPosition = neighborPositi\hich\af2\dbch\af31505\loch\f2 onTable.getPosition(witnessAddress);
\par \hich\af2\dbch\af31505\loch\f2                 double witnessDistance = (witnessPosition - selfPosition).length();;
\par \hich\af2\dbch\af31505\loch\f2                 double neighborWitnessDistance = (witnessPosition - neighborPosition).length();
\par \hich\af2\dbch\af31505\loch\f2                 if (*it == *jt)
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2               continue;
\par \hich\af2\dbch\af31505\loch\f2                 else if (neighborDistance > std::max(witnessDistance, neighborWitnessDistance))
\par \hich\af2\dbch\af31505\loch\f2                     goto eliminate;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else if (planarizationMode == GPSR_GG_PLANARIZATION) \{
\par \hich\af2\dbch\af31505\loch\f2             C\hich\af2\dbch\af31505\loch\f2 oord middlePosition = (selfPosition + neighborPosition) / 2;
\par \hich\af2\dbch\af31505\loch\f2             double neighborDistance = (neighborPosition - middlePosition).length();
\par \hich\af2\dbch\af31505\loch\f2             for (std::vector<IPvXAddress>::iterator jt = neighborAddresses.begin(); jt != neighborAddresses.end\hich\af2\dbch\af31505\loch\f2 (); jt++) \{
\par \hich\af2\dbch\af31505\loch\f2                 const IPvXAddress & witnessAddress = *jt;
\par \hich\af2\dbch\af31505\loch\f2                 Coord witnessPosition = neighborPositionTable.getPosition(witnessAddress);
\par \hich\af2\dbch\af31505\loch\f2                 double witnessDistance = (witnessPosition - middlePosition).length();;
\par \hich\af2\dbch\af31505\loch\f2         \hich\af2\dbch\af31505\loch\f2         if (*it == *jt)
\par \hich\af2\dbch\af31505\loch\f2                     continue;
\par \hich\af2\dbch\af31505\loch\f2                 else if (witnessDistance < neighborDistance)
\par \hich\af2\dbch\af31505\loch\f2                     goto eliminate;
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else
\par \hich\af2\dbch\af31505\loch\f2             throw cRuntimeError("Unknown planarization mode");
\par \hich\af2\dbch\af31505\loch\f2         planarNeighbors.push_back(*it);
\par \hich\af2\dbch\af31505\loch\f2         eliminate: ;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return planarNeighbors;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 IPvXAddress GPSR::getNextPlanarNeighborCounterClockwise(const IPvXAddress& startNeighborAddress, double startNeighborAngle)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSR_EV << "Finding next pla\hich\af2\dbch\af31505\loch\f2 nar neighbor (counter clockwise): startAddress = " << startNeighborAddress << ", startAngle = " << startNeighborAngle << endl;
\par \hich\af2\dbch\af31505\loch\f2     IPvXAddress bestNeighborAddress = startNeighborAddress;
\par \hich\af2\dbch\af31505\loch\f2     double bestNeighborAngleDifference = 2 * PI;
\par \hich\af2\dbch\af31505\loch\f2     std::vector<IPvX\hich\af2\dbch\af31505\loch\f2 Address> neighborAddresses = getPlanarNeighbors();
\par \hich\af2\dbch\af31505\loch\f2     for (std::vector<IPvXAddress>::iterator it = neighborAddresses.begin(); it != neighborAddresses.end(); it++) \{
\par \hich\af2\dbch\af31505\loch\f2         const IPvXAddress & neighborAddress = *it;
\par \hich\af2\dbch\af31505\loch\f2         double neighborAngle = getNeigh\hich\af2\dbch\af31505\loch\f2 borAngle(neighborAddress);
\par \hich\af2\dbch\af31505\loch\f2         double neighborAngleDifference = neighborAngle - startNeighborAngle;
\par \hich\af2\dbch\af31505\loch\f2         if (neighborAngleDifference < 0)
\par \hich\af2\dbch\af31505\loch\f2             neighborAngleDifference += 2 * PI;
\par \hich\af2\dbch\af31505\loch\f2         GPSR_EV << "Trying next planar neighbor (counter clockwi\hich\af2\dbch\af31505\loch\f2 se): address = " << neighborAddress << ", angle = " << neighborAngle << endl;
\par \hich\af2\dbch\af31505\loch\f2         if (neighborAngleDifference != 0 && neighborAngleDifference < bestNeighborAngleDifference) \{
\par \hich\af2\dbch\af31505\loch\f2             bestNeighborAngleDifference = neighborAngleDifference;
\par \hich\af2\dbch\af31505\loch\f2           \hich\af2\dbch\af31505\loch\f2   bestNeighborAddress = neighborAddress;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return bestNeighborAddress;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // next hop
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 IPvXAddress GPSR::findNextHop(IPv4Datagram * datagram, const IPvXAddress & destination)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSRPacket * packet = check_and_cast<GPSRPacket *>(dynamic_cast<cPacket *>(datagram)->getEncapsulatedPacket());
\par \hich\af2\dbch\af31505\loch\f2     if (packet->getRoutingMode() == GPSR_GREEDY_ROUTING)
\par \hich\af2\dbch\af31505\loch\f2         return findGreedyRoutingNextHop(datagram, destination);
\par \hich\af2\dbch\af31505\loch\f2     else if (packet\hich\af2\dbch\af31505\loch\f2 ->getRoutingMode() == GPSR_PERIMETER_ROUTING)
\par \hich\af2\dbch\af31505\loch\f2         return findPerimeterRoutingNextHop(datagram, destination);
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         throw cRuntimeError("Unknown routing mode");
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 IPvXAddress GPSR::findGreedyRoutingNextHop(IPv4Datagram * datagram, const IPvX\hich\af2\dbch\af31505\loch\f2 Address & destination)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSR_EV << "Finding next hop using greedy routing: destination = " << destination << endl;
\par \hich\af2\dbch\af31505\loch\f2     GPSRPacket * packet = check_and_cast<GPSRPacket *>(dynamic_cast<cPacket *>(datagram)->getEncapsulatedPacket());
\par \hich\af2\dbch\af31505\loch\f2     IPvXAddress self\hich\af2\dbch\af31505\loch\f2 Address = getSelfAddress();
\par \hich\af2\dbch\af31505\loch\f2     Coord selfPosition = mobility->getCurrentPosition();
\par \hich\af2\dbch\af31505\loch\f2     Coord destinationPosition = packet->getDestinationPosition();
\par \hich\af2\dbch\af31505\loch\f2     double bestDistance = (destinationPosition - selfPosition).length();
\par \hich\af2\dbch\af31505\loch\f2     IPvXAddress bestNeighbor;
\par \hich\af2\dbch\af31505\loch\f2   \hich\af2\dbch\af31505\loch\f2   std::vector<IPvXAddress> neighborAddresses = neighborPositionTable.getAddresses();
\par \hich\af2\dbch\af31505\loch\f2     for (std::vector<IPvXAddress>::iterator it = neighborAddresses.begin(); it != neighborAddresses.end(); it++) \{
\par \hich\af2\dbch\af31505\loch\f2         const IPvXAddress & neighborAddress = *it;
\par \hich\af2\dbch\af31505\loch\f2         Coord neighborPosition = neighborPositionTable.getPosition(neighborAddress);
\par \hich\af2\dbch\af31505\loch\f2         double neighborDistance = (destinationPosition - neighborPosition).length();
\par \hich\af2\dbch\af31505\loch\f2         if (neighborDistance < bestDistance) \{
\par \hich\af2\dbch\af31505\loch\f2             bestDistance = neighborDist\hich\af2\dbch\af31505\loch\f2 ance;
\par \hich\af2\dbch\af31505\loch\f2             bestNeighbor = neighborAddress.get4();
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     if (bestNeighbor.isUnspecified()) \{
\par \hich\af2\dbch\af31505\loch\f2         GPSR_EV << "Switching to perimeter routing: destination = " << destination << endl;
\par \hich\af2\dbch\af31505\loch\f2         packet->setRoutingMode(GPSR_PERIMETER_ROUTI\hich\af2\dbch\af31505\loch\f2 NG);
\par \hich\af2\dbch\af31505\loch\f2         packet->setPerimeterRoutingStartPosition(selfPosition);
\par \hich\af2\dbch\af31505\loch\f2         packet->setCurrentFaceFirstSenderAddress(selfAddress);
\par \hich\af2\dbch\af31505\loch\f2         packet->setCurrentFaceFirstReceiverAddress(IPvXAddress());
\par \hich\af2\dbch\af31505\loch\f2         return findPerimeterRoutingNextHop(datagram, dest\hich\af2\dbch\af31505\loch\f2 ination);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         return bestNeighbor;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 IPvXAddress GPSR::findPerimeterRoutingNextHop(IPv4Datagram * datagram, const IPvXAddress & destination)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     GPSR_EV << "Finding next hop using perimeter routing: destination = " << destination << e\hich\af2\dbch\af31505\loch\f2 ndl;
\par \hich\af2\dbch\af31505\loch\f2     GPSRPacket * packet = check_and_cast<GPSRPacket *>(dynamic_cast<cPacket *>(datagram)->getEncapsulatedPacket());
\par \hich\af2\dbch\af31505\loch\f2     IPvXAddress selfAddress = getSelfAddress();
\par \hich\af2\dbch\af31505\loch\f2     Coord selfPosition = mobility->getCurrentPosition();
\par \hich\af2\dbch\af31505\loch\f2     Coord perimeterRoutingStar\hich\af2\dbch\af31505\loch\f2 tPosition = packet->getPerimeterRoutingStartPosition();
\par \hich\af2\dbch\af31505\loch\f2     Coord destinationPosition = packet->getDestinationPosition();
\par \hich\af2\dbch\af31505\loch\f2     double selfDistance = (destinationPosition - selfPosition).length();
\par \hich\af2\dbch\af31505\loch\f2     double perimeterRoutingStartDistance = (destinationPosition - perimeterRoutingStartPosition).length();
\par \hich\af2\dbch\af31505\loch\f2     if (selfDistance < perimeterRoutingStartDistance) \{
\par \hich\af2\dbch\af31505\loch\f2         GPSR_EV << "Switching to greedy routing: destination = " << destination << endl;
\par \hich\af2\dbch\af31505\loch\f2     \hich\af2\dbch\af31505\loch\f2     packet->setRoutingMode(GPSR_GREEDY_ROUTING);
\par \hich\af2\dbch\af31505\loch\f2         packet->setPerimeterRoutingStartPosition(Coord());
\par \hich\af2\dbch\af31505\loch\f2         packet->setPerimeterRoutingForwardPosition(Coord());
\par \hich\af2\dbch\af31505\loch\f2         return findGreedyRoutingNextHop(datagram, destination);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else \{
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2   IPvXAddress & firstSenderAddress = packet->getCurrentFaceFirstSenderAddress();
\par \hich\af2\dbch\af31505\loch\f2         IPvXAddress & firstReceiverAddress = packet->getCurrentFaceFirstReceiverAddress();
\par \hich\af2\dbch\af31505\loch\f2         IPvXAddress nextNeighborAddress = getSenderNeighborAddress(datagram);
\par \hich\af2\dbch\af31505\loch\f2       \hich\af2\dbch\af31505\loch\f2   bool hasIntersection;
\par \hich\af2\dbch\af31505\loch\f2         do \{
\par \hich\af2\dbch\af31505\loch\f2             if (nextNeighborAddress.isUnspecified())
\par \hich\af2\dbch\af31505\loch\f2                 nextNeighborAddress = getNextPlanarNeighborCounterClockwise(nextNeighborAddress, getDestinationAngle(destination));
\par \hich\af2\dbch\af31505\loch\f2             else
\par \hich\af2\dbch\af31505\loch\f2                 n\hich\af2\dbch\af31505\loch\f2 extNeighborAddress = getNextPlanarNeighborCounterClockwise(nextNeighborAddress, getNeighborAngle(nextNeighborAddress));
\par \hich\af2\dbch\af31505\loch\f2             if (nextNeighborAddress.isUnspecified())
\par \hich\af2\dbch\af31505\loch\f2                 break;
\par \hich\af2\dbch\af31505\loch\f2             GPSR_EV << "Intersecting towards next hop: nextN\hich\af2\dbch\af31505\loch\f2 
eighbor = " << nextNeighborAddress << ", firstSender = " << firstSenderAddress << ", firstReceiver = " << firstReceiverAddress << ", destination = " << destination << endl;
\par \hich\af2\dbch\af31505\loch\f2             Coord nextNeighborPosition = getNeighborPosition(nextNeighborAddress);
\par \hich\af2\dbch\af31505\loch\f2             Coord intersection = intersectSections(perimeterRoutingStartPosition, destinationPosition, selfPosition, nextNeighborPosition);
\par \hich\af2\dbch\af31505\loch\f2             hasIntersection = !isNaN(intersection.x);
\par \hich\af2\dbch\af31505\loch\f2             if (hasIntersection) \{
\par \hich\af2\dbch\af31505\loch\f2                 GPSR_EV << \hich\af2\dbch\af31505\loch\f2 
"Edge to next hop intersects: intersection = " << intersection << ", nextNeighbor = " << nextNeighborAddress << ", firstSender = " << firstSenderAddress << ", firstReceiver = " << firstReceiverAddress << ", destination = " << destination << endl;
\par \hich\af2\dbch\af31505\loch\f2                 packet->setCurrentFaceFirstSenderAddress(selfAddress);
\par \hich\af2\dbch\af31505\loch\f2                 packet->setCurrentFaceFirstReceiverAddress(IPvXAddress());
\par \hich\af2\dbch\af31505\loch\f2             \}
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         while (hasIntersection);
\par \hich\af2\dbch\af31505\loch\f2         if (firstSenderAddress == selfAddress && firs\hich\af2\dbch\af31505\loch\f2 tReceiverAddress == nextNeighborAddress) \{
\par \hich\af2\dbch\af31505\loch\f2             GPSR_EV << "End of perimeter reached: firstSender = " << firstSenderAddress << ", firstReceiver = " << firstReceiverAddress << ", destination = " << destination << endl;
\par \hich\af2\dbch\af31505\loch\f2             return IPvXAddress(\hich\af2\dbch\af31505\loch\f2 );
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2         else \{
\par \hich\af2\dbch\af31505\loch\f2             if (packet->getCurrentFaceFirstReceiverAddress().isUnspecified())
\par \hich\af2\dbch\af31505\loch\f2                 packet->setCurrentFaceFirstReceiverAddress(nextNeighborAddress);
\par \hich\af2\dbch\af31505\loch\f2             return nextNeighborAddress;
\par \hich\af2\dbch\af31505\loch\f2         \}
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // rout\hich\af2\dbch\af31505\loch\f2 ing
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 INetfilter::IHook::Result GPSR::routeDatagram(IPv4Datagram * datagram, const InterfaceEntry *& outputInterfaceEntry, IPv4Address & nextHop)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     const IPvXAddress source = datagram->getSrcAddress();
\par \hich\af2\dbch\af31505\loch\f2     const IPvXAddress destination = datagram->ge\hich\af2\dbch\af31505\loch\f2 tDestAddress();
\par \hich\af2\dbch\af31505\loch\f2     GPSR_EV << "Finding next hop: source = " << source << ", destination = " << destination << endl;
\par \hich\af2\dbch\af31505\loch\f2     nextHop = findNextHop(datagram, destination).get4();
\par \hich\af2\dbch\af31505\loch\f2     if (nextHop.isUnspecified()) \{
\par \hich\af2\dbch\af31505\loch\f2         GPSR_EV << "No next hop found, dropping packet: source = " << source << ", destination = " << destination << endl;
\par \hich\af2\dbch\af31505\loch\f2         return DROP;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else \{
\par \hich\af2\dbch\af31505\loch\f2         GPSR_EV << "Next hop found: source = " << source << ", destination = " << destination <\hich\af2\dbch\af31505\loch\f2 < ", nextHop: " << nextHop << endl;
\par \hich\af2\dbch\af31505\loch\f2         GPSRPacket * packet = check_and_cast<GPSRPacket *>(dynamic_cast<cPacket *>(datagram)->getEncapsulatedPacket());
\par \hich\af2\dbch\af31505\loch\f2         packet->setSenderAddress(getSelfAddress());
\par \hich\af2\dbch\af31505\loch\f2         // KLUDGE: find output interface
\par \hich\af2\dbch\af31505\loch\f2        \hich\af2\dbch\af31505\loch\f2  outputInterfaceEntry = interfaceTable->getInterface(1);
\par \hich\af2\dbch\af31505\loch\f2         return ACCEPT;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // netfilter
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 INetfilter::IHook::Result GPSR::datagramPreRoutingHook(IPv4Datagram * datagram, const InterfaceEntry * inputInterfaceEntry, const InterfaceEntry *&\hich\af2\dbch\af31505\loch\f2  outputInterfaceEntry, IPv4Address & nextHop)

\par \{
\par \hich\af2\dbch\af31505\loch\f2     const IPv4Address & destination = datagram->getDestAddress();
\par \hich\af2\dbch\af31505\loch\f2     if (destination.isMulticast() || destination.isLimitedBroadcastAddress() || routingTable->isLocalAddress(destination))
\par \hich\af2\dbch\af31505\loch\f2         return ACCE\hich\af2\dbch\af31505\loch\f2 PT;
\par \hich\af2\dbch\af31505\loch\f2     else
\par \hich\af2\dbch\af31505\loch\f2         return routeDatagram(datagram, outputInterfaceEntry, nextHop);
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 INetfilter::IHook::Result GPSR::datagramLocalInHook(IPv4Datagram * datagram, const InterfaceEntry * inputInterfaceEntry)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     cPacket * networkPacket = dynamic_cast<cPacket *>(datagram);
\par \hich\af2\dbch\af31505\loch\f2     GPSRPacket * gpsrPacket = dynamic_cast<GPSRPacket *>(networkPacket->getEncapsulatedPacket());
\par \hich\af2\dbch\af31505\loch\f2     if (gpsrPacket) \{
\par \hich\af2\dbch\af31505\loch\f2         networkPacket->decapsulate();
\par \hich\af2\dbch\af31505\loch\f2         networkPacket->encapsulat\hich\af2\dbch\af31505\loch\f2 e(gpsrPacket->decapsulate());
\par \hich\af2\dbch\af31505\loch\f2         delete gpsrPacket;
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     return ACCEPT;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 INetfilter::IHook::Result GPSR::datagramLocalOutHook(IPv4Datagram * datagram, const InterfaceEntry *& outputInterfaceEntry, IPv4Address & nextHop)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     const IPv4Address \hich\af2\dbch\af31505\loch\f2 & destination = datagram->getDestAddress();
\par \hich\af2\dbch\af31505\loch\f2     if (destination.isMulticast() || destination.isLimitedBroadcastAddress() || routingTable->isLocalAddress(destination))
\par \hich\af2\dbch\af31505\loch\f2         return ACCEPT;
\par \hich\af2\dbch\af31505\loch\f2     else \{
\par \hich\af2\dbch\af31505\loch\f2         cPacket * networkPacket = dynamic_cast<cPacket \hich\af2\dbch\af31505\loch\f2 *>(datagram);
\par \hich\af2\dbch\af31505\loch\f2         GPSRPacket * gpsrPacket = createPacket(datagram->getDestAddress(), networkPacket->decapsulate());
\par \hich\af2\dbch\af31505\loch\f2         networkPacket->encapsulate(gpsrPacket);
\par \hich\af2\dbch\af31505\loch\f2         return routeDatagram(datagram, outputInterfaceEntry, nextHop);
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // l\hich\af2\dbch\af31505\loch\f2 ifecycle
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 bool GPSR::handleOperationStage(LifecycleOperation * operation, int stage, IDoneCallback * doneCallback)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     Enter_Method_Silent();
\par \hich\af2\dbch\af31505\loch\f2     if (dynamic_cast<NodeStartOperation *>(operation))  \{
\par \hich\af2\dbch\af31505\loch\f2         if (stage == NodeS\hich\af2\dbch\af31505\loch\f2 tartOperation::STAGE_APPLICATION_LAYER)
\par \hich\af2\dbch\af31505\loch\f2             configureInterfaces();
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else if (dynamic_cast<NodeShutdownOperation *>(operation)) \{
\par \hich\af2\dbch\af31505\loch\f2         if (stage == NodeShutdownOperation::STAGE_APPLICATION_LAYER)
\par \hich\af2\dbch\af31505\loch\f2             // TODO: send a beacon to rem\hich\af2\dbch\af31505\loch\f2 ove ourself from peers neighbor position table
\par \hich\af2\dbch\af31505\loch\f2             neighborPositionTable.clear();
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \hich\af2\dbch\af31505\loch\f2     else if (dynamic_cast<NodeCrashOperation *>(operation)) \{
\par \hich\af2\dbch\af31505\loch\f2         if (stage == NodeCrashOperation::STAGE_CRASH)
\par \hich\af2\dbch\af31505\loch\f2             neighborPositionTable.clear();
\par \hich\af2\dbch\af31505\loch\f2  \hich\af2\dbch\af31505\loch\f2    \}
\par \hich\af2\dbch\af31505\loch\f2     else throw cRuntimeError("Unsupported lifecycle operation '%s'", operation->getClassName());
\par \hich\af2\dbch\af31505\loch\f2     return true;
\par \}
\par 
\par \hich\af2\dbch\af31505\loch\f2 //
\par \hich\af2\dbch\af31505\loch\f2 // notification
\par \hich\af2\dbch\af31505\loch\f2 //
\par 
\par \hich\af2\dbch\af31505\loch\f2 void GPSR::receiveChangeNotification(int signalID, const cObject *obj)
\par \{
\par \hich\af2\dbch\af31505\loch\f2     Enter_Method("receiveChangeNotific\hich\af2\dbch\af31505\loch\f2 ation");
\par \hich\af2\dbch\af31505\loch\f2     if (signalID == NF_LINK_BREAK) \{
\par \hich\af2\dbch\af31505\loch\f2         GPSR_EV << "Received link break" << endl;
\par \hich\af2\dbch\af31505\loch\f2         // TODO: shall we remove the neighbor?
\par \hich\af2\dbch\af31505\loch\f2     \}
\par \}
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid4022136 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b03041400060008000000210030dd4329a8060000a41b0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87
615b8116d8a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad
79482a9c0498f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b
5d8a314d3c94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab
999fb7b4717509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9
699640f6719e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd586
8b37a088d1e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d6
0cf03ac1a5193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f
9e7ef3f2d117d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be
15c308d3f28acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a9979
3849c26ae66252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d
32a423279a668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2a
f074481847bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86
e877f0034e16bafb0e258ebb4faf06b769e888340b103d331115bebc4eb813bf83291b63624a0d1475a756c734f9bbc2cd28546ecbe1e20a3794ca175f3fae90
fb6d2dd99bb07b55e5ccf68942bd0877b23c77b908e8db5f9db7f024d9239010f35bd4bbe2fcae387bfff9e2bc289f2fbe24cfaa301468dd8bd846dbb4ddf1c2
ae7b4c191ba8292337a469bc25ec3d411f06f53a73e224c5292c8de0516732307070a1c0660d125c7d44553488700a4d7bddd3444299910e254ab984c3a219ae
a4adf1d0f82b7bd46cea4388ad1c12ab5d1ed8e1153d9c9f350a3246aad01c6873462b9ac05999ad5cc988826eafc3acae853a33b7ba11cd1445875ba1b236b1
399483c90bd560b0b0263435085a21b0f22a9cf9356b38ec6046026d77eba3dc2dc60b17e92219e180643ed27acffba86e9c94c7ca9c225a0f1b0cfae0788ad5
4adc5a9aec1b703b8b93caec1a0bd8e5de7b132fe5113cf312503b998e2c2927274bd051db6b35979b1ef271daf6c6704e86c73805af4bdd476216c26593af84
0dfb5393d964f9cc9bad5c313709ea70f561ed3ea7b053075221d51696910d0d339585004b34272bff7213cc7a510a5454a3b349b1b206c1f0af490176745d4b
c663e2abb2b34b23da76f6352ba57ca2881844c1111ab189d8c7e07e1daaa04f40255c77988aa05fe06e4e5bdb4cb9c5394bbaf28d98c1d971ccd20867e556a7
689ec9166e0a522183792b8907ba55ca6e943bbf2a26e52f48957218ffcf54d1fb09dc3eac04da033e5c0d0b8c74a6b43d2e54c4a10aa511f5fb021a07533b20
5ae07e17a621a8e082dafc17e450ffb739676998b48643a4daa7211214f623150942f6a02c99e83b85583ddbbb2c4996113211551257a656ec1139246ca86be0
aadedb3d1441a89b6a929501833b197fee7b9641a3503739e57c732a59b1f7da1cf8a73b1f9bcca0945b874d4393dbbf10b1680f66bbaa5d6f96e77b6f59113d
316bb31a795600b3d256d0cad2fe354538e7566b2bd69cc6cbcd5c38f0e2bcc63058344429dc2121fd07f63f2a7c66bf76e80d75c8f7a1b622f878a18941d840
545fb28d07d205d20e8ea071b283369834296bdaac75d256cb37eb0bee740bbe278cad253b8bbfcf69eca23973d939b97891c6ce2cecd8da8e2d343578f6648a
c2d0383fc818c798cf64e52f597c740f1cbd05df0c264c49134cf09d4a60e8a107260f20f92d47b374e32f000000ffff0300504b030414000600080000002100
0dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f7
8277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89
d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd500
1996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0f
bfff0000001c0200001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6
a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a
0000001c00000000000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d00140006000800000021
0030dd4329a8060000a41b00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d001400060008
00000021000dd1909fb60000001b0100002700000000000000000000000000b20900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000ad0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e500000000000000000000000070ad
742752c4d801feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}