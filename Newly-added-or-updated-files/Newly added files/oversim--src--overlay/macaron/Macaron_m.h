//
// Generated file, do not edit! Created by nedtool 4.6 from overlay/macaron/Macaron.msg.
//

#ifndef _MACARON_M_H_
#define _MACARON_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <NodeHandle.h>
#include <OverlayKey.h>
#include <CommonMessages_m.h>
// }}

/**
 * Class generated from <tt>overlay/macaron/Macaron.msg:17</tt> by nedtool.
 * <pre>
 * packet MyNeighborCall extends BaseCallMessage
 * {
 *     OverlayKey destinationKey;
 * }
 * </pre>
 */
class MyNeighborCall : public ::BaseCallMessage
{
  protected:
    OverlayKey destinationKey_var;

  private:
    void copy(const MyNeighborCall& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyNeighborCall&);

  public:
    MyNeighborCall(const char *name=NULL, int kind=0);
    MyNeighborCall(const MyNeighborCall& other);
    virtual ~MyNeighborCall();
    MyNeighborCall& operator=(const MyNeighborCall& other);
    virtual MyNeighborCall *dup() const {return new MyNeighborCall(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual OverlayKey& getDestinationKey();
    virtual const OverlayKey& getDestinationKey() const {return const_cast<MyNeighborCall*>(this)->getDestinationKey();}
    virtual void setDestinationKey(const OverlayKey& destinationKey);
};

inline void doPacking(cCommBuffer *b, MyNeighborCall& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MyNeighborCall& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/macaron/Macaron.msg:22</tt> by nedtool.
 * <pre>
 * packet MyNeighborResponse extends BaseResponseMessage
 * {
 *     NodeHandle respondingNode;
 *     NodeHandle prevNeighbor;
 *     NodeHandle nextNeighbor;
 * }
 * </pre>
 */
class MyNeighborResponse : public ::BaseResponseMessage
{
  protected:
    NodeHandle respondingNode_var;
    NodeHandle prevNeighbor_var;
    NodeHandle nextNeighbor_var;

  private:
    void copy(const MyNeighborResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyNeighborResponse&);

  public:
    MyNeighborResponse(const char *name=NULL, int kind=0);
    MyNeighborResponse(const MyNeighborResponse& other);
    virtual ~MyNeighborResponse();
    MyNeighborResponse& operator=(const MyNeighborResponse& other);
    virtual MyNeighborResponse *dup() const {return new MyNeighborResponse(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual NodeHandle& getRespondingNode();
    virtual const NodeHandle& getRespondingNode() const {return const_cast<MyNeighborResponse*>(this)->getRespondingNode();}
    virtual void setRespondingNode(const NodeHandle& respondingNode);
    virtual NodeHandle& getPrevNeighbor();
    virtual const NodeHandle& getPrevNeighbor() const {return const_cast<MyNeighborResponse*>(this)->getPrevNeighbor();}
    virtual void setPrevNeighbor(const NodeHandle& prevNeighbor);
    virtual NodeHandle& getNextNeighbor();
    virtual const NodeHandle& getNextNeighbor() const {return const_cast<MyNeighborResponse*>(this)->getNextNeighbor();}
    virtual void setNextNeighbor(const NodeHandle& nextNeighbor);
};

inline void doPacking(cCommBuffer *b, MyNeighborResponse& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MyNeighborResponse& obj) {obj.parsimUnpack(b);}


#endif // ifndef _MACARON_M_H_

